/* eslint-disable */ /* This directive is required as otherwise compilation failes (protobuf + create react app issue) */
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.LmdbCache.AddRequest', null, global);
goog.exportSymbol('proto.LmdbCache.AddRequest.AddRequestEntry', null, global);
goog.exportSymbol('proto.LmdbCache.AddRequest.Header', null, global);
goog.exportSymbol('proto.LmdbCache.AddResponse', null, global);
goog.exportSymbol('proto.LmdbCache.AddResponse.AddResult', null, global);
goog.exportSymbol('proto.LmdbCache.AddStreamRequest', null, global);
goog.exportSymbol('proto.LmdbCache.AddStreamRequest.DataChunk', null, global);
goog.exportSymbol('proto.LmdbCache.ClientConfig', null, global);
goog.exportSymbol('proto.LmdbCache.ClusterStatus', null, global);
goog.exportSymbol('proto.LmdbCache.CollectedStats', null, global);
goog.exportSymbol('proto.LmdbCache.ContainsKeysResponse', null, global);
goog.exportSymbol('proto.LmdbCache.CopyRequest', null, global);
goog.exportSymbol('proto.LmdbCache.CopyRequest.CopyRequestEntry', null, global);
goog.exportSymbol('proto.LmdbCache.CopyResponse', null, global);
goog.exportSymbol('proto.LmdbCache.CopyResponse.CopyResult', null, global);
goog.exportSymbol('proto.LmdbCache.DeleteRequest', null, global);
goog.exportSymbol('proto.LmdbCache.DeleteResponse', null, global);
goog.exportSymbol('proto.LmdbCache.DeleteResponse.DeleteResult', null, global);
goog.exportSymbol('proto.LmdbCache.Empty', null, global);
goog.exportSymbol('proto.LmdbCache.GetReplicaIdResponse', null, global);
goog.exportSymbol('proto.LmdbCache.GetRequest', null, global);
goog.exportSymbol('proto.LmdbCache.GetResponse', null, global);
goog.exportSymbol('proto.LmdbCache.GetResponse.GetResponseEntry', null, global);
goog.exportSymbol('proto.LmdbCache.GetResponse.GetResponseEntry.GetResult', null, global);
goog.exportSymbol('proto.LmdbCache.GetStreamResponse', null, global);
goog.exportSymbol('proto.LmdbCache.KeyListRequest', null, global);
goog.exportSymbol('proto.LmdbCache.KeyListResponse', null, global);
goog.exportSymbol('proto.LmdbCache.KeyValueListResponse', null, global);
goog.exportSymbol('proto.LmdbCache.KvMetadata', null, global);
goog.exportSymbol('proto.LmdbCache.KvMetadata.Status', null, global);
goog.exportSymbol('proto.LmdbCache.KvMetadata.UpdateAction', null, global);
goog.exportSymbol('proto.LmdbCache.LightningConfig', null, global);
goog.exportSymbol('proto.LmdbCache.LightningDbSyncMode', null, global);
goog.exportSymbol('proto.LmdbCache.MonitoringUpdateRequest', null, global);
goog.exportSymbol('proto.LmdbCache.MonitoringUpdateResponse', null, global);
goog.exportSymbol('proto.LmdbCache.ReplicaConfig', null, global);
goog.exportSymbol('proto.LmdbCache.ReplicaConnectionInfo', null, global);
goog.exportSymbol('proto.LmdbCache.ReplicaCounters', null, global);
goog.exportSymbol('proto.LmdbCache.ReplicaStatus', null, global);
goog.exportSymbol('proto.LmdbCache.ReplicationConfig', null, global);
goog.exportSymbol('proto.LmdbCache.SyncPacket', null, global);
goog.exportSymbol('proto.LmdbCache.SyncPacket.Item', null, global);
goog.exportSymbol('proto.LmdbCache.SyncPacket.Items', null, global);
goog.exportSymbol('proto.LmdbCache.SyncPacket.SkipPos', null, global);
goog.exportSymbol('proto.LmdbCache.SyncPacket.SyncFrom', null, global);
goog.exportSymbol('proto.LmdbCache.Timestamp', null, global);
goog.exportSymbol('proto.LmdbCache.ValueMetadata', null, global);
goog.exportSymbol('proto.LmdbCache.ValueMetadata.Compression', null, global);
goog.exportSymbol('proto.LmdbCache.ValueMetadata.HashedWith', null, global);
goog.exportSymbol('proto.LmdbCache.VectorClock', null, global);
goog.exportSymbol('proto.LmdbCache.WriteLogEvent', null, global);
goog.exportSymbol('proto.LmdbCache.WriteLogEvent.AddedOrUpdated', null, global);
goog.exportSymbol('proto.LmdbCache.WriteLogEvent.Deleted', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LmdbCache.LightningConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.LmdbCache.LightningConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.LmdbCache.LightningConfig.displayName = 'proto.LmdbCache.LightningConfig';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LmdbCache.LightningConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.LmdbCache.LightningConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LmdbCache.LightningConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LmdbCache.LightningConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    storagelimit: jspb.Message.getFieldWithDefault(msg, 2, 0),
    maxtables: jspb.Message.getFieldWithDefault(msg, 3, 0),
    writebatchtimeoutmilliseconds: jspb.Message.getFieldWithDefault(msg, 4, 0),
    writebatchmaxdelegates: jspb.Message.getFieldWithDefault(msg, 5, 0),
    syncmode: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LmdbCache.LightningConfig}
 */
proto.LmdbCache.LightningConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LmdbCache.LightningConfig;
  return proto.LmdbCache.LightningConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LmdbCache.LightningConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LmdbCache.LightningConfig}
 */
proto.LmdbCache.LightningConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setStoragelimit(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxtables(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWritebatchtimeoutmilliseconds(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWritebatchmaxdelegates(value);
      break;
    case 6:
      var value = /** @type {!proto.LmdbCache.LightningDbSyncMode} */ (reader.readEnum());
      msg.setSyncmode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LmdbCache.LightningConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LmdbCache.LightningConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LmdbCache.LightningConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LmdbCache.LightningConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStoragelimit();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getMaxtables();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getWritebatchtimeoutmilliseconds();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getWritebatchmaxdelegates();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getSyncmode();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.LmdbCache.LightningConfig.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.LmdbCache.LightningConfig.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 storageLimit = 2;
 * @return {number}
 */
proto.LmdbCache.LightningConfig.prototype.getStoragelimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.LmdbCache.LightningConfig.prototype.setStoragelimit = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 maxTables = 3;
 * @return {number}
 */
proto.LmdbCache.LightningConfig.prototype.getMaxtables = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.LmdbCache.LightningConfig.prototype.setMaxtables = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 writeBatchTimeoutMilliseconds = 4;
 * @return {number}
 */
proto.LmdbCache.LightningConfig.prototype.getWritebatchtimeoutmilliseconds = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.LmdbCache.LightningConfig.prototype.setWritebatchtimeoutmilliseconds = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 writeBatchMaxDelegates = 5;
 * @return {number}
 */
proto.LmdbCache.LightningConfig.prototype.getWritebatchmaxdelegates = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.LmdbCache.LightningConfig.prototype.setWritebatchmaxdelegates = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional LightningDbSyncMode syncMode = 6;
 * @return {!proto.LmdbCache.LightningDbSyncMode}
 */
proto.LmdbCache.LightningConfig.prototype.getSyncmode = function() {
  return /** @type {!proto.LmdbCache.LightningDbSyncMode} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {!proto.LmdbCache.LightningDbSyncMode} value */
proto.LmdbCache.LightningConfig.prototype.setSyncmode = function(value) {
  jspb.Message.setProto3EnumField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LmdbCache.ReplicationConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.LmdbCache.ReplicationConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.LmdbCache.ReplicationConfig.displayName = 'proto.LmdbCache.ReplicationConfig';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LmdbCache.ReplicationConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.LmdbCache.ReplicationConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LmdbCache.ReplicationConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LmdbCache.ReplicationConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    port: jspb.Message.getFieldWithDefault(msg, 1, 0),
    pagesize: jspb.Message.getFieldWithDefault(msg, 2, 0),
    usebatching: jspb.Message.getFieldWithDefault(msg, 3, false),
    awaitsyncfrom: jspb.Message.getFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LmdbCache.ReplicationConfig}
 */
proto.LmdbCache.ReplicationConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LmdbCache.ReplicationConfig;
  return proto.LmdbCache.ReplicationConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LmdbCache.ReplicationConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LmdbCache.ReplicationConfig}
 */
proto.LmdbCache.ReplicationConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPort(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPagesize(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUsebatching(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAwaitsyncfrom(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LmdbCache.ReplicationConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LmdbCache.ReplicationConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LmdbCache.ReplicationConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LmdbCache.ReplicationConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPort();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getPagesize();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getUsebatching();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getAwaitsyncfrom();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional uint32 port = 1;
 * @return {number}
 */
proto.LmdbCache.ReplicationConfig.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.LmdbCache.ReplicationConfig.prototype.setPort = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 pageSize = 2;
 * @return {number}
 */
proto.LmdbCache.ReplicationConfig.prototype.getPagesize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.LmdbCache.ReplicationConfig.prototype.setPagesize = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bool useBatching = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.LmdbCache.ReplicationConfig.prototype.getUsebatching = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.LmdbCache.ReplicationConfig.prototype.setUsebatching = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool awaitSyncFrom = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.LmdbCache.ReplicationConfig.prototype.getAwaitsyncfrom = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.LmdbCache.ReplicationConfig.prototype.setAwaitsyncfrom = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LmdbCache.ReplicaConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.LmdbCache.ReplicaConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.LmdbCache.ReplicaConfig.displayName = 'proto.LmdbCache.ReplicaConfig';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LmdbCache.ReplicaConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.LmdbCache.ReplicaConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LmdbCache.ReplicaConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LmdbCache.ReplicaConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    replicaid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    hostname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    port: jspb.Message.getFieldWithDefault(msg, 3, 0),
    webuiport: jspb.Message.getFieldWithDefault(msg, 4, 0),
    monitoringport: jspb.Message.getFieldWithDefault(msg, 5, 0),
    monitoringinterval: jspb.Message.getFieldWithDefault(msg, 6, 0),
    masternode: jspb.Message.getFieldWithDefault(msg, 10, ""),
    persistence: (f = msg.getPersistence()) && proto.LmdbCache.LightningConfig.toObject(includeInstance, f),
    replication: (f = msg.getReplication()) && proto.LmdbCache.ReplicationConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LmdbCache.ReplicaConfig}
 */
proto.LmdbCache.ReplicaConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LmdbCache.ReplicaConfig;
  return proto.LmdbCache.ReplicaConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LmdbCache.ReplicaConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LmdbCache.ReplicaConfig}
 */
proto.LmdbCache.ReplicaConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setReplicaid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setHostname(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPort(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWebuiport(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMonitoringport(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMonitoringinterval(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setMasternode(value);
      break;
    case 15:
      var value = new proto.LmdbCache.LightningConfig;
      reader.readMessage(value,proto.LmdbCache.LightningConfig.deserializeBinaryFromReader);
      msg.setPersistence(value);
      break;
    case 20:
      var value = new proto.LmdbCache.ReplicationConfig;
      reader.readMessage(value,proto.LmdbCache.ReplicationConfig.deserializeBinaryFromReader);
      msg.setReplication(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LmdbCache.ReplicaConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LmdbCache.ReplicaConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LmdbCache.ReplicaConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LmdbCache.ReplicaConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReplicaid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getHostname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getWebuiport();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getMonitoringport();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getMonitoringinterval();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getMasternode();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getPersistence();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.LmdbCache.LightningConfig.serializeBinaryToWriter
    );
  }
  f = message.getReplication();
  if (f != null) {
    writer.writeMessage(
      20,
      f,
      proto.LmdbCache.ReplicationConfig.serializeBinaryToWriter
    );
  }
};


/**
 * optional string replicaId = 1;
 * @return {string}
 */
proto.LmdbCache.ReplicaConfig.prototype.getReplicaid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.LmdbCache.ReplicaConfig.prototype.setReplicaid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string hostName = 2;
 * @return {string}
 */
proto.LmdbCache.ReplicaConfig.prototype.getHostname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.LmdbCache.ReplicaConfig.prototype.setHostname = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint32 port = 3;
 * @return {number}
 */
proto.LmdbCache.ReplicaConfig.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.LmdbCache.ReplicaConfig.prototype.setPort = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 webUIPort = 4;
 * @return {number}
 */
proto.LmdbCache.ReplicaConfig.prototype.getWebuiport = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.LmdbCache.ReplicaConfig.prototype.setWebuiport = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 monitoringPort = 5;
 * @return {number}
 */
proto.LmdbCache.ReplicaConfig.prototype.getMonitoringport = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.LmdbCache.ReplicaConfig.prototype.setMonitoringport = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint32 monitoringInterval = 6;
 * @return {number}
 */
proto.LmdbCache.ReplicaConfig.prototype.getMonitoringinterval = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.LmdbCache.ReplicaConfig.prototype.setMonitoringinterval = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional string masterNode = 10;
 * @return {string}
 */
proto.LmdbCache.ReplicaConfig.prototype.getMasternode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.LmdbCache.ReplicaConfig.prototype.setMasternode = function(value) {
  jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional LightningConfig persistence = 15;
 * @return {?proto.LmdbCache.LightningConfig}
 */
proto.LmdbCache.ReplicaConfig.prototype.getPersistence = function() {
  return /** @type{?proto.LmdbCache.LightningConfig} */ (
    jspb.Message.getWrapperField(this, proto.LmdbCache.LightningConfig, 15));
};


/** @param {?proto.LmdbCache.LightningConfig|undefined} value */
proto.LmdbCache.ReplicaConfig.prototype.setPersistence = function(value) {
  jspb.Message.setWrapperField(this, 15, value);
};


proto.LmdbCache.ReplicaConfig.prototype.clearPersistence = function() {
  this.setPersistence(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.LmdbCache.ReplicaConfig.prototype.hasPersistence = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional ReplicationConfig replication = 20;
 * @return {?proto.LmdbCache.ReplicationConfig}
 */
proto.LmdbCache.ReplicaConfig.prototype.getReplication = function() {
  return /** @type{?proto.LmdbCache.ReplicationConfig} */ (
    jspb.Message.getWrapperField(this, proto.LmdbCache.ReplicationConfig, 20));
};


/** @param {?proto.LmdbCache.ReplicationConfig|undefined} value */
proto.LmdbCache.ReplicaConfig.prototype.setReplication = function(value) {
  jspb.Message.setWrapperField(this, 20, value);
};


proto.LmdbCache.ReplicaConfig.prototype.clearReplication = function() {
  this.setReplication(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.LmdbCache.ReplicaConfig.prototype.hasReplication = function() {
  return jspb.Message.getField(this, 20) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LmdbCache.ClientConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.LmdbCache.ClientConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.LmdbCache.ClientConfig.displayName = 'proto.LmdbCache.ClientConfig';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LmdbCache.ClientConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.LmdbCache.ClientConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LmdbCache.ClientConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LmdbCache.ClientConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    usestreaming: jspb.Message.getFieldWithDefault(msg, 1, false),
    compression: jspb.Message.getFieldWithDefault(msg, 2, 0),
    hashedwith: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LmdbCache.ClientConfig}
 */
proto.LmdbCache.ClientConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LmdbCache.ClientConfig;
  return proto.LmdbCache.ClientConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LmdbCache.ClientConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LmdbCache.ClientConfig}
 */
proto.LmdbCache.ClientConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUsestreaming(value);
      break;
    case 2:
      var value = /** @type {!proto.LmdbCache.ValueMetadata.Compression} */ (reader.readEnum());
      msg.setCompression(value);
      break;
    case 3:
      var value = /** @type {!proto.LmdbCache.ValueMetadata.HashedWith} */ (reader.readEnum());
      msg.setHashedwith(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LmdbCache.ClientConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LmdbCache.ClientConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LmdbCache.ClientConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LmdbCache.ClientConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUsestreaming();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getCompression();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getHashedwith();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional bool useStreaming = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.LmdbCache.ClientConfig.prototype.getUsestreaming = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.LmdbCache.ClientConfig.prototype.setUsestreaming = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional ValueMetadata.Compression compression = 2;
 * @return {!proto.LmdbCache.ValueMetadata.Compression}
 */
proto.LmdbCache.ClientConfig.prototype.getCompression = function() {
  return /** @type {!proto.LmdbCache.ValueMetadata.Compression} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.LmdbCache.ValueMetadata.Compression} value */
proto.LmdbCache.ClientConfig.prototype.setCompression = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional ValueMetadata.HashedWith hashedWith = 3;
 * @return {!proto.LmdbCache.ValueMetadata.HashedWith}
 */
proto.LmdbCache.ClientConfig.prototype.getHashedwith = function() {
  return /** @type {!proto.LmdbCache.ValueMetadata.HashedWith} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.LmdbCache.ValueMetadata.HashedWith} value */
proto.LmdbCache.ClientConfig.prototype.setHashedwith = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LmdbCache.Empty = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.LmdbCache.Empty, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.LmdbCache.Empty.displayName = 'proto.LmdbCache.Empty';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LmdbCache.Empty.prototype.toObject = function(opt_includeInstance) {
  return proto.LmdbCache.Empty.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LmdbCache.Empty} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LmdbCache.Empty.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LmdbCache.Empty}
 */
proto.LmdbCache.Empty.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LmdbCache.Empty;
  return proto.LmdbCache.Empty.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LmdbCache.Empty} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LmdbCache.Empty}
 */
proto.LmdbCache.Empty.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LmdbCache.Empty.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LmdbCache.Empty.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LmdbCache.Empty} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LmdbCache.Empty.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LmdbCache.Timestamp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.LmdbCache.Timestamp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.LmdbCache.Timestamp.displayName = 'proto.LmdbCache.Timestamp';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LmdbCache.Timestamp.prototype.toObject = function(opt_includeInstance) {
  return proto.LmdbCache.Timestamp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LmdbCache.Timestamp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LmdbCache.Timestamp.toObject = function(includeInstance, msg) {
  var f, obj = {
    ticksoffsetutc: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LmdbCache.Timestamp}
 */
proto.LmdbCache.Timestamp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LmdbCache.Timestamp;
  return proto.LmdbCache.Timestamp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LmdbCache.Timestamp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LmdbCache.Timestamp}
 */
proto.LmdbCache.Timestamp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTicksoffsetutc(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LmdbCache.Timestamp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LmdbCache.Timestamp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LmdbCache.Timestamp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LmdbCache.Timestamp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTicksoffsetutc();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 ticksOffsetUtc = 1;
 * @return {number}
 */
proto.LmdbCache.Timestamp.prototype.getTicksoffsetutc = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.LmdbCache.Timestamp.prototype.setTicksoffsetutc = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LmdbCache.VectorClock = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.LmdbCache.VectorClock, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.LmdbCache.VectorClock.displayName = 'proto.LmdbCache.VectorClock';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LmdbCache.VectorClock.prototype.toObject = function(opt_includeInstance) {
  return proto.LmdbCache.VectorClock.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LmdbCache.VectorClock} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LmdbCache.VectorClock.toObject = function(includeInstance, msg) {
  var f, obj = {
    replicasMap: (f = msg.getReplicasMap()) ? f.toObject(includeInstance, undefined) : [],
    ticksoffsetutc: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LmdbCache.VectorClock}
 */
proto.LmdbCache.VectorClock.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LmdbCache.VectorClock;
  return proto.LmdbCache.VectorClock.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LmdbCache.VectorClock} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LmdbCache.VectorClock}
 */
proto.LmdbCache.VectorClock.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getReplicasMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readUint64, null, "");
         });
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTicksoffsetutc(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LmdbCache.VectorClock.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LmdbCache.VectorClock.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LmdbCache.VectorClock} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LmdbCache.VectorClock.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReplicasMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeUint64);
  }
  f = message.getTicksoffsetutc();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * map<string, uint64> replicas = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,number>}
 */
proto.LmdbCache.VectorClock.prototype.getReplicasMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,number>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      null));
};


proto.LmdbCache.VectorClock.prototype.clearReplicasMap = function() {
  this.getReplicasMap().clear();
};


/**
 * optional uint64 ticksOffsetUtc = 2;
 * @return {number}
 */
proto.LmdbCache.VectorClock.prototype.getTicksoffsetutc = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.LmdbCache.VectorClock.prototype.setTicksoffsetutc = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LmdbCache.ValueMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.LmdbCache.ValueMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.LmdbCache.ValueMetadata.displayName = 'proto.LmdbCache.ValueMetadata';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LmdbCache.ValueMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.LmdbCache.ValueMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LmdbCache.ValueMetadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LmdbCache.ValueMetadata.toObject = function(includeInstance, msg) {
  var f, obj = {
    hashedwith: jspb.Message.getFieldWithDefault(msg, 1, 0),
    hash: msg.getHash_asB64(),
    compression: jspb.Message.getFieldWithDefault(msg, 3, 0),
    sizecompressed: jspb.Message.getFieldWithDefault(msg, 4, 0),
    sizefull: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LmdbCache.ValueMetadata}
 */
proto.LmdbCache.ValueMetadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LmdbCache.ValueMetadata;
  return proto.LmdbCache.ValueMetadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LmdbCache.ValueMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LmdbCache.ValueMetadata}
 */
proto.LmdbCache.ValueMetadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.LmdbCache.ValueMetadata.HashedWith} */ (reader.readEnum());
      msg.setHashedwith(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHash(value);
      break;
    case 3:
      var value = /** @type {!proto.LmdbCache.ValueMetadata.Compression} */ (reader.readEnum());
      msg.setCompression(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSizecompressed(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSizefull(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LmdbCache.ValueMetadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LmdbCache.ValueMetadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LmdbCache.ValueMetadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LmdbCache.ValueMetadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHashedwith();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getCompression();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getSizecompressed();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getSizefull();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.LmdbCache.ValueMetadata.HashedWith = {
  MD5: 0
};

/**
 * @enum {number}
 */
proto.LmdbCache.ValueMetadata.Compression = {
  NONE: 0,
  LZ4: 1,
  GZIP: 2
};

/**
 * optional HashedWith hashedWith = 1;
 * @return {!proto.LmdbCache.ValueMetadata.HashedWith}
 */
proto.LmdbCache.ValueMetadata.prototype.getHashedwith = function() {
  return /** @type {!proto.LmdbCache.ValueMetadata.HashedWith} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.LmdbCache.ValueMetadata.HashedWith} value */
proto.LmdbCache.ValueMetadata.prototype.setHashedwith = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional bytes hash = 2;
 * @return {!(string|Uint8Array)}
 */
proto.LmdbCache.ValueMetadata.prototype.getHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes hash = 2;
 * This is a type-conversion wrapper around `getHash()`
 * @return {string}
 */
proto.LmdbCache.ValueMetadata.prototype.getHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getHash()));
};


/**
 * optional bytes hash = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHash()`
 * @return {!Uint8Array}
 */
proto.LmdbCache.ValueMetadata.prototype.getHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getHash()));
};


/** @param {!(string|Uint8Array)} value */
proto.LmdbCache.ValueMetadata.prototype.setHash = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional Compression compression = 3;
 * @return {!proto.LmdbCache.ValueMetadata.Compression}
 */
proto.LmdbCache.ValueMetadata.prototype.getCompression = function() {
  return /** @type {!proto.LmdbCache.ValueMetadata.Compression} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.LmdbCache.ValueMetadata.Compression} value */
proto.LmdbCache.ValueMetadata.prototype.setCompression = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional uint32 sizeCompressed = 4;
 * @return {number}
 */
proto.LmdbCache.ValueMetadata.prototype.getSizecompressed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.LmdbCache.ValueMetadata.prototype.setSizecompressed = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 sizeFull = 5;
 * @return {number}
 */
proto.LmdbCache.ValueMetadata.prototype.getSizefull = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.LmdbCache.ValueMetadata.prototype.setSizefull = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LmdbCache.KvMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.LmdbCache.KvMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.LmdbCache.KvMetadata.displayName = 'proto.LmdbCache.KvMetadata';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LmdbCache.KvMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.LmdbCache.KvMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LmdbCache.KvMetadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LmdbCache.KvMetadata.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, 0),
    expiry: (f = msg.getExpiry()) && proto.LmdbCache.Timestamp.toObject(includeInstance, f),
    updated: (f = msg.getUpdated()) && proto.LmdbCache.VectorClock.toObject(includeInstance, f),
    action: jspb.Message.getFieldWithDefault(msg, 4, 0),
    correlationid: jspb.Message.getFieldWithDefault(msg, 5, ""),
    valuemetadata: (f = msg.getValuemetadata()) && proto.LmdbCache.ValueMetadata.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LmdbCache.KvMetadata}
 */
proto.LmdbCache.KvMetadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LmdbCache.KvMetadata;
  return proto.LmdbCache.KvMetadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LmdbCache.KvMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LmdbCache.KvMetadata}
 */
proto.LmdbCache.KvMetadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.LmdbCache.KvMetadata.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 2:
      var value = new proto.LmdbCache.Timestamp;
      reader.readMessage(value,proto.LmdbCache.Timestamp.deserializeBinaryFromReader);
      msg.setExpiry(value);
      break;
    case 3:
      var value = new proto.LmdbCache.VectorClock;
      reader.readMessage(value,proto.LmdbCache.VectorClock.deserializeBinaryFromReader);
      msg.setUpdated(value);
      break;
    case 4:
      var value = /** @type {!proto.LmdbCache.KvMetadata.UpdateAction} */ (reader.readEnum());
      msg.setAction(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCorrelationid(value);
      break;
    case 6:
      var value = new proto.LmdbCache.ValueMetadata;
      reader.readMessage(value,proto.LmdbCache.ValueMetadata.deserializeBinaryFromReader);
      msg.setValuemetadata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LmdbCache.KvMetadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LmdbCache.KvMetadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LmdbCache.KvMetadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LmdbCache.KvMetadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getExpiry();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.LmdbCache.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getUpdated();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.LmdbCache.VectorClock.serializeBinaryToWriter
    );
  }
  f = message.getAction();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getCorrelationid();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getValuemetadata();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.LmdbCache.ValueMetadata.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.LmdbCache.KvMetadata.Status = {
  ACTIVE: 0,
  DELETED: 1,
  EXPIRED: 2
};

/**
 * @enum {number}
 */
proto.LmdbCache.KvMetadata.UpdateAction = {
  ADDED: 0,
  UPDATED: 1,
  REPLICATED: 2
};

/**
 * optional Status status = 1;
 * @return {!proto.LmdbCache.KvMetadata.Status}
 */
proto.LmdbCache.KvMetadata.prototype.getStatus = function() {
  return /** @type {!proto.LmdbCache.KvMetadata.Status} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.LmdbCache.KvMetadata.Status} value */
proto.LmdbCache.KvMetadata.prototype.setStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional Timestamp expiry = 2;
 * @return {?proto.LmdbCache.Timestamp}
 */
proto.LmdbCache.KvMetadata.prototype.getExpiry = function() {
  return /** @type{?proto.LmdbCache.Timestamp} */ (
    jspb.Message.getWrapperField(this, proto.LmdbCache.Timestamp, 2));
};


/** @param {?proto.LmdbCache.Timestamp|undefined} value */
proto.LmdbCache.KvMetadata.prototype.setExpiry = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.LmdbCache.KvMetadata.prototype.clearExpiry = function() {
  this.setExpiry(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.LmdbCache.KvMetadata.prototype.hasExpiry = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional VectorClock updated = 3;
 * @return {?proto.LmdbCache.VectorClock}
 */
proto.LmdbCache.KvMetadata.prototype.getUpdated = function() {
  return /** @type{?proto.LmdbCache.VectorClock} */ (
    jspb.Message.getWrapperField(this, proto.LmdbCache.VectorClock, 3));
};


/** @param {?proto.LmdbCache.VectorClock|undefined} value */
proto.LmdbCache.KvMetadata.prototype.setUpdated = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.LmdbCache.KvMetadata.prototype.clearUpdated = function() {
  this.setUpdated(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.LmdbCache.KvMetadata.prototype.hasUpdated = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional UpdateAction action = 4;
 * @return {!proto.LmdbCache.KvMetadata.UpdateAction}
 */
proto.LmdbCache.KvMetadata.prototype.getAction = function() {
  return /** @type {!proto.LmdbCache.KvMetadata.UpdateAction} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.LmdbCache.KvMetadata.UpdateAction} value */
proto.LmdbCache.KvMetadata.prototype.setAction = function(value) {
  jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional string correlationId = 5;
 * @return {string}
 */
proto.LmdbCache.KvMetadata.prototype.getCorrelationid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.LmdbCache.KvMetadata.prototype.setCorrelationid = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional ValueMetadata valueMetadata = 6;
 * @return {?proto.LmdbCache.ValueMetadata}
 */
proto.LmdbCache.KvMetadata.prototype.getValuemetadata = function() {
  return /** @type{?proto.LmdbCache.ValueMetadata} */ (
    jspb.Message.getWrapperField(this, proto.LmdbCache.ValueMetadata, 6));
};


/** @param {?proto.LmdbCache.ValueMetadata|undefined} value */
proto.LmdbCache.KvMetadata.prototype.setValuemetadata = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.LmdbCache.KvMetadata.prototype.clearValuemetadata = function() {
  this.setValuemetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.LmdbCache.KvMetadata.prototype.hasValuemetadata = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LmdbCache.AddRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.LmdbCache.AddRequest.repeatedFields_, null);
};
goog.inherits(proto.LmdbCache.AddRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.LmdbCache.AddRequest.displayName = 'proto.LmdbCache.AddRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.LmdbCache.AddRequest.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LmdbCache.AddRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.LmdbCache.AddRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LmdbCache.AddRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LmdbCache.AddRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && proto.LmdbCache.AddRequest.Header.toObject(includeInstance, f),
    entriesList: jspb.Message.toObjectList(msg.getEntriesList(),
    proto.LmdbCache.AddRequest.AddRequestEntry.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LmdbCache.AddRequest}
 */
proto.LmdbCache.AddRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LmdbCache.AddRequest;
  return proto.LmdbCache.AddRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LmdbCache.AddRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LmdbCache.AddRequest}
 */
proto.LmdbCache.AddRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.LmdbCache.AddRequest.Header;
      reader.readMessage(value,proto.LmdbCache.AddRequest.Header.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 5:
      var value = new proto.LmdbCache.AddRequest.AddRequestEntry;
      reader.readMessage(value,proto.LmdbCache.AddRequest.AddRequestEntry.deserializeBinaryFromReader);
      msg.addEntries(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LmdbCache.AddRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LmdbCache.AddRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LmdbCache.AddRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LmdbCache.AddRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.LmdbCache.AddRequest.Header.serializeBinaryToWriter
    );
  }
  f = message.getEntriesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.LmdbCache.AddRequest.AddRequestEntry.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LmdbCache.AddRequest.Header = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.LmdbCache.AddRequest.Header, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.LmdbCache.AddRequest.Header.displayName = 'proto.LmdbCache.AddRequest.Header';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LmdbCache.AddRequest.Header.prototype.toObject = function(opt_includeInstance) {
  return proto.LmdbCache.AddRequest.Header.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LmdbCache.AddRequest.Header} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LmdbCache.AddRequest.Header.toObject = function(includeInstance, msg) {
  var f, obj = {
    overrideexisting: jspb.Message.getFieldWithDefault(msg, 1, false),
    correlationid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    chunkscount: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LmdbCache.AddRequest.Header}
 */
proto.LmdbCache.AddRequest.Header.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LmdbCache.AddRequest.Header;
  return proto.LmdbCache.AddRequest.Header.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LmdbCache.AddRequest.Header} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LmdbCache.AddRequest.Header}
 */
proto.LmdbCache.AddRequest.Header.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOverrideexisting(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCorrelationid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setChunkscount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LmdbCache.AddRequest.Header.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LmdbCache.AddRequest.Header.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LmdbCache.AddRequest.Header} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LmdbCache.AddRequest.Header.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOverrideexisting();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getCorrelationid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getChunkscount();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional bool overrideExisting = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.LmdbCache.AddRequest.Header.prototype.getOverrideexisting = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.LmdbCache.AddRequest.Header.prototype.setOverrideexisting = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string correlationId = 2;
 * @return {string}
 */
proto.LmdbCache.AddRequest.Header.prototype.getCorrelationid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.LmdbCache.AddRequest.Header.prototype.setCorrelationid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint32 chunksCount = 3;
 * @return {number}
 */
proto.LmdbCache.AddRequest.Header.prototype.getChunkscount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.LmdbCache.AddRequest.Header.prototype.setChunkscount = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LmdbCache.AddRequest.AddRequestEntry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.LmdbCache.AddRequest.AddRequestEntry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.LmdbCache.AddRequest.AddRequestEntry.displayName = 'proto.LmdbCache.AddRequest.AddRequestEntry';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LmdbCache.AddRequest.AddRequestEntry.prototype.toObject = function(opt_includeInstance) {
  return proto.LmdbCache.AddRequest.AddRequestEntry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LmdbCache.AddRequest.AddRequestEntry} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LmdbCache.AddRequest.AddRequestEntry.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, ""),
    expiry: (f = msg.getExpiry()) && proto.LmdbCache.Timestamp.toObject(includeInstance, f),
    valuemetadata: (f = msg.getValuemetadata()) && proto.LmdbCache.ValueMetadata.toObject(includeInstance, f),
    value: msg.getValue_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LmdbCache.AddRequest.AddRequestEntry}
 */
proto.LmdbCache.AddRequest.AddRequestEntry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LmdbCache.AddRequest.AddRequestEntry;
  return proto.LmdbCache.AddRequest.AddRequestEntry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LmdbCache.AddRequest.AddRequestEntry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LmdbCache.AddRequest.AddRequestEntry}
 */
proto.LmdbCache.AddRequest.AddRequestEntry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = new proto.LmdbCache.Timestamp;
      reader.readMessage(value,proto.LmdbCache.Timestamp.deserializeBinaryFromReader);
      msg.setExpiry(value);
      break;
    case 3:
      var value = new proto.LmdbCache.ValueMetadata;
      reader.readMessage(value,proto.LmdbCache.ValueMetadata.deserializeBinaryFromReader);
      msg.setValuemetadata(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LmdbCache.AddRequest.AddRequestEntry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LmdbCache.AddRequest.AddRequestEntry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LmdbCache.AddRequest.AddRequestEntry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LmdbCache.AddRequest.AddRequestEntry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getExpiry();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.LmdbCache.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getValuemetadata();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.LmdbCache.ValueMetadata.serializeBinaryToWriter
    );
  }
  f = message.getValue_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.LmdbCache.AddRequest.AddRequestEntry.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.LmdbCache.AddRequest.AddRequestEntry.prototype.setKey = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Timestamp expiry = 2;
 * @return {?proto.LmdbCache.Timestamp}
 */
proto.LmdbCache.AddRequest.AddRequestEntry.prototype.getExpiry = function() {
  return /** @type{?proto.LmdbCache.Timestamp} */ (
    jspb.Message.getWrapperField(this, proto.LmdbCache.Timestamp, 2));
};


/** @param {?proto.LmdbCache.Timestamp|undefined} value */
proto.LmdbCache.AddRequest.AddRequestEntry.prototype.setExpiry = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.LmdbCache.AddRequest.AddRequestEntry.prototype.clearExpiry = function() {
  this.setExpiry(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.LmdbCache.AddRequest.AddRequestEntry.prototype.hasExpiry = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ValueMetadata valueMetadata = 3;
 * @return {?proto.LmdbCache.ValueMetadata}
 */
proto.LmdbCache.AddRequest.AddRequestEntry.prototype.getValuemetadata = function() {
  return /** @type{?proto.LmdbCache.ValueMetadata} */ (
    jspb.Message.getWrapperField(this, proto.LmdbCache.ValueMetadata, 3));
};


/** @param {?proto.LmdbCache.ValueMetadata|undefined} value */
proto.LmdbCache.AddRequest.AddRequestEntry.prototype.setValuemetadata = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.LmdbCache.AddRequest.AddRequestEntry.prototype.clearValuemetadata = function() {
  this.setValuemetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.LmdbCache.AddRequest.AddRequestEntry.prototype.hasValuemetadata = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bytes value = 4;
 * @return {!(string|Uint8Array)}
 */
proto.LmdbCache.AddRequest.AddRequestEntry.prototype.getValue = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes value = 4;
 * This is a type-conversion wrapper around `getValue()`
 * @return {string}
 */
proto.LmdbCache.AddRequest.AddRequestEntry.prototype.getValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValue()));
};


/**
 * optional bytes value = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValue()`
 * @return {!Uint8Array}
 */
proto.LmdbCache.AddRequest.AddRequestEntry.prototype.getValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValue()));
};


/** @param {!(string|Uint8Array)} value */
proto.LmdbCache.AddRequest.AddRequestEntry.prototype.setValue = function(value) {
  jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional Header header = 1;
 * @return {?proto.LmdbCache.AddRequest.Header}
 */
proto.LmdbCache.AddRequest.prototype.getHeader = function() {
  return /** @type{?proto.LmdbCache.AddRequest.Header} */ (
    jspb.Message.getWrapperField(this, proto.LmdbCache.AddRequest.Header, 1));
};


/** @param {?proto.LmdbCache.AddRequest.Header|undefined} value */
proto.LmdbCache.AddRequest.prototype.setHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.LmdbCache.AddRequest.prototype.clearHeader = function() {
  this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.LmdbCache.AddRequest.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated AddRequestEntry entries = 5;
 * @return {!Array<!proto.LmdbCache.AddRequest.AddRequestEntry>}
 */
proto.LmdbCache.AddRequest.prototype.getEntriesList = function() {
  return /** @type{!Array<!proto.LmdbCache.AddRequest.AddRequestEntry>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.LmdbCache.AddRequest.AddRequestEntry, 5));
};


/** @param {!Array<!proto.LmdbCache.AddRequest.AddRequestEntry>} value */
proto.LmdbCache.AddRequest.prototype.setEntriesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.LmdbCache.AddRequest.AddRequestEntry=} opt_value
 * @param {number=} opt_index
 * @return {!proto.LmdbCache.AddRequest.AddRequestEntry}
 */
proto.LmdbCache.AddRequest.prototype.addEntries = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.LmdbCache.AddRequest.AddRequestEntry, opt_index);
};


proto.LmdbCache.AddRequest.prototype.clearEntriesList = function() {
  this.setEntriesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LmdbCache.AddResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.LmdbCache.AddResponse.repeatedFields_, null);
};
goog.inherits(proto.LmdbCache.AddResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.LmdbCache.AddResponse.displayName = 'proto.LmdbCache.AddResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.LmdbCache.AddResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LmdbCache.AddResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.LmdbCache.AddResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LmdbCache.AddResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LmdbCache.AddResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    resultsList: jspb.Message.getRepeatedField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LmdbCache.AddResponse}
 */
proto.LmdbCache.AddResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LmdbCache.AddResponse;
  return proto.LmdbCache.AddResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LmdbCache.AddResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LmdbCache.AddResponse}
 */
proto.LmdbCache.AddResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<!proto.LmdbCache.AddResponse.AddResult>} */ (reader.readPackedEnum());
      msg.setResultsList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LmdbCache.AddResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LmdbCache.AddResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LmdbCache.AddResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LmdbCache.AddResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResultsList();
  if (f.length > 0) {
    writer.writePackedEnum(
      1,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.LmdbCache.AddResponse.AddResult = {
  KEY_ADDED: 0,
  KEY_UPDATED: 1,
  KEY_ALREADY_EXISTS: 2,
  FAILURE: 3
};

/**
 * repeated AddResult results = 1;
 * @return {!Array<!proto.LmdbCache.AddResponse.AddResult>}
 */
proto.LmdbCache.AddResponse.prototype.getResultsList = function() {
  return /** @type {!Array<!proto.LmdbCache.AddResponse.AddResult>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<!proto.LmdbCache.AddResponse.AddResult>} value */
proto.LmdbCache.AddResponse.prototype.setResultsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!proto.LmdbCache.AddResponse.AddResult} value
 * @param {number=} opt_index
 */
proto.LmdbCache.AddResponse.prototype.addResults = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.LmdbCache.AddResponse.prototype.clearResultsList = function() {
  this.setResultsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LmdbCache.AddStreamRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.LmdbCache.AddStreamRequest.oneofGroups_);
};
goog.inherits(proto.LmdbCache.AddStreamRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.LmdbCache.AddStreamRequest.displayName = 'proto.LmdbCache.AddStreamRequest';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.LmdbCache.AddStreamRequest.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.LmdbCache.AddStreamRequest.MsgCase = {
  MSG_NOT_SET: 0,
  HEADER: 1,
  CHUNK: 2
};

/**
 * @return {proto.LmdbCache.AddStreamRequest.MsgCase}
 */
proto.LmdbCache.AddStreamRequest.prototype.getMsgCase = function() {
  return /** @type {proto.LmdbCache.AddStreamRequest.MsgCase} */(jspb.Message.computeOneofCase(this, proto.LmdbCache.AddStreamRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LmdbCache.AddStreamRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.LmdbCache.AddStreamRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LmdbCache.AddStreamRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LmdbCache.AddStreamRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && proto.LmdbCache.AddRequest.Header.toObject(includeInstance, f),
    chunk: (f = msg.getChunk()) && proto.LmdbCache.AddStreamRequest.DataChunk.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LmdbCache.AddStreamRequest}
 */
proto.LmdbCache.AddStreamRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LmdbCache.AddStreamRequest;
  return proto.LmdbCache.AddStreamRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LmdbCache.AddStreamRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LmdbCache.AddStreamRequest}
 */
proto.LmdbCache.AddStreamRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.LmdbCache.AddRequest.Header;
      reader.readMessage(value,proto.LmdbCache.AddRequest.Header.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = new proto.LmdbCache.AddStreamRequest.DataChunk;
      reader.readMessage(value,proto.LmdbCache.AddStreamRequest.DataChunk.deserializeBinaryFromReader);
      msg.setChunk(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LmdbCache.AddStreamRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LmdbCache.AddStreamRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LmdbCache.AddStreamRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LmdbCache.AddStreamRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.LmdbCache.AddRequest.Header.serializeBinaryToWriter
    );
  }
  f = message.getChunk();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.LmdbCache.AddStreamRequest.DataChunk.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LmdbCache.AddStreamRequest.DataChunk = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.LmdbCache.AddStreamRequest.DataChunk, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.LmdbCache.AddStreamRequest.DataChunk.displayName = 'proto.LmdbCache.AddStreamRequest.DataChunk';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LmdbCache.AddStreamRequest.DataChunk.prototype.toObject = function(opt_includeInstance) {
  return proto.LmdbCache.AddStreamRequest.DataChunk.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LmdbCache.AddStreamRequest.DataChunk} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LmdbCache.AddStreamRequest.DataChunk.toObject = function(includeInstance, msg) {
  var f, obj = {
    index: jspb.Message.getFieldWithDefault(msg, 1, 0),
    entry: (f = msg.getEntry()) && proto.LmdbCache.AddRequest.AddRequestEntry.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LmdbCache.AddStreamRequest.DataChunk}
 */
proto.LmdbCache.AddStreamRequest.DataChunk.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LmdbCache.AddStreamRequest.DataChunk;
  return proto.LmdbCache.AddStreamRequest.DataChunk.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LmdbCache.AddStreamRequest.DataChunk} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LmdbCache.AddStreamRequest.DataChunk}
 */
proto.LmdbCache.AddStreamRequest.DataChunk.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIndex(value);
      break;
    case 2:
      var value = new proto.LmdbCache.AddRequest.AddRequestEntry;
      reader.readMessage(value,proto.LmdbCache.AddRequest.AddRequestEntry.deserializeBinaryFromReader);
      msg.setEntry(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LmdbCache.AddStreamRequest.DataChunk.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LmdbCache.AddStreamRequest.DataChunk.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LmdbCache.AddStreamRequest.DataChunk} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LmdbCache.AddStreamRequest.DataChunk.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIndex();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getEntry();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.LmdbCache.AddRequest.AddRequestEntry.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 index = 1;
 * @return {number}
 */
proto.LmdbCache.AddStreamRequest.DataChunk.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.LmdbCache.AddStreamRequest.DataChunk.prototype.setIndex = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional AddRequest.AddRequestEntry entry = 2;
 * @return {?proto.LmdbCache.AddRequest.AddRequestEntry}
 */
proto.LmdbCache.AddStreamRequest.DataChunk.prototype.getEntry = function() {
  return /** @type{?proto.LmdbCache.AddRequest.AddRequestEntry} */ (
    jspb.Message.getWrapperField(this, proto.LmdbCache.AddRequest.AddRequestEntry, 2));
};


/** @param {?proto.LmdbCache.AddRequest.AddRequestEntry|undefined} value */
proto.LmdbCache.AddStreamRequest.DataChunk.prototype.setEntry = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.LmdbCache.AddStreamRequest.DataChunk.prototype.clearEntry = function() {
  this.setEntry(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.LmdbCache.AddStreamRequest.DataChunk.prototype.hasEntry = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional AddRequest.Header header = 1;
 * @return {?proto.LmdbCache.AddRequest.Header}
 */
proto.LmdbCache.AddStreamRequest.prototype.getHeader = function() {
  return /** @type{?proto.LmdbCache.AddRequest.Header} */ (
    jspb.Message.getWrapperField(this, proto.LmdbCache.AddRequest.Header, 1));
};


/** @param {?proto.LmdbCache.AddRequest.Header|undefined} value */
proto.LmdbCache.AddStreamRequest.prototype.setHeader = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.LmdbCache.AddStreamRequest.oneofGroups_[0], value);
};


proto.LmdbCache.AddStreamRequest.prototype.clearHeader = function() {
  this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.LmdbCache.AddStreamRequest.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional DataChunk chunk = 2;
 * @return {?proto.LmdbCache.AddStreamRequest.DataChunk}
 */
proto.LmdbCache.AddStreamRequest.prototype.getChunk = function() {
  return /** @type{?proto.LmdbCache.AddStreamRequest.DataChunk} */ (
    jspb.Message.getWrapperField(this, proto.LmdbCache.AddStreamRequest.DataChunk, 2));
};


/** @param {?proto.LmdbCache.AddStreamRequest.DataChunk|undefined} value */
proto.LmdbCache.AddStreamRequest.prototype.setChunk = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.LmdbCache.AddStreamRequest.oneofGroups_[0], value);
};


proto.LmdbCache.AddStreamRequest.prototype.clearChunk = function() {
  this.setChunk(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.LmdbCache.AddStreamRequest.prototype.hasChunk = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LmdbCache.DeleteRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.LmdbCache.DeleteRequest.repeatedFields_, null);
};
goog.inherits(proto.LmdbCache.DeleteRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.LmdbCache.DeleteRequest.displayName = 'proto.LmdbCache.DeleteRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.LmdbCache.DeleteRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LmdbCache.DeleteRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.LmdbCache.DeleteRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LmdbCache.DeleteRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LmdbCache.DeleteRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    correlationid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    keysList: jspb.Message.getRepeatedField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LmdbCache.DeleteRequest}
 */
proto.LmdbCache.DeleteRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LmdbCache.DeleteRequest;
  return proto.LmdbCache.DeleteRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LmdbCache.DeleteRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LmdbCache.DeleteRequest}
 */
proto.LmdbCache.DeleteRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCorrelationid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addKeys(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LmdbCache.DeleteRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LmdbCache.DeleteRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LmdbCache.DeleteRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LmdbCache.DeleteRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCorrelationid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getKeysList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * optional string correlationId = 1;
 * @return {string}
 */
proto.LmdbCache.DeleteRequest.prototype.getCorrelationid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.LmdbCache.DeleteRequest.prototype.setCorrelationid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string keys = 2;
 * @return {!Array<string>}
 */
proto.LmdbCache.DeleteRequest.prototype.getKeysList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array<string>} value */
proto.LmdbCache.DeleteRequest.prototype.setKeysList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.LmdbCache.DeleteRequest.prototype.addKeys = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.LmdbCache.DeleteRequest.prototype.clearKeysList = function() {
  this.setKeysList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LmdbCache.DeleteResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.LmdbCache.DeleteResponse.repeatedFields_, null);
};
goog.inherits(proto.LmdbCache.DeleteResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.LmdbCache.DeleteResponse.displayName = 'proto.LmdbCache.DeleteResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.LmdbCache.DeleteResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LmdbCache.DeleteResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.LmdbCache.DeleteResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LmdbCache.DeleteResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LmdbCache.DeleteResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    resultsList: jspb.Message.getRepeatedField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LmdbCache.DeleteResponse}
 */
proto.LmdbCache.DeleteResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LmdbCache.DeleteResponse;
  return proto.LmdbCache.DeleteResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LmdbCache.DeleteResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LmdbCache.DeleteResponse}
 */
proto.LmdbCache.DeleteResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<!proto.LmdbCache.DeleteResponse.DeleteResult>} */ (reader.readPackedEnum());
      msg.setResultsList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LmdbCache.DeleteResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LmdbCache.DeleteResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LmdbCache.DeleteResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LmdbCache.DeleteResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResultsList();
  if (f.length > 0) {
    writer.writePackedEnum(
      1,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.LmdbCache.DeleteResponse.DeleteResult = {
  SUCCESS: 0,
  NOT_FOUND: 1,
  FAILURE: 2
};

/**
 * repeated DeleteResult results = 1;
 * @return {!Array<!proto.LmdbCache.DeleteResponse.DeleteResult>}
 */
proto.LmdbCache.DeleteResponse.prototype.getResultsList = function() {
  return /** @type {!Array<!proto.LmdbCache.DeleteResponse.DeleteResult>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<!proto.LmdbCache.DeleteResponse.DeleteResult>} value */
proto.LmdbCache.DeleteResponse.prototype.setResultsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!proto.LmdbCache.DeleteResponse.DeleteResult} value
 * @param {number=} opt_index
 */
proto.LmdbCache.DeleteResponse.prototype.addResults = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.LmdbCache.DeleteResponse.prototype.clearResultsList = function() {
  this.setResultsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LmdbCache.GetRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.LmdbCache.GetRequest.repeatedFields_, null);
};
goog.inherits(proto.LmdbCache.GetRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.LmdbCache.GetRequest.displayName = 'proto.LmdbCache.GetRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.LmdbCache.GetRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LmdbCache.GetRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.LmdbCache.GetRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LmdbCache.GetRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LmdbCache.GetRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    correlationid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    keysList: jspb.Message.getRepeatedField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LmdbCache.GetRequest}
 */
proto.LmdbCache.GetRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LmdbCache.GetRequest;
  return proto.LmdbCache.GetRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LmdbCache.GetRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LmdbCache.GetRequest}
 */
proto.LmdbCache.GetRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCorrelationid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addKeys(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LmdbCache.GetRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LmdbCache.GetRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LmdbCache.GetRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LmdbCache.GetRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCorrelationid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getKeysList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * optional string correlationId = 1;
 * @return {string}
 */
proto.LmdbCache.GetRequest.prototype.getCorrelationid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.LmdbCache.GetRequest.prototype.setCorrelationid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string keys = 2;
 * @return {!Array<string>}
 */
proto.LmdbCache.GetRequest.prototype.getKeysList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array<string>} value */
proto.LmdbCache.GetRequest.prototype.setKeysList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.LmdbCache.GetRequest.prototype.addKeys = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.LmdbCache.GetRequest.prototype.clearKeysList = function() {
  this.setKeysList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LmdbCache.GetResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.LmdbCache.GetResponse.repeatedFields_, null);
};
goog.inherits(proto.LmdbCache.GetResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.LmdbCache.GetResponse.displayName = 'proto.LmdbCache.GetResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.LmdbCache.GetResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LmdbCache.GetResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.LmdbCache.GetResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LmdbCache.GetResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LmdbCache.GetResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    resultsList: jspb.Message.toObjectList(msg.getResultsList(),
    proto.LmdbCache.GetResponse.GetResponseEntry.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LmdbCache.GetResponse}
 */
proto.LmdbCache.GetResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LmdbCache.GetResponse;
  return proto.LmdbCache.GetResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LmdbCache.GetResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LmdbCache.GetResponse}
 */
proto.LmdbCache.GetResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.LmdbCache.GetResponse.GetResponseEntry;
      reader.readMessage(value,proto.LmdbCache.GetResponse.GetResponseEntry.deserializeBinaryFromReader);
      msg.addResults(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LmdbCache.GetResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LmdbCache.GetResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LmdbCache.GetResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LmdbCache.GetResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResultsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.LmdbCache.GetResponse.GetResponseEntry.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LmdbCache.GetResponse.GetResponseEntry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.LmdbCache.GetResponse.GetResponseEntry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.LmdbCache.GetResponse.GetResponseEntry.displayName = 'proto.LmdbCache.GetResponse.GetResponseEntry';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LmdbCache.GetResponse.GetResponseEntry.prototype.toObject = function(opt_includeInstance) {
  return proto.LmdbCache.GetResponse.GetResponseEntry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LmdbCache.GetResponse.GetResponseEntry} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LmdbCache.GetResponse.GetResponseEntry.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: jspb.Message.getFieldWithDefault(msg, 1, 0),
    index: jspb.Message.getFieldWithDefault(msg, 2, 0),
    valuemetadata: (f = msg.getValuemetadata()) && proto.LmdbCache.ValueMetadata.toObject(includeInstance, f),
    value: msg.getValue_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LmdbCache.GetResponse.GetResponseEntry}
 */
proto.LmdbCache.GetResponse.GetResponseEntry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LmdbCache.GetResponse.GetResponseEntry;
  return proto.LmdbCache.GetResponse.GetResponseEntry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LmdbCache.GetResponse.GetResponseEntry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LmdbCache.GetResponse.GetResponseEntry}
 */
proto.LmdbCache.GetResponse.GetResponseEntry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.LmdbCache.GetResponse.GetResponseEntry.GetResult} */ (reader.readEnum());
      msg.setResult(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIndex(value);
      break;
    case 3:
      var value = new proto.LmdbCache.ValueMetadata;
      reader.readMessage(value,proto.LmdbCache.ValueMetadata.deserializeBinaryFromReader);
      msg.setValuemetadata(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LmdbCache.GetResponse.GetResponseEntry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LmdbCache.GetResponse.GetResponseEntry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LmdbCache.GetResponse.GetResponseEntry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LmdbCache.GetResponse.GetResponseEntry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResult();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getIndex();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getValuemetadata();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.LmdbCache.ValueMetadata.serializeBinaryToWriter
    );
  }
  f = message.getValue_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.LmdbCache.GetResponse.GetResponseEntry.GetResult = {
  SUCCESS: 0,
  NOT_FOUND: 1,
  FAILURE: 2
};

/**
 * optional GetResult result = 1;
 * @return {!proto.LmdbCache.GetResponse.GetResponseEntry.GetResult}
 */
proto.LmdbCache.GetResponse.GetResponseEntry.prototype.getResult = function() {
  return /** @type {!proto.LmdbCache.GetResponse.GetResponseEntry.GetResult} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.LmdbCache.GetResponse.GetResponseEntry.GetResult} value */
proto.LmdbCache.GetResponse.GetResponseEntry.prototype.setResult = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional uint32 index = 2;
 * @return {number}
 */
proto.LmdbCache.GetResponse.GetResponseEntry.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.LmdbCache.GetResponse.GetResponseEntry.prototype.setIndex = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional ValueMetadata valueMetadata = 3;
 * @return {?proto.LmdbCache.ValueMetadata}
 */
proto.LmdbCache.GetResponse.GetResponseEntry.prototype.getValuemetadata = function() {
  return /** @type{?proto.LmdbCache.ValueMetadata} */ (
    jspb.Message.getWrapperField(this, proto.LmdbCache.ValueMetadata, 3));
};


/** @param {?proto.LmdbCache.ValueMetadata|undefined} value */
proto.LmdbCache.GetResponse.GetResponseEntry.prototype.setValuemetadata = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.LmdbCache.GetResponse.GetResponseEntry.prototype.clearValuemetadata = function() {
  this.setValuemetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.LmdbCache.GetResponse.GetResponseEntry.prototype.hasValuemetadata = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bytes value = 5;
 * @return {!(string|Uint8Array)}
 */
proto.LmdbCache.GetResponse.GetResponseEntry.prototype.getValue = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes value = 5;
 * This is a type-conversion wrapper around `getValue()`
 * @return {string}
 */
proto.LmdbCache.GetResponse.GetResponseEntry.prototype.getValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValue()));
};


/**
 * optional bytes value = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValue()`
 * @return {!Uint8Array}
 */
proto.LmdbCache.GetResponse.GetResponseEntry.prototype.getValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValue()));
};


/** @param {!(string|Uint8Array)} value */
proto.LmdbCache.GetResponse.GetResponseEntry.prototype.setValue = function(value) {
  jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * repeated GetResponseEntry results = 1;
 * @return {!Array<!proto.LmdbCache.GetResponse.GetResponseEntry>}
 */
proto.LmdbCache.GetResponse.prototype.getResultsList = function() {
  return /** @type{!Array<!proto.LmdbCache.GetResponse.GetResponseEntry>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.LmdbCache.GetResponse.GetResponseEntry, 1));
};


/** @param {!Array<!proto.LmdbCache.GetResponse.GetResponseEntry>} value */
proto.LmdbCache.GetResponse.prototype.setResultsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.LmdbCache.GetResponse.GetResponseEntry=} opt_value
 * @param {number=} opt_index
 * @return {!proto.LmdbCache.GetResponse.GetResponseEntry}
 */
proto.LmdbCache.GetResponse.prototype.addResults = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.LmdbCache.GetResponse.GetResponseEntry, opt_index);
};


proto.LmdbCache.GetResponse.prototype.clearResultsList = function() {
  this.setResultsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LmdbCache.GetStreamResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.LmdbCache.GetStreamResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.LmdbCache.GetStreamResponse.displayName = 'proto.LmdbCache.GetStreamResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LmdbCache.GetStreamResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.LmdbCache.GetStreamResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LmdbCache.GetStreamResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LmdbCache.GetStreamResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: (f = msg.getResult()) && proto.LmdbCache.GetResponse.GetResponseEntry.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LmdbCache.GetStreamResponse}
 */
proto.LmdbCache.GetStreamResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LmdbCache.GetStreamResponse;
  return proto.LmdbCache.GetStreamResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LmdbCache.GetStreamResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LmdbCache.GetStreamResponse}
 */
proto.LmdbCache.GetStreamResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.LmdbCache.GetResponse.GetResponseEntry;
      reader.readMessage(value,proto.LmdbCache.GetResponse.GetResponseEntry.deserializeBinaryFromReader);
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LmdbCache.GetStreamResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LmdbCache.GetStreamResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LmdbCache.GetStreamResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LmdbCache.GetStreamResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResult();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.LmdbCache.GetResponse.GetResponseEntry.serializeBinaryToWriter
    );
  }
};


/**
 * optional GetResponse.GetResponseEntry result = 1;
 * @return {?proto.LmdbCache.GetResponse.GetResponseEntry}
 */
proto.LmdbCache.GetStreamResponse.prototype.getResult = function() {
  return /** @type{?proto.LmdbCache.GetResponse.GetResponseEntry} */ (
    jspb.Message.getWrapperField(this, proto.LmdbCache.GetResponse.GetResponseEntry, 1));
};


/** @param {?proto.LmdbCache.GetResponse.GetResponseEntry|undefined} value */
proto.LmdbCache.GetStreamResponse.prototype.setResult = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.LmdbCache.GetStreamResponse.prototype.clearResult = function() {
  this.setResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.LmdbCache.GetStreamResponse.prototype.hasResult = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LmdbCache.ContainsKeysResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.LmdbCache.ContainsKeysResponse.repeatedFields_, null);
};
goog.inherits(proto.LmdbCache.ContainsKeysResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.LmdbCache.ContainsKeysResponse.displayName = 'proto.LmdbCache.ContainsKeysResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.LmdbCache.ContainsKeysResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LmdbCache.ContainsKeysResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.LmdbCache.ContainsKeysResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LmdbCache.ContainsKeysResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LmdbCache.ContainsKeysResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    resultsList: jspb.Message.getRepeatedField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LmdbCache.ContainsKeysResponse}
 */
proto.LmdbCache.ContainsKeysResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LmdbCache.ContainsKeysResponse;
  return proto.LmdbCache.ContainsKeysResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LmdbCache.ContainsKeysResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LmdbCache.ContainsKeysResponse}
 */
proto.LmdbCache.ContainsKeysResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<boolean>} */ (reader.readPackedBool());
      msg.setResultsList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LmdbCache.ContainsKeysResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LmdbCache.ContainsKeysResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LmdbCache.ContainsKeysResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LmdbCache.ContainsKeysResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResultsList();
  if (f.length > 0) {
    writer.writePackedBool(
      1,
      f
    );
  }
};


/**
 * repeated bool results = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {!Array<boolean>}
 */
proto.LmdbCache.ContainsKeysResponse.prototype.getResultsList = function() {
  return /** @type {!Array<boolean>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<boolean>} value */
proto.LmdbCache.ContainsKeysResponse.prototype.setResultsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!boolean} value
 * @param {number=} opt_index
 */
proto.LmdbCache.ContainsKeysResponse.prototype.addResults = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.LmdbCache.ContainsKeysResponse.prototype.clearResultsList = function() {
  this.setResultsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LmdbCache.CopyRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.LmdbCache.CopyRequest.repeatedFields_, null);
};
goog.inherits(proto.LmdbCache.CopyRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.LmdbCache.CopyRequest.displayName = 'proto.LmdbCache.CopyRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.LmdbCache.CopyRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LmdbCache.CopyRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.LmdbCache.CopyRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LmdbCache.CopyRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LmdbCache.CopyRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    correlationid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    entriesList: jspb.Message.toObjectList(msg.getEntriesList(),
    proto.LmdbCache.CopyRequest.CopyRequestEntry.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LmdbCache.CopyRequest}
 */
proto.LmdbCache.CopyRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LmdbCache.CopyRequest;
  return proto.LmdbCache.CopyRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LmdbCache.CopyRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LmdbCache.CopyRequest}
 */
proto.LmdbCache.CopyRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCorrelationid(value);
      break;
    case 2:
      var value = new proto.LmdbCache.CopyRequest.CopyRequestEntry;
      reader.readMessage(value,proto.LmdbCache.CopyRequest.CopyRequestEntry.deserializeBinaryFromReader);
      msg.addEntries(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LmdbCache.CopyRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LmdbCache.CopyRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LmdbCache.CopyRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LmdbCache.CopyRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCorrelationid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEntriesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.LmdbCache.CopyRequest.CopyRequestEntry.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LmdbCache.CopyRequest.CopyRequestEntry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.LmdbCache.CopyRequest.CopyRequestEntry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.LmdbCache.CopyRequest.CopyRequestEntry.displayName = 'proto.LmdbCache.CopyRequest.CopyRequestEntry';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LmdbCache.CopyRequest.CopyRequestEntry.prototype.toObject = function(opt_includeInstance) {
  return proto.LmdbCache.CopyRequest.CopyRequestEntry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LmdbCache.CopyRequest.CopyRequestEntry} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LmdbCache.CopyRequest.CopyRequestEntry.toObject = function(includeInstance, msg) {
  var f, obj = {
    keyfrom: jspb.Message.getFieldWithDefault(msg, 1, ""),
    expiry: (f = msg.getExpiry()) && proto.LmdbCache.Timestamp.toObject(includeInstance, f),
    keyto: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LmdbCache.CopyRequest.CopyRequestEntry}
 */
proto.LmdbCache.CopyRequest.CopyRequestEntry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LmdbCache.CopyRequest.CopyRequestEntry;
  return proto.LmdbCache.CopyRequest.CopyRequestEntry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LmdbCache.CopyRequest.CopyRequestEntry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LmdbCache.CopyRequest.CopyRequestEntry}
 */
proto.LmdbCache.CopyRequest.CopyRequestEntry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKeyfrom(value);
      break;
    case 2:
      var value = new proto.LmdbCache.Timestamp;
      reader.readMessage(value,proto.LmdbCache.Timestamp.deserializeBinaryFromReader);
      msg.setExpiry(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setKeyto(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LmdbCache.CopyRequest.CopyRequestEntry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LmdbCache.CopyRequest.CopyRequestEntry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LmdbCache.CopyRequest.CopyRequestEntry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LmdbCache.CopyRequest.CopyRequestEntry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKeyfrom();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getExpiry();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.LmdbCache.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getKeyto();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string keyFrom = 1;
 * @return {string}
 */
proto.LmdbCache.CopyRequest.CopyRequestEntry.prototype.getKeyfrom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.LmdbCache.CopyRequest.CopyRequestEntry.prototype.setKeyfrom = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Timestamp expiry = 2;
 * @return {?proto.LmdbCache.Timestamp}
 */
proto.LmdbCache.CopyRequest.CopyRequestEntry.prototype.getExpiry = function() {
  return /** @type{?proto.LmdbCache.Timestamp} */ (
    jspb.Message.getWrapperField(this, proto.LmdbCache.Timestamp, 2));
};


/** @param {?proto.LmdbCache.Timestamp|undefined} value */
proto.LmdbCache.CopyRequest.CopyRequestEntry.prototype.setExpiry = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.LmdbCache.CopyRequest.CopyRequestEntry.prototype.clearExpiry = function() {
  this.setExpiry(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.LmdbCache.CopyRequest.CopyRequestEntry.prototype.hasExpiry = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string keyTo = 3;
 * @return {string}
 */
proto.LmdbCache.CopyRequest.CopyRequestEntry.prototype.getKeyto = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.LmdbCache.CopyRequest.CopyRequestEntry.prototype.setKeyto = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string correlationId = 1;
 * @return {string}
 */
proto.LmdbCache.CopyRequest.prototype.getCorrelationid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.LmdbCache.CopyRequest.prototype.setCorrelationid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated CopyRequestEntry entries = 2;
 * @return {!Array<!proto.LmdbCache.CopyRequest.CopyRequestEntry>}
 */
proto.LmdbCache.CopyRequest.prototype.getEntriesList = function() {
  return /** @type{!Array<!proto.LmdbCache.CopyRequest.CopyRequestEntry>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.LmdbCache.CopyRequest.CopyRequestEntry, 2));
};


/** @param {!Array<!proto.LmdbCache.CopyRequest.CopyRequestEntry>} value */
proto.LmdbCache.CopyRequest.prototype.setEntriesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.LmdbCache.CopyRequest.CopyRequestEntry=} opt_value
 * @param {number=} opt_index
 * @return {!proto.LmdbCache.CopyRequest.CopyRequestEntry}
 */
proto.LmdbCache.CopyRequest.prototype.addEntries = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.LmdbCache.CopyRequest.CopyRequestEntry, opt_index);
};


proto.LmdbCache.CopyRequest.prototype.clearEntriesList = function() {
  this.setEntriesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LmdbCache.CopyResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.LmdbCache.CopyResponse.repeatedFields_, null);
};
goog.inherits(proto.LmdbCache.CopyResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.LmdbCache.CopyResponse.displayName = 'proto.LmdbCache.CopyResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.LmdbCache.CopyResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LmdbCache.CopyResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.LmdbCache.CopyResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LmdbCache.CopyResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LmdbCache.CopyResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    resultsList: jspb.Message.getRepeatedField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LmdbCache.CopyResponse}
 */
proto.LmdbCache.CopyResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LmdbCache.CopyResponse;
  return proto.LmdbCache.CopyResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LmdbCache.CopyResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LmdbCache.CopyResponse}
 */
proto.LmdbCache.CopyResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<!proto.LmdbCache.CopyResponse.CopyResult>} */ (reader.readPackedEnum());
      msg.setResultsList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LmdbCache.CopyResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LmdbCache.CopyResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LmdbCache.CopyResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LmdbCache.CopyResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResultsList();
  if (f.length > 0) {
    writer.writePackedEnum(
      1,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.LmdbCache.CopyResponse.CopyResult = {
  SUCCESS: 0,
  FROM_KEY_NOT_FOUND: 1,
  TO_KEY_EXISTS: 2,
  FAILURE: 3
};

/**
 * repeated CopyResult results = 1;
 * @return {!Array<!proto.LmdbCache.CopyResponse.CopyResult>}
 */
proto.LmdbCache.CopyResponse.prototype.getResultsList = function() {
  return /** @type {!Array<!proto.LmdbCache.CopyResponse.CopyResult>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<!proto.LmdbCache.CopyResponse.CopyResult>} value */
proto.LmdbCache.CopyResponse.prototype.setResultsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!proto.LmdbCache.CopyResponse.CopyResult} value
 * @param {number=} opt_index
 */
proto.LmdbCache.CopyResponse.prototype.addResults = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.LmdbCache.CopyResponse.prototype.clearResultsList = function() {
  this.setResultsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LmdbCache.KeyListRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.LmdbCache.KeyListRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.LmdbCache.KeyListRequest.displayName = 'proto.LmdbCache.KeyListRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LmdbCache.KeyListRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.LmdbCache.KeyListRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LmdbCache.KeyListRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LmdbCache.KeyListRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    keyprefix: jspb.Message.getFieldWithDefault(msg, 1, ""),
    pagesize: jspb.Message.getFieldWithDefault(msg, 2, 0),
    page: jspb.Message.getFieldWithDefault(msg, 3, 0),
    correlationid: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LmdbCache.KeyListRequest}
 */
proto.LmdbCache.KeyListRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LmdbCache.KeyListRequest;
  return proto.LmdbCache.KeyListRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LmdbCache.KeyListRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LmdbCache.KeyListRequest}
 */
proto.LmdbCache.KeyListRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKeyprefix(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPagesize(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPage(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCorrelationid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LmdbCache.KeyListRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LmdbCache.KeyListRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LmdbCache.KeyListRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LmdbCache.KeyListRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKeyprefix();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPagesize();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getPage();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getCorrelationid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string keyPrefix = 1;
 * @return {string}
 */
proto.LmdbCache.KeyListRequest.prototype.getKeyprefix = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.LmdbCache.KeyListRequest.prototype.setKeyprefix = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 pageSize = 2;
 * @return {number}
 */
proto.LmdbCache.KeyListRequest.prototype.getPagesize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.LmdbCache.KeyListRequest.prototype.setPagesize = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 page = 3;
 * @return {number}
 */
proto.LmdbCache.KeyListRequest.prototype.getPage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.LmdbCache.KeyListRequest.prototype.setPage = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string correlationId = 4;
 * @return {string}
 */
proto.LmdbCache.KeyListRequest.prototype.getCorrelationid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.LmdbCache.KeyListRequest.prototype.setCorrelationid = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LmdbCache.KeyListResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.LmdbCache.KeyListResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.LmdbCache.KeyListResponse.displayName = 'proto.LmdbCache.KeyListResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LmdbCache.KeyListResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.LmdbCache.KeyListResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LmdbCache.KeyListResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LmdbCache.KeyListResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LmdbCache.KeyListResponse}
 */
proto.LmdbCache.KeyListResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LmdbCache.KeyListResponse;
  return proto.LmdbCache.KeyListResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LmdbCache.KeyListResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LmdbCache.KeyListResponse}
 */
proto.LmdbCache.KeyListResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LmdbCache.KeyListResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LmdbCache.KeyListResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LmdbCache.KeyListResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LmdbCache.KeyListResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.LmdbCache.KeyListResponse.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.LmdbCache.KeyListResponse.prototype.setKey = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LmdbCache.KeyValueListResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.LmdbCache.KeyValueListResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.LmdbCache.KeyValueListResponse.displayName = 'proto.LmdbCache.KeyValueListResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LmdbCache.KeyValueListResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.LmdbCache.KeyValueListResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LmdbCache.KeyValueListResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LmdbCache.KeyValueListResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: msg.getValue_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LmdbCache.KeyValueListResponse}
 */
proto.LmdbCache.KeyValueListResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LmdbCache.KeyValueListResponse;
  return proto.LmdbCache.KeyValueListResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LmdbCache.KeyValueListResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LmdbCache.KeyValueListResponse}
 */
proto.LmdbCache.KeyValueListResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LmdbCache.KeyValueListResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LmdbCache.KeyValueListResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LmdbCache.KeyValueListResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LmdbCache.KeyValueListResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.LmdbCache.KeyValueListResponse.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.LmdbCache.KeyValueListResponse.prototype.setKey = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes value = 3;
 * @return {!(string|Uint8Array)}
 */
proto.LmdbCache.KeyValueListResponse.prototype.getValue = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes value = 3;
 * This is a type-conversion wrapper around `getValue()`
 * @return {string}
 */
proto.LmdbCache.KeyValueListResponse.prototype.getValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValue()));
};


/**
 * optional bytes value = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValue()`
 * @return {!Uint8Array}
 */
proto.LmdbCache.KeyValueListResponse.prototype.getValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValue()));
};


/** @param {!(string|Uint8Array)} value */
proto.LmdbCache.KeyValueListResponse.prototype.setValue = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LmdbCache.WriteLogEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.LmdbCache.WriteLogEvent.oneofGroups_);
};
goog.inherits(proto.LmdbCache.WriteLogEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.LmdbCache.WriteLogEvent.displayName = 'proto.LmdbCache.WriteLogEvent';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.LmdbCache.WriteLogEvent.oneofGroups_ = [[5,7]];

/**
 * @enum {number}
 */
proto.LmdbCache.WriteLogEvent.LoggedeventCase = {
  LOGGEDEVENT_NOT_SET: 0,
  UPDATED: 5,
  DELETED: 7
};

/**
 * @return {proto.LmdbCache.WriteLogEvent.LoggedeventCase}
 */
proto.LmdbCache.WriteLogEvent.prototype.getLoggedeventCase = function() {
  return /** @type {proto.LmdbCache.WriteLogEvent.LoggedeventCase} */(jspb.Message.computeOneofCase(this, proto.LmdbCache.WriteLogEvent.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LmdbCache.WriteLogEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.LmdbCache.WriteLogEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LmdbCache.WriteLogEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LmdbCache.WriteLogEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    clock: (f = msg.getClock()) && proto.LmdbCache.VectorClock.toObject(includeInstance, f),
    correlationid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    originatorreplicaid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    updated: (f = msg.getUpdated()) && proto.LmdbCache.WriteLogEvent.AddedOrUpdated.toObject(includeInstance, f),
    deleted: (f = msg.getDeleted()) && proto.LmdbCache.WriteLogEvent.Deleted.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LmdbCache.WriteLogEvent}
 */
proto.LmdbCache.WriteLogEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LmdbCache.WriteLogEvent;
  return proto.LmdbCache.WriteLogEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LmdbCache.WriteLogEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LmdbCache.WriteLogEvent}
 */
proto.LmdbCache.WriteLogEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.LmdbCache.VectorClock;
      reader.readMessage(value,proto.LmdbCache.VectorClock.deserializeBinaryFromReader);
      msg.setClock(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCorrelationid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setOriginatorreplicaid(value);
      break;
    case 5:
      var value = new proto.LmdbCache.WriteLogEvent.AddedOrUpdated;
      reader.readMessage(value,proto.LmdbCache.WriteLogEvent.AddedOrUpdated.deserializeBinaryFromReader);
      msg.setUpdated(value);
      break;
    case 7:
      var value = new proto.LmdbCache.WriteLogEvent.Deleted;
      reader.readMessage(value,proto.LmdbCache.WriteLogEvent.Deleted.deserializeBinaryFromReader);
      msg.setDeleted(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LmdbCache.WriteLogEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LmdbCache.WriteLogEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LmdbCache.WriteLogEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LmdbCache.WriteLogEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClock();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.LmdbCache.VectorClock.serializeBinaryToWriter
    );
  }
  f = message.getCorrelationid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getOriginatorreplicaid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getUpdated();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.LmdbCache.WriteLogEvent.AddedOrUpdated.serializeBinaryToWriter
    );
  }
  f = message.getDeleted();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.LmdbCache.WriteLogEvent.Deleted.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LmdbCache.WriteLogEvent.AddedOrUpdated = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.LmdbCache.WriteLogEvent.AddedOrUpdated, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.LmdbCache.WriteLogEvent.AddedOrUpdated.displayName = 'proto.LmdbCache.WriteLogEvent.AddedOrUpdated';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LmdbCache.WriteLogEvent.AddedOrUpdated.prototype.toObject = function(opt_includeInstance) {
  return proto.LmdbCache.WriteLogEvent.AddedOrUpdated.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LmdbCache.WriteLogEvent.AddedOrUpdated} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LmdbCache.WriteLogEvent.AddedOrUpdated.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, ""),
    expiry: (f = msg.getExpiry()) && proto.LmdbCache.Timestamp.toObject(includeInstance, f),
    valuemetadata: (f = msg.getValuemetadata()) && proto.LmdbCache.ValueMetadata.toObject(includeInstance, f),
    value: msg.getValue_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LmdbCache.WriteLogEvent.AddedOrUpdated}
 */
proto.LmdbCache.WriteLogEvent.AddedOrUpdated.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LmdbCache.WriteLogEvent.AddedOrUpdated;
  return proto.LmdbCache.WriteLogEvent.AddedOrUpdated.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LmdbCache.WriteLogEvent.AddedOrUpdated} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LmdbCache.WriteLogEvent.AddedOrUpdated}
 */
proto.LmdbCache.WriteLogEvent.AddedOrUpdated.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = new proto.LmdbCache.Timestamp;
      reader.readMessage(value,proto.LmdbCache.Timestamp.deserializeBinaryFromReader);
      msg.setExpiry(value);
      break;
    case 3:
      var value = new proto.LmdbCache.ValueMetadata;
      reader.readMessage(value,proto.LmdbCache.ValueMetadata.deserializeBinaryFromReader);
      msg.setValuemetadata(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LmdbCache.WriteLogEvent.AddedOrUpdated.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LmdbCache.WriteLogEvent.AddedOrUpdated.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LmdbCache.WriteLogEvent.AddedOrUpdated} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LmdbCache.WriteLogEvent.AddedOrUpdated.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getExpiry();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.LmdbCache.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getValuemetadata();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.LmdbCache.ValueMetadata.serializeBinaryToWriter
    );
  }
  f = message.getValue_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.LmdbCache.WriteLogEvent.AddedOrUpdated.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.LmdbCache.WriteLogEvent.AddedOrUpdated.prototype.setKey = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Timestamp expiry = 2;
 * @return {?proto.LmdbCache.Timestamp}
 */
proto.LmdbCache.WriteLogEvent.AddedOrUpdated.prototype.getExpiry = function() {
  return /** @type{?proto.LmdbCache.Timestamp} */ (
    jspb.Message.getWrapperField(this, proto.LmdbCache.Timestamp, 2));
};


/** @param {?proto.LmdbCache.Timestamp|undefined} value */
proto.LmdbCache.WriteLogEvent.AddedOrUpdated.prototype.setExpiry = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.LmdbCache.WriteLogEvent.AddedOrUpdated.prototype.clearExpiry = function() {
  this.setExpiry(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.LmdbCache.WriteLogEvent.AddedOrUpdated.prototype.hasExpiry = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ValueMetadata valueMetadata = 3;
 * @return {?proto.LmdbCache.ValueMetadata}
 */
proto.LmdbCache.WriteLogEvent.AddedOrUpdated.prototype.getValuemetadata = function() {
  return /** @type{?proto.LmdbCache.ValueMetadata} */ (
    jspb.Message.getWrapperField(this, proto.LmdbCache.ValueMetadata, 3));
};


/** @param {?proto.LmdbCache.ValueMetadata|undefined} value */
proto.LmdbCache.WriteLogEvent.AddedOrUpdated.prototype.setValuemetadata = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.LmdbCache.WriteLogEvent.AddedOrUpdated.prototype.clearValuemetadata = function() {
  this.setValuemetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.LmdbCache.WriteLogEvent.AddedOrUpdated.prototype.hasValuemetadata = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bytes value = 4;
 * @return {!(string|Uint8Array)}
 */
proto.LmdbCache.WriteLogEvent.AddedOrUpdated.prototype.getValue = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes value = 4;
 * This is a type-conversion wrapper around `getValue()`
 * @return {string}
 */
proto.LmdbCache.WriteLogEvent.AddedOrUpdated.prototype.getValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValue()));
};


/**
 * optional bytes value = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValue()`
 * @return {!Uint8Array}
 */
proto.LmdbCache.WriteLogEvent.AddedOrUpdated.prototype.getValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValue()));
};


/** @param {!(string|Uint8Array)} value */
proto.LmdbCache.WriteLogEvent.AddedOrUpdated.prototype.setValue = function(value) {
  jspb.Message.setProto3BytesField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LmdbCache.WriteLogEvent.Deleted = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.LmdbCache.WriteLogEvent.Deleted, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.LmdbCache.WriteLogEvent.Deleted.displayName = 'proto.LmdbCache.WriteLogEvent.Deleted';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LmdbCache.WriteLogEvent.Deleted.prototype.toObject = function(opt_includeInstance) {
  return proto.LmdbCache.WriteLogEvent.Deleted.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LmdbCache.WriteLogEvent.Deleted} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LmdbCache.WriteLogEvent.Deleted.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LmdbCache.WriteLogEvent.Deleted}
 */
proto.LmdbCache.WriteLogEvent.Deleted.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LmdbCache.WriteLogEvent.Deleted;
  return proto.LmdbCache.WriteLogEvent.Deleted.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LmdbCache.WriteLogEvent.Deleted} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LmdbCache.WriteLogEvent.Deleted}
 */
proto.LmdbCache.WriteLogEvent.Deleted.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LmdbCache.WriteLogEvent.Deleted.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LmdbCache.WriteLogEvent.Deleted.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LmdbCache.WriteLogEvent.Deleted} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LmdbCache.WriteLogEvent.Deleted.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.LmdbCache.WriteLogEvent.Deleted.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.LmdbCache.WriteLogEvent.Deleted.prototype.setKey = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional VectorClock clock = 1;
 * @return {?proto.LmdbCache.VectorClock}
 */
proto.LmdbCache.WriteLogEvent.prototype.getClock = function() {
  return /** @type{?proto.LmdbCache.VectorClock} */ (
    jspb.Message.getWrapperField(this, proto.LmdbCache.VectorClock, 1));
};


/** @param {?proto.LmdbCache.VectorClock|undefined} value */
proto.LmdbCache.WriteLogEvent.prototype.setClock = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.LmdbCache.WriteLogEvent.prototype.clearClock = function() {
  this.setClock(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.LmdbCache.WriteLogEvent.prototype.hasClock = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string correlationId = 2;
 * @return {string}
 */
proto.LmdbCache.WriteLogEvent.prototype.getCorrelationid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.LmdbCache.WriteLogEvent.prototype.setCorrelationid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string originatorReplicaId = 3;
 * @return {string}
 */
proto.LmdbCache.WriteLogEvent.prototype.getOriginatorreplicaid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.LmdbCache.WriteLogEvent.prototype.setOriginatorreplicaid = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional AddedOrUpdated updated = 5;
 * @return {?proto.LmdbCache.WriteLogEvent.AddedOrUpdated}
 */
proto.LmdbCache.WriteLogEvent.prototype.getUpdated = function() {
  return /** @type{?proto.LmdbCache.WriteLogEvent.AddedOrUpdated} */ (
    jspb.Message.getWrapperField(this, proto.LmdbCache.WriteLogEvent.AddedOrUpdated, 5));
};


/** @param {?proto.LmdbCache.WriteLogEvent.AddedOrUpdated|undefined} value */
proto.LmdbCache.WriteLogEvent.prototype.setUpdated = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.LmdbCache.WriteLogEvent.oneofGroups_[0], value);
};


proto.LmdbCache.WriteLogEvent.prototype.clearUpdated = function() {
  this.setUpdated(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.LmdbCache.WriteLogEvent.prototype.hasUpdated = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Deleted deleted = 7;
 * @return {?proto.LmdbCache.WriteLogEvent.Deleted}
 */
proto.LmdbCache.WriteLogEvent.prototype.getDeleted = function() {
  return /** @type{?proto.LmdbCache.WriteLogEvent.Deleted} */ (
    jspb.Message.getWrapperField(this, proto.LmdbCache.WriteLogEvent.Deleted, 7));
};


/** @param {?proto.LmdbCache.WriteLogEvent.Deleted|undefined} value */
proto.LmdbCache.WriteLogEvent.prototype.setDeleted = function(value) {
  jspb.Message.setOneofWrapperField(this, 7, proto.LmdbCache.WriteLogEvent.oneofGroups_[0], value);
};


proto.LmdbCache.WriteLogEvent.prototype.clearDeleted = function() {
  this.setDeleted(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.LmdbCache.WriteLogEvent.prototype.hasDeleted = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LmdbCache.GetReplicaIdResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.LmdbCache.GetReplicaIdResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.LmdbCache.GetReplicaIdResponse.displayName = 'proto.LmdbCache.GetReplicaIdResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LmdbCache.GetReplicaIdResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.LmdbCache.GetReplicaIdResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LmdbCache.GetReplicaIdResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LmdbCache.GetReplicaIdResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    replicaid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LmdbCache.GetReplicaIdResponse}
 */
proto.LmdbCache.GetReplicaIdResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LmdbCache.GetReplicaIdResponse;
  return proto.LmdbCache.GetReplicaIdResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LmdbCache.GetReplicaIdResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LmdbCache.GetReplicaIdResponse}
 */
proto.LmdbCache.GetReplicaIdResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setReplicaid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LmdbCache.GetReplicaIdResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LmdbCache.GetReplicaIdResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LmdbCache.GetReplicaIdResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LmdbCache.GetReplicaIdResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReplicaid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string replicaId = 1;
 * @return {string}
 */
proto.LmdbCache.GetReplicaIdResponse.prototype.getReplicaid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.LmdbCache.GetReplicaIdResponse.prototype.setReplicaid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LmdbCache.SyncPacket = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.LmdbCache.SyncPacket.oneofGroups_);
};
goog.inherits(proto.LmdbCache.SyncPacket, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.LmdbCache.SyncPacket.displayName = 'proto.LmdbCache.SyncPacket';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.LmdbCache.SyncPacket.oneofGroups_ = [[4,5,6,7]];

/**
 * @enum {number}
 */
proto.LmdbCache.SyncPacket.PacketCase = {
  PACKET_NOT_SET: 0,
  SYNCFROM: 4,
  ITEMS: 5,
  ITEM: 6,
  SKIPPOS: 7
};

/**
 * @return {proto.LmdbCache.SyncPacket.PacketCase}
 */
proto.LmdbCache.SyncPacket.prototype.getPacketCase = function() {
  return /** @type {proto.LmdbCache.SyncPacket.PacketCase} */(jspb.Message.computeOneofCase(this, proto.LmdbCache.SyncPacket.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LmdbCache.SyncPacket.prototype.toObject = function(opt_includeInstance) {
  return proto.LmdbCache.SyncPacket.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LmdbCache.SyncPacket} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LmdbCache.SyncPacket.toObject = function(includeInstance, msg) {
  var f, obj = {
    replicaid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    syncfrom: (f = msg.getSyncfrom()) && proto.LmdbCache.SyncPacket.SyncFrom.toObject(includeInstance, f),
    items: (f = msg.getItems()) && proto.LmdbCache.SyncPacket.Items.toObject(includeInstance, f),
    item: (f = msg.getItem()) && proto.LmdbCache.SyncPacket.Item.toObject(includeInstance, f),
    skippos: (f = msg.getSkippos()) && proto.LmdbCache.SyncPacket.SkipPos.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LmdbCache.SyncPacket}
 */
proto.LmdbCache.SyncPacket.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LmdbCache.SyncPacket;
  return proto.LmdbCache.SyncPacket.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LmdbCache.SyncPacket} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LmdbCache.SyncPacket}
 */
proto.LmdbCache.SyncPacket.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setReplicaid(value);
      break;
    case 4:
      var value = new proto.LmdbCache.SyncPacket.SyncFrom;
      reader.readMessage(value,proto.LmdbCache.SyncPacket.SyncFrom.deserializeBinaryFromReader);
      msg.setSyncfrom(value);
      break;
    case 5:
      var value = new proto.LmdbCache.SyncPacket.Items;
      reader.readMessage(value,proto.LmdbCache.SyncPacket.Items.deserializeBinaryFromReader);
      msg.setItems(value);
      break;
    case 6:
      var value = new proto.LmdbCache.SyncPacket.Item;
      reader.readMessage(value,proto.LmdbCache.SyncPacket.Item.deserializeBinaryFromReader);
      msg.setItem(value);
      break;
    case 7:
      var value = new proto.LmdbCache.SyncPacket.SkipPos;
      reader.readMessage(value,proto.LmdbCache.SyncPacket.SkipPos.deserializeBinaryFromReader);
      msg.setSkippos(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LmdbCache.SyncPacket.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LmdbCache.SyncPacket.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LmdbCache.SyncPacket} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LmdbCache.SyncPacket.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReplicaid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSyncfrom();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.LmdbCache.SyncPacket.SyncFrom.serializeBinaryToWriter
    );
  }
  f = message.getItems();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.LmdbCache.SyncPacket.Items.serializeBinaryToWriter
    );
  }
  f = message.getItem();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.LmdbCache.SyncPacket.Item.serializeBinaryToWriter
    );
  }
  f = message.getSkippos();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.LmdbCache.SyncPacket.SkipPos.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LmdbCache.SyncPacket.SyncFrom = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.LmdbCache.SyncPacket.SyncFrom, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.LmdbCache.SyncPacket.SyncFrom.displayName = 'proto.LmdbCache.SyncPacket.SyncFrom';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LmdbCache.SyncPacket.SyncFrom.prototype.toObject = function(opt_includeInstance) {
  return proto.LmdbCache.SyncPacket.SyncFrom.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LmdbCache.SyncPacket.SyncFrom} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LmdbCache.SyncPacket.SyncFrom.toObject = function(includeInstance, msg) {
  var f, obj = {
    replicaid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    since: jspb.Message.getFieldWithDefault(msg, 2, 0),
    includemine: jspb.Message.getFieldWithDefault(msg, 3, false),
    includeacked: jspb.Message.getFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LmdbCache.SyncPacket.SyncFrom}
 */
proto.LmdbCache.SyncPacket.SyncFrom.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LmdbCache.SyncPacket.SyncFrom;
  return proto.LmdbCache.SyncPacket.SyncFrom.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LmdbCache.SyncPacket.SyncFrom} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LmdbCache.SyncPacket.SyncFrom}
 */
proto.LmdbCache.SyncPacket.SyncFrom.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setReplicaid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSince(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIncludemine(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIncludeacked(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LmdbCache.SyncPacket.SyncFrom.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LmdbCache.SyncPacket.SyncFrom.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LmdbCache.SyncPacket.SyncFrom} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LmdbCache.SyncPacket.SyncFrom.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReplicaid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSince();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getIncludemine();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getIncludeacked();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional string replicaId = 1;
 * @return {string}
 */
proto.LmdbCache.SyncPacket.SyncFrom.prototype.getReplicaid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.LmdbCache.SyncPacket.SyncFrom.prototype.setReplicaid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 since = 2;
 * @return {number}
 */
proto.LmdbCache.SyncPacket.SyncFrom.prototype.getSince = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.LmdbCache.SyncPacket.SyncFrom.prototype.setSince = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bool includeMine = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.LmdbCache.SyncPacket.SyncFrom.prototype.getIncludemine = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.LmdbCache.SyncPacket.SyncFrom.prototype.setIncludemine = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool includeAcked = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.LmdbCache.SyncPacket.SyncFrom.prototype.getIncludeacked = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.LmdbCache.SyncPacket.SyncFrom.prototype.setIncludeacked = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LmdbCache.SyncPacket.Item = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.LmdbCache.SyncPacket.Item, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.LmdbCache.SyncPacket.Item.displayName = 'proto.LmdbCache.SyncPacket.Item';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LmdbCache.SyncPacket.Item.prototype.toObject = function(opt_includeInstance) {
  return proto.LmdbCache.SyncPacket.Item.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LmdbCache.SyncPacket.Item} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LmdbCache.SyncPacket.Item.toObject = function(includeInstance, msg) {
  var f, obj = {
    pos: jspb.Message.getFieldWithDefault(msg, 1, 0),
    logevent: (f = msg.getLogevent()) && proto.LmdbCache.WriteLogEvent.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LmdbCache.SyncPacket.Item}
 */
proto.LmdbCache.SyncPacket.Item.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LmdbCache.SyncPacket.Item;
  return proto.LmdbCache.SyncPacket.Item.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LmdbCache.SyncPacket.Item} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LmdbCache.SyncPacket.Item}
 */
proto.LmdbCache.SyncPacket.Item.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPos(value);
      break;
    case 2:
      var value = new proto.LmdbCache.WriteLogEvent;
      reader.readMessage(value,proto.LmdbCache.WriteLogEvent.deserializeBinaryFromReader);
      msg.setLogevent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LmdbCache.SyncPacket.Item.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LmdbCache.SyncPacket.Item.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LmdbCache.SyncPacket.Item} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LmdbCache.SyncPacket.Item.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPos();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getLogevent();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.LmdbCache.WriteLogEvent.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 pos = 1;
 * @return {number}
 */
proto.LmdbCache.SyncPacket.Item.prototype.getPos = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.LmdbCache.SyncPacket.Item.prototype.setPos = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional WriteLogEvent logEvent = 2;
 * @return {?proto.LmdbCache.WriteLogEvent}
 */
proto.LmdbCache.SyncPacket.Item.prototype.getLogevent = function() {
  return /** @type{?proto.LmdbCache.WriteLogEvent} */ (
    jspb.Message.getWrapperField(this, proto.LmdbCache.WriteLogEvent, 2));
};


/** @param {?proto.LmdbCache.WriteLogEvent|undefined} value */
proto.LmdbCache.SyncPacket.Item.prototype.setLogevent = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.LmdbCache.SyncPacket.Item.prototype.clearLogevent = function() {
  this.setLogevent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.LmdbCache.SyncPacket.Item.prototype.hasLogevent = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LmdbCache.SyncPacket.Items = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.LmdbCache.SyncPacket.Items.repeatedFields_, null);
};
goog.inherits(proto.LmdbCache.SyncPacket.Items, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.LmdbCache.SyncPacket.Items.displayName = 'proto.LmdbCache.SyncPacket.Items';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.LmdbCache.SyncPacket.Items.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LmdbCache.SyncPacket.Items.prototype.toObject = function(opt_includeInstance) {
  return proto.LmdbCache.SyncPacket.Items.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LmdbCache.SyncPacket.Items} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LmdbCache.SyncPacket.Items.toObject = function(includeInstance, msg) {
  var f, obj = {
    batchList: jspb.Message.toObjectList(msg.getBatchList(),
    proto.LmdbCache.SyncPacket.Item.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LmdbCache.SyncPacket.Items}
 */
proto.LmdbCache.SyncPacket.Items.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LmdbCache.SyncPacket.Items;
  return proto.LmdbCache.SyncPacket.Items.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LmdbCache.SyncPacket.Items} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LmdbCache.SyncPacket.Items}
 */
proto.LmdbCache.SyncPacket.Items.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.LmdbCache.SyncPacket.Item;
      reader.readMessage(value,proto.LmdbCache.SyncPacket.Item.deserializeBinaryFromReader);
      msg.addBatch(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LmdbCache.SyncPacket.Items.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LmdbCache.SyncPacket.Items.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LmdbCache.SyncPacket.Items} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LmdbCache.SyncPacket.Items.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBatchList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.LmdbCache.SyncPacket.Item.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Item batch = 1;
 * @return {!Array<!proto.LmdbCache.SyncPacket.Item>}
 */
proto.LmdbCache.SyncPacket.Items.prototype.getBatchList = function() {
  return /** @type{!Array<!proto.LmdbCache.SyncPacket.Item>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.LmdbCache.SyncPacket.Item, 1));
};


/** @param {!Array<!proto.LmdbCache.SyncPacket.Item>} value */
proto.LmdbCache.SyncPacket.Items.prototype.setBatchList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.LmdbCache.SyncPacket.Item=} opt_value
 * @param {number=} opt_index
 * @return {!proto.LmdbCache.SyncPacket.Item}
 */
proto.LmdbCache.SyncPacket.Items.prototype.addBatch = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.LmdbCache.SyncPacket.Item, opt_index);
};


proto.LmdbCache.SyncPacket.Items.prototype.clearBatchList = function() {
  this.setBatchList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LmdbCache.SyncPacket.SkipPos = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.LmdbCache.SyncPacket.SkipPos, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.LmdbCache.SyncPacket.SkipPos.displayName = 'proto.LmdbCache.SyncPacket.SkipPos';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LmdbCache.SyncPacket.SkipPos.prototype.toObject = function(opt_includeInstance) {
  return proto.LmdbCache.SyncPacket.SkipPos.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LmdbCache.SyncPacket.SkipPos} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LmdbCache.SyncPacket.SkipPos.toObject = function(includeInstance, msg) {
  var f, obj = {
    lastpos: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LmdbCache.SyncPacket.SkipPos}
 */
proto.LmdbCache.SyncPacket.SkipPos.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LmdbCache.SyncPacket.SkipPos;
  return proto.LmdbCache.SyncPacket.SkipPos.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LmdbCache.SyncPacket.SkipPos} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LmdbCache.SyncPacket.SkipPos}
 */
proto.LmdbCache.SyncPacket.SkipPos.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLastpos(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LmdbCache.SyncPacket.SkipPos.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LmdbCache.SyncPacket.SkipPos.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LmdbCache.SyncPacket.SkipPos} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LmdbCache.SyncPacket.SkipPos.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLastpos();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 lastPos = 1;
 * @return {number}
 */
proto.LmdbCache.SyncPacket.SkipPos.prototype.getLastpos = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.LmdbCache.SyncPacket.SkipPos.prototype.setLastpos = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string replicaId = 1;
 * @return {string}
 */
proto.LmdbCache.SyncPacket.prototype.getReplicaid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.LmdbCache.SyncPacket.prototype.setReplicaid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional SyncFrom syncFrom = 4;
 * @return {?proto.LmdbCache.SyncPacket.SyncFrom}
 */
proto.LmdbCache.SyncPacket.prototype.getSyncfrom = function() {
  return /** @type{?proto.LmdbCache.SyncPacket.SyncFrom} */ (
    jspb.Message.getWrapperField(this, proto.LmdbCache.SyncPacket.SyncFrom, 4));
};


/** @param {?proto.LmdbCache.SyncPacket.SyncFrom|undefined} value */
proto.LmdbCache.SyncPacket.prototype.setSyncfrom = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.LmdbCache.SyncPacket.oneofGroups_[0], value);
};


proto.LmdbCache.SyncPacket.prototype.clearSyncfrom = function() {
  this.setSyncfrom(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.LmdbCache.SyncPacket.prototype.hasSyncfrom = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Items items = 5;
 * @return {?proto.LmdbCache.SyncPacket.Items}
 */
proto.LmdbCache.SyncPacket.prototype.getItems = function() {
  return /** @type{?proto.LmdbCache.SyncPacket.Items} */ (
    jspb.Message.getWrapperField(this, proto.LmdbCache.SyncPacket.Items, 5));
};


/** @param {?proto.LmdbCache.SyncPacket.Items|undefined} value */
proto.LmdbCache.SyncPacket.prototype.setItems = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.LmdbCache.SyncPacket.oneofGroups_[0], value);
};


proto.LmdbCache.SyncPacket.prototype.clearItems = function() {
  this.setItems(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.LmdbCache.SyncPacket.prototype.hasItems = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Item item = 6;
 * @return {?proto.LmdbCache.SyncPacket.Item}
 */
proto.LmdbCache.SyncPacket.prototype.getItem = function() {
  return /** @type{?proto.LmdbCache.SyncPacket.Item} */ (
    jspb.Message.getWrapperField(this, proto.LmdbCache.SyncPacket.Item, 6));
};


/** @param {?proto.LmdbCache.SyncPacket.Item|undefined} value */
proto.LmdbCache.SyncPacket.prototype.setItem = function(value) {
  jspb.Message.setOneofWrapperField(this, 6, proto.LmdbCache.SyncPacket.oneofGroups_[0], value);
};


proto.LmdbCache.SyncPacket.prototype.clearItem = function() {
  this.setItem(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.LmdbCache.SyncPacket.prototype.hasItem = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional SkipPos skipPos = 7;
 * @return {?proto.LmdbCache.SyncPacket.SkipPos}
 */
proto.LmdbCache.SyncPacket.prototype.getSkippos = function() {
  return /** @type{?proto.LmdbCache.SyncPacket.SkipPos} */ (
    jspb.Message.getWrapperField(this, proto.LmdbCache.SyncPacket.SkipPos, 7));
};


/** @param {?proto.LmdbCache.SyncPacket.SkipPos|undefined} value */
proto.LmdbCache.SyncPacket.prototype.setSkippos = function(value) {
  jspb.Message.setOneofWrapperField(this, 7, proto.LmdbCache.SyncPacket.oneofGroups_[0], value);
};


proto.LmdbCache.SyncPacket.prototype.clearSkippos = function() {
  this.setSkippos(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.LmdbCache.SyncPacket.prototype.hasSkippos = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LmdbCache.MonitoringUpdateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.LmdbCache.MonitoringUpdateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.LmdbCache.MonitoringUpdateRequest.displayName = 'proto.LmdbCache.MonitoringUpdateRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LmdbCache.MonitoringUpdateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.LmdbCache.MonitoringUpdateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LmdbCache.MonitoringUpdateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LmdbCache.MonitoringUpdateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    correlationid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LmdbCache.MonitoringUpdateRequest}
 */
proto.LmdbCache.MonitoringUpdateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LmdbCache.MonitoringUpdateRequest;
  return proto.LmdbCache.MonitoringUpdateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LmdbCache.MonitoringUpdateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LmdbCache.MonitoringUpdateRequest}
 */
proto.LmdbCache.MonitoringUpdateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCorrelationid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LmdbCache.MonitoringUpdateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LmdbCache.MonitoringUpdateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LmdbCache.MonitoringUpdateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LmdbCache.MonitoringUpdateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCorrelationid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string correlationId = 1;
 * @return {string}
 */
proto.LmdbCache.MonitoringUpdateRequest.prototype.getCorrelationid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.LmdbCache.MonitoringUpdateRequest.prototype.setCorrelationid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LmdbCache.MonitoringUpdateResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.LmdbCache.MonitoringUpdateResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.LmdbCache.MonitoringUpdateResponse.displayName = 'proto.LmdbCache.MonitoringUpdateResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LmdbCache.MonitoringUpdateResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.LmdbCache.MonitoringUpdateResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LmdbCache.MonitoringUpdateResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LmdbCache.MonitoringUpdateResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: (f = msg.getStatus()) && proto.LmdbCache.ReplicaStatus.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LmdbCache.MonitoringUpdateResponse}
 */
proto.LmdbCache.MonitoringUpdateResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LmdbCache.MonitoringUpdateResponse;
  return proto.LmdbCache.MonitoringUpdateResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LmdbCache.MonitoringUpdateResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LmdbCache.MonitoringUpdateResponse}
 */
proto.LmdbCache.MonitoringUpdateResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.LmdbCache.ReplicaStatus;
      reader.readMessage(value,proto.LmdbCache.ReplicaStatus.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LmdbCache.MonitoringUpdateResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LmdbCache.MonitoringUpdateResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LmdbCache.MonitoringUpdateResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LmdbCache.MonitoringUpdateResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.LmdbCache.ReplicaStatus.serializeBinaryToWriter
    );
  }
};


/**
 * optional ReplicaStatus status = 1;
 * @return {?proto.LmdbCache.ReplicaStatus}
 */
proto.LmdbCache.MonitoringUpdateResponse.prototype.getStatus = function() {
  return /** @type{?proto.LmdbCache.ReplicaStatus} */ (
    jspb.Message.getWrapperField(this, proto.LmdbCache.ReplicaStatus, 1));
};


/** @param {?proto.LmdbCache.ReplicaStatus|undefined} value */
proto.LmdbCache.MonitoringUpdateResponse.prototype.setStatus = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.LmdbCache.MonitoringUpdateResponse.prototype.clearStatus = function() {
  this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.LmdbCache.MonitoringUpdateResponse.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LmdbCache.ReplicaStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.LmdbCache.ReplicaStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.LmdbCache.ReplicaStatus.displayName = 'proto.LmdbCache.ReplicaStatus';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LmdbCache.ReplicaStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.LmdbCache.ReplicaStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LmdbCache.ReplicaStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LmdbCache.ReplicaStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    replicaid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    connectioninfo: (f = msg.getConnectioninfo()) && proto.LmdbCache.ReplicaConnectionInfo.toObject(includeInstance, f),
    started: (f = msg.getStarted()) && proto.LmdbCache.Timestamp.toObject(includeInstance, f),
    replicaconfig: (f = msg.getReplicaconfig()) && proto.LmdbCache.ReplicaConfig.toObject(includeInstance, f),
    currentclock: (f = msg.getCurrentclock()) && proto.LmdbCache.VectorClock.toObject(includeInstance, f),
    counters: (f = msg.getCounters()) && proto.LmdbCache.ReplicaCounters.toObject(includeInstance, f),
    collectedstats: (f = msg.getCollectedstats()) && proto.LmdbCache.CollectedStats.toObject(includeInstance, f),
    clusterstatus: (f = msg.getClusterstatus()) && proto.LmdbCache.ClusterStatus.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LmdbCache.ReplicaStatus}
 */
proto.LmdbCache.ReplicaStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LmdbCache.ReplicaStatus;
  return proto.LmdbCache.ReplicaStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LmdbCache.ReplicaStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LmdbCache.ReplicaStatus}
 */
proto.LmdbCache.ReplicaStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setReplicaid(value);
      break;
    case 2:
      var value = new proto.LmdbCache.ReplicaConnectionInfo;
      reader.readMessage(value,proto.LmdbCache.ReplicaConnectionInfo.deserializeBinaryFromReader);
      msg.setConnectioninfo(value);
      break;
    case 3:
      var value = new proto.LmdbCache.Timestamp;
      reader.readMessage(value,proto.LmdbCache.Timestamp.deserializeBinaryFromReader);
      msg.setStarted(value);
      break;
    case 4:
      var value = new proto.LmdbCache.ReplicaConfig;
      reader.readMessage(value,proto.LmdbCache.ReplicaConfig.deserializeBinaryFromReader);
      msg.setReplicaconfig(value);
      break;
    case 5:
      var value = new proto.LmdbCache.VectorClock;
      reader.readMessage(value,proto.LmdbCache.VectorClock.deserializeBinaryFromReader);
      msg.setCurrentclock(value);
      break;
    case 10:
      var value = new proto.LmdbCache.ReplicaCounters;
      reader.readMessage(value,proto.LmdbCache.ReplicaCounters.deserializeBinaryFromReader);
      msg.setCounters(value);
      break;
    case 11:
      var value = new proto.LmdbCache.CollectedStats;
      reader.readMessage(value,proto.LmdbCache.CollectedStats.deserializeBinaryFromReader);
      msg.setCollectedstats(value);
      break;
    case 12:
      var value = new proto.LmdbCache.ClusterStatus;
      reader.readMessage(value,proto.LmdbCache.ClusterStatus.deserializeBinaryFromReader);
      msg.setClusterstatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LmdbCache.ReplicaStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LmdbCache.ReplicaStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LmdbCache.ReplicaStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LmdbCache.ReplicaStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReplicaid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getConnectioninfo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.LmdbCache.ReplicaConnectionInfo.serializeBinaryToWriter
    );
  }
  f = message.getStarted();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.LmdbCache.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getReplicaconfig();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.LmdbCache.ReplicaConfig.serializeBinaryToWriter
    );
  }
  f = message.getCurrentclock();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.LmdbCache.VectorClock.serializeBinaryToWriter
    );
  }
  f = message.getCounters();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.LmdbCache.ReplicaCounters.serializeBinaryToWriter
    );
  }
  f = message.getCollectedstats();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.LmdbCache.CollectedStats.serializeBinaryToWriter
    );
  }
  f = message.getClusterstatus();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.LmdbCache.ClusterStatus.serializeBinaryToWriter
    );
  }
};


/**
 * optional string replicaId = 1;
 * @return {string}
 */
proto.LmdbCache.ReplicaStatus.prototype.getReplicaid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.LmdbCache.ReplicaStatus.prototype.setReplicaid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional ReplicaConnectionInfo connectionInfo = 2;
 * @return {?proto.LmdbCache.ReplicaConnectionInfo}
 */
proto.LmdbCache.ReplicaStatus.prototype.getConnectioninfo = function() {
  return /** @type{?proto.LmdbCache.ReplicaConnectionInfo} */ (
    jspb.Message.getWrapperField(this, proto.LmdbCache.ReplicaConnectionInfo, 2));
};


/** @param {?proto.LmdbCache.ReplicaConnectionInfo|undefined} value */
proto.LmdbCache.ReplicaStatus.prototype.setConnectioninfo = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.LmdbCache.ReplicaStatus.prototype.clearConnectioninfo = function() {
  this.setConnectioninfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.LmdbCache.ReplicaStatus.prototype.hasConnectioninfo = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Timestamp started = 3;
 * @return {?proto.LmdbCache.Timestamp}
 */
proto.LmdbCache.ReplicaStatus.prototype.getStarted = function() {
  return /** @type{?proto.LmdbCache.Timestamp} */ (
    jspb.Message.getWrapperField(this, proto.LmdbCache.Timestamp, 3));
};


/** @param {?proto.LmdbCache.Timestamp|undefined} value */
proto.LmdbCache.ReplicaStatus.prototype.setStarted = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.LmdbCache.ReplicaStatus.prototype.clearStarted = function() {
  this.setStarted(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.LmdbCache.ReplicaStatus.prototype.hasStarted = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ReplicaConfig replicaConfig = 4;
 * @return {?proto.LmdbCache.ReplicaConfig}
 */
proto.LmdbCache.ReplicaStatus.prototype.getReplicaconfig = function() {
  return /** @type{?proto.LmdbCache.ReplicaConfig} */ (
    jspb.Message.getWrapperField(this, proto.LmdbCache.ReplicaConfig, 4));
};


/** @param {?proto.LmdbCache.ReplicaConfig|undefined} value */
proto.LmdbCache.ReplicaStatus.prototype.setReplicaconfig = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.LmdbCache.ReplicaStatus.prototype.clearReplicaconfig = function() {
  this.setReplicaconfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.LmdbCache.ReplicaStatus.prototype.hasReplicaconfig = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional VectorClock currentClock = 5;
 * @return {?proto.LmdbCache.VectorClock}
 */
proto.LmdbCache.ReplicaStatus.prototype.getCurrentclock = function() {
  return /** @type{?proto.LmdbCache.VectorClock} */ (
    jspb.Message.getWrapperField(this, proto.LmdbCache.VectorClock, 5));
};


/** @param {?proto.LmdbCache.VectorClock|undefined} value */
proto.LmdbCache.ReplicaStatus.prototype.setCurrentclock = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.LmdbCache.ReplicaStatus.prototype.clearCurrentclock = function() {
  this.setCurrentclock(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.LmdbCache.ReplicaStatus.prototype.hasCurrentclock = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional ReplicaCounters counters = 10;
 * @return {?proto.LmdbCache.ReplicaCounters}
 */
proto.LmdbCache.ReplicaStatus.prototype.getCounters = function() {
  return /** @type{?proto.LmdbCache.ReplicaCounters} */ (
    jspb.Message.getWrapperField(this, proto.LmdbCache.ReplicaCounters, 10));
};


/** @param {?proto.LmdbCache.ReplicaCounters|undefined} value */
proto.LmdbCache.ReplicaStatus.prototype.setCounters = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


proto.LmdbCache.ReplicaStatus.prototype.clearCounters = function() {
  this.setCounters(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.LmdbCache.ReplicaStatus.prototype.hasCounters = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional CollectedStats collectedStats = 11;
 * @return {?proto.LmdbCache.CollectedStats}
 */
proto.LmdbCache.ReplicaStatus.prototype.getCollectedstats = function() {
  return /** @type{?proto.LmdbCache.CollectedStats} */ (
    jspb.Message.getWrapperField(this, proto.LmdbCache.CollectedStats, 11));
};


/** @param {?proto.LmdbCache.CollectedStats|undefined} value */
proto.LmdbCache.ReplicaStatus.prototype.setCollectedstats = function(value) {
  jspb.Message.setWrapperField(this, 11, value);
};


proto.LmdbCache.ReplicaStatus.prototype.clearCollectedstats = function() {
  this.setCollectedstats(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.LmdbCache.ReplicaStatus.prototype.hasCollectedstats = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional ClusterStatus clusterStatus = 12;
 * @return {?proto.LmdbCache.ClusterStatus}
 */
proto.LmdbCache.ReplicaStatus.prototype.getClusterstatus = function() {
  return /** @type{?proto.LmdbCache.ClusterStatus} */ (
    jspb.Message.getWrapperField(this, proto.LmdbCache.ClusterStatus, 12));
};


/** @param {?proto.LmdbCache.ClusterStatus|undefined} value */
proto.LmdbCache.ReplicaStatus.prototype.setClusterstatus = function(value) {
  jspb.Message.setWrapperField(this, 12, value);
};


proto.LmdbCache.ReplicaStatus.prototype.clearClusterstatus = function() {
  this.setClusterstatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.LmdbCache.ReplicaStatus.prototype.hasClusterstatus = function() {
  return jspb.Message.getField(this, 12) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LmdbCache.ClusterStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.LmdbCache.ClusterStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.LmdbCache.ClusterStatus.displayName = 'proto.LmdbCache.ClusterStatus';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LmdbCache.ClusterStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.LmdbCache.ClusterStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LmdbCache.ClusterStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LmdbCache.ClusterStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    replicasMap: (f = msg.getReplicasMap()) ? f.toObject(includeInstance, proto.LmdbCache.ReplicaConnectionInfo.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LmdbCache.ClusterStatus}
 */
proto.LmdbCache.ClusterStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LmdbCache.ClusterStatus;
  return proto.LmdbCache.ClusterStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LmdbCache.ClusterStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LmdbCache.ClusterStatus}
 */
proto.LmdbCache.ClusterStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getReplicasMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.LmdbCache.ReplicaConnectionInfo.deserializeBinaryFromReader, "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LmdbCache.ClusterStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LmdbCache.ClusterStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LmdbCache.ClusterStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LmdbCache.ClusterStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReplicasMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.LmdbCache.ReplicaConnectionInfo.serializeBinaryToWriter);
  }
};


/**
 * map<string, ReplicaConnectionInfo> replicas = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.LmdbCache.ReplicaConnectionInfo>}
 */
proto.LmdbCache.ClusterStatus.prototype.getReplicasMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.LmdbCache.ReplicaConnectionInfo>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.LmdbCache.ReplicaConnectionInfo));
};


proto.LmdbCache.ClusterStatus.prototype.clearReplicasMap = function() {
  this.getReplicasMap().clear();
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LmdbCache.ReplicaConnectionInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.LmdbCache.ReplicaConnectionInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.LmdbCache.ReplicaConnectionInfo.displayName = 'proto.LmdbCache.ReplicaConnectionInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LmdbCache.ReplicaConnectionInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.LmdbCache.ReplicaConnectionInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LmdbCache.ReplicaConnectionInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LmdbCache.ReplicaConnectionInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    host: jspb.Message.getFieldWithDefault(msg, 1, ""),
    port: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LmdbCache.ReplicaConnectionInfo}
 */
proto.LmdbCache.ReplicaConnectionInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LmdbCache.ReplicaConnectionInfo;
  return proto.LmdbCache.ReplicaConnectionInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LmdbCache.ReplicaConnectionInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LmdbCache.ReplicaConnectionInfo}
 */
proto.LmdbCache.ReplicaConnectionInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHost(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPort(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LmdbCache.ReplicaConnectionInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LmdbCache.ReplicaConnectionInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LmdbCache.ReplicaConnectionInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LmdbCache.ReplicaConnectionInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHost();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional string host = 1;
 * @return {string}
 */
proto.LmdbCache.ReplicaConnectionInfo.prototype.getHost = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.LmdbCache.ReplicaConnectionInfo.prototype.setHost = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 port = 2;
 * @return {number}
 */
proto.LmdbCache.ReplicaConnectionInfo.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.LmdbCache.ReplicaConnectionInfo.prototype.setPort = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LmdbCache.ReplicaCounters = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.LmdbCache.ReplicaCounters, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.LmdbCache.ReplicaCounters.displayName = 'proto.LmdbCache.ReplicaCounters';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LmdbCache.ReplicaCounters.prototype.toObject = function(opt_includeInstance) {
  return proto.LmdbCache.ReplicaCounters.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LmdbCache.ReplicaCounters} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LmdbCache.ReplicaCounters.toObject = function(includeInstance, msg) {
  var f, obj = {
    addscounter: jspb.Message.getFieldWithDefault(msg, 1, 0),
    deletescounter: jspb.Message.getFieldWithDefault(msg, 2, 0),
    copyscounter: jspb.Message.getFieldWithDefault(msg, 3, 0),
    getcounter: jspb.Message.getFieldWithDefault(msg, 4, 0),
    containscounter: jspb.Message.getFieldWithDefault(msg, 5, 0),
    keysearchcounter: jspb.Message.getFieldWithDefault(msg, 6, 0),
    metadatasearchcounter: jspb.Message.getFieldWithDefault(msg, 7, 0),
    pagesearchcounter: jspb.Message.getFieldWithDefault(msg, 8, 0),
    largestkeysize: jspb.Message.getFieldWithDefault(msg, 10, 0),
    largestvaluesize: jspb.Message.getFieldWithDefault(msg, 11, 0),
    replicatedadds: jspb.Message.getFieldWithDefault(msg, 15, 0),
    replicateddeletes: jspb.Message.getFieldWithDefault(msg, 16, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LmdbCache.ReplicaCounters}
 */
proto.LmdbCache.ReplicaCounters.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LmdbCache.ReplicaCounters;
  return proto.LmdbCache.ReplicaCounters.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LmdbCache.ReplicaCounters} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LmdbCache.ReplicaCounters}
 */
proto.LmdbCache.ReplicaCounters.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAddscounter(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setDeletescounter(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCopyscounter(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGetcounter(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setContainscounter(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setKeysearchcounter(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMetadatasearchcounter(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPagesearchcounter(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLargestkeysize(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLargestvaluesize(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setReplicatedadds(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setReplicateddeletes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LmdbCache.ReplicaCounters.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LmdbCache.ReplicaCounters.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LmdbCache.ReplicaCounters} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LmdbCache.ReplicaCounters.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddscounter();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getDeletescounter();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getCopyscounter();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getGetcounter();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getContainscounter();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getKeysearchcounter();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getMetadatasearchcounter();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = message.getPagesearchcounter();
  if (f !== 0) {
    writer.writeUint64(
      8,
      f
    );
  }
  f = message.getLargestkeysize();
  if (f !== 0) {
    writer.writeUint32(
      10,
      f
    );
  }
  f = message.getLargestvaluesize();
  if (f !== 0) {
    writer.writeUint32(
      11,
      f
    );
  }
  f = message.getReplicatedadds();
  if (f !== 0) {
    writer.writeUint64(
      15,
      f
    );
  }
  f = message.getReplicateddeletes();
  if (f !== 0) {
    writer.writeUint64(
      16,
      f
    );
  }
};


/**
 * optional uint64 addsCounter = 1;
 * @return {number}
 */
proto.LmdbCache.ReplicaCounters.prototype.getAddscounter = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.LmdbCache.ReplicaCounters.prototype.setAddscounter = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 deletesCounter = 2;
 * @return {number}
 */
proto.LmdbCache.ReplicaCounters.prototype.getDeletescounter = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.LmdbCache.ReplicaCounters.prototype.setDeletescounter = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 copysCounter = 3;
 * @return {number}
 */
proto.LmdbCache.ReplicaCounters.prototype.getCopyscounter = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.LmdbCache.ReplicaCounters.prototype.setCopyscounter = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 getCounter = 4;
 * @return {number}
 */
proto.LmdbCache.ReplicaCounters.prototype.getGetcounter = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.LmdbCache.ReplicaCounters.prototype.setGetcounter = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 containsCounter = 5;
 * @return {number}
 */
proto.LmdbCache.ReplicaCounters.prototype.getContainscounter = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.LmdbCache.ReplicaCounters.prototype.setContainscounter = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint64 keySearchCounter = 6;
 * @return {number}
 */
proto.LmdbCache.ReplicaCounters.prototype.getKeysearchcounter = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.LmdbCache.ReplicaCounters.prototype.setKeysearchcounter = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint64 metadataSearchCounter = 7;
 * @return {number}
 */
proto.LmdbCache.ReplicaCounters.prototype.getMetadatasearchcounter = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.LmdbCache.ReplicaCounters.prototype.setMetadatasearchcounter = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint64 pageSearchCounter = 8;
 * @return {number}
 */
proto.LmdbCache.ReplicaCounters.prototype.getPagesearchcounter = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.LmdbCache.ReplicaCounters.prototype.setPagesearchcounter = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional uint32 largestKeySize = 10;
 * @return {number}
 */
proto.LmdbCache.ReplicaCounters.prototype.getLargestkeysize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.LmdbCache.ReplicaCounters.prototype.setLargestkeysize = function(value) {
  jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional uint32 largestValueSize = 11;
 * @return {number}
 */
proto.LmdbCache.ReplicaCounters.prototype.getLargestvaluesize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.LmdbCache.ReplicaCounters.prototype.setLargestvaluesize = function(value) {
  jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional uint64 replicatedAdds = 15;
 * @return {number}
 */
proto.LmdbCache.ReplicaCounters.prototype.getReplicatedadds = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/** @param {number} value */
proto.LmdbCache.ReplicaCounters.prototype.setReplicatedadds = function(value) {
  jspb.Message.setProto3IntField(this, 15, value);
};


/**
 * optional uint64 replicatedDeletes = 16;
 * @return {number}
 */
proto.LmdbCache.ReplicaCounters.prototype.getReplicateddeletes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/** @param {number} value */
proto.LmdbCache.ReplicaCounters.prototype.setReplicateddeletes = function(value) {
  jspb.Message.setProto3IntField(this, 16, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LmdbCache.CollectedStats = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.LmdbCache.CollectedStats, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.LmdbCache.CollectedStats.displayName = 'proto.LmdbCache.CollectedStats';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LmdbCache.CollectedStats.prototype.toObject = function(opt_includeInstance) {
  return proto.LmdbCache.CollectedStats.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LmdbCache.CollectedStats} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LmdbCache.CollectedStats.toObject = function(includeInstance, msg) {
  var f, obj = {
    nonexpiredkeys: jspb.Message.getFieldWithDefault(msg, 10, 0),
    allkeys: jspb.Message.getFieldWithDefault(msg, 11, 0),
    activekeys: jspb.Message.getFieldWithDefault(msg, 12, 0),
    deletedkeys: jspb.Message.getFieldWithDefault(msg, 13, 0),
    expiredkeys: jspb.Message.getFieldWithDefault(msg, 14, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LmdbCache.CollectedStats}
 */
proto.LmdbCache.CollectedStats.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LmdbCache.CollectedStats;
  return proto.LmdbCache.CollectedStats.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LmdbCache.CollectedStats} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LmdbCache.CollectedStats}
 */
proto.LmdbCache.CollectedStats.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 10:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNonexpiredkeys(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAllkeys(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setActivekeys(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setDeletedkeys(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setExpiredkeys(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LmdbCache.CollectedStats.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LmdbCache.CollectedStats.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LmdbCache.CollectedStats} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LmdbCache.CollectedStats.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNonexpiredkeys();
  if (f !== 0) {
    writer.writeUint64(
      10,
      f
    );
  }
  f = message.getAllkeys();
  if (f !== 0) {
    writer.writeUint64(
      11,
      f
    );
  }
  f = message.getActivekeys();
  if (f !== 0) {
    writer.writeUint64(
      12,
      f
    );
  }
  f = message.getDeletedkeys();
  if (f !== 0) {
    writer.writeUint64(
      13,
      f
    );
  }
  f = message.getExpiredkeys();
  if (f !== 0) {
    writer.writeUint64(
      14,
      f
    );
  }
};


/**
 * optional uint64 nonExpiredKeys = 10;
 * @return {number}
 */
proto.LmdbCache.CollectedStats.prototype.getNonexpiredkeys = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.LmdbCache.CollectedStats.prototype.setNonexpiredkeys = function(value) {
  jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional uint64 allKeys = 11;
 * @return {number}
 */
proto.LmdbCache.CollectedStats.prototype.getAllkeys = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.LmdbCache.CollectedStats.prototype.setAllkeys = function(value) {
  jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional uint64 activeKeys = 12;
 * @return {number}
 */
proto.LmdbCache.CollectedStats.prototype.getActivekeys = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {number} value */
proto.LmdbCache.CollectedStats.prototype.setActivekeys = function(value) {
  jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional uint64 deletedKeys = 13;
 * @return {number}
 */
proto.LmdbCache.CollectedStats.prototype.getDeletedkeys = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {number} value */
proto.LmdbCache.CollectedStats.prototype.setDeletedkeys = function(value) {
  jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional uint64 expiredKeys = 14;
 * @return {number}
 */
proto.LmdbCache.CollectedStats.prototype.getExpiredkeys = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/** @param {number} value */
proto.LmdbCache.CollectedStats.prototype.setExpiredkeys = function(value) {
  jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * @enum {number}
 */
proto.LmdbCache.LightningDbSyncMode = {
  FSYNC: 0,
  ASYNC: 1,
  NOSYNC: 2,
  READONLY: 3
};

goog.object.extend(exports, proto.LmdbCache);
