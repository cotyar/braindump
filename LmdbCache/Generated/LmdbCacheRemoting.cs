// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: lmdb_cache_remoting.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace LmdbCache {

  /// <summary>Holder for reflection information generated from lmdb_cache_remoting.proto</summary>
  public static partial class LmdbCacheRemotingReflection {

    #region Descriptor
    /// <summary>File descriptor for lmdb_cache_remoting.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static LmdbCacheRemotingReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChlsbWRiX2NhY2hlX3JlbW90aW5nLnByb3RvEglMbWRiQ2FjaGUiwQEKD0xp",
            "Z2h0bmluZ0NvbmZpZxIMCgRuYW1lGAEgASgJEhQKDHN0b3JhZ2VMaW1pdBgC",
            "IAEoBBIRCgltYXhUYWJsZXMYAyABKA0SJQodd3JpdGVCYXRjaFRpbWVvdXRN",
            "aWxsaXNlY29uZHMYBCABKA0SHgoWd3JpdGVCYXRjaE1heERlbGVnYXRlcxgF",
            "IAEoDRIwCghzeW5jTW9kZRgGIAEoDjIeLkxtZGJDYWNoZS5MaWdodG5pbmdE",
            "YlN5bmNNb2RlIuwBCg1SZXBsaWNhQ29uZmlnEhEKCXJlcGxpY2FJZBgBIAEo",
            "CRIQCghob3N0TmFtZRgCIAEoCRIMCgRwb3J0GAMgASgNEhEKCXdlYlVJUG9y",
            "dBgEIAEoDRIXCg9yZXBsaWNhdGlvblBvcnQYBSABKA0SGwoTcmVwbGljYXRp",
            "b25QYWdlU2l6ZRgGIAEoDRIWCg5tb25pdG9yaW5nUG9ydBgHIAEoDRISCgpt",
            "YXN0ZXJOb2RlGAogASgJEjMKD2xpZ2h0bmluZ0NvbmZpZxgPIAEoCzIaLkxt",
            "ZGJDYWNoZS5MaWdodG5pbmdDb25maWciBwoFRW1wdHkiIwoJVGltZXN0YW1w",
            "EhYKDnRpY2tzT2Zmc2V0VXRjGAEgASgEIo4BCgtWZWN0b3JDbG9jaxI2Cghy",
            "ZXBsaWNhcxgBIAMoCzIkLkxtZGJDYWNoZS5WZWN0b3JDbG9jay5SZXBsaWNh",
            "c0VudHJ5EhYKDnRpY2tzT2Zmc2V0VXRjGAIgASgEGi8KDVJlcGxpY2FzRW50",
            "cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgEOgI4ASKzAwoKS3ZNZXRh",
            "ZGF0YRIsCgZzdGF0dXMYASABKA4yHC5MbWRiQ2FjaGUuS3ZNZXRhZGF0YS5T",
            "dGF0dXMSJAoGZXhwaXJ5GAIgASgLMhQuTG1kYkNhY2hlLlRpbWVzdGFtcBIn",
            "Cgd1cGRhdGVkGAMgASgLMhYuTG1kYkNhY2hlLlZlY3RvckNsb2NrEjIKBmFj",
            "dGlvbhgEIAEoDjIiLkxtZGJDYWNoZS5Ldk1ldGFkYXRhLlVwZGF0ZUFjdGlv",
            "bhI2Cgtjb21wcmVzc2lvbhgFIAEoDjIhLkxtZGJDYWNoZS5Ldk1ldGFkYXRh",
            "LkNvbXByZXNzaW9uEhEKCXZhbHVlU2l6ZRgGIAEoDRIVCg1jb3JyZWxhdGlv",
            "bklkGAcgASgJIi4KBlN0YXR1cxIKCgZBQ1RJVkUQABILCgdERUxFVEVEEAES",
            "CwoHRVhQSVJFRBACIjYKDFVwZGF0ZUFjdGlvbhIJCgVBRERFRBAAEgsKB1VQ",
            "REFURUQQARIOCgpSRVBMSUNBVEVEEAIiKgoLQ29tcHJlc3Npb24SCAoETk9O",
            "RRAAEgcKA0xaNBABEggKBEdaSVAQAiLQAgoKQWRkUmVxdWVzdBIsCgZoZWFk",
            "ZXIYASABKAsyHC5MbWRiQ2FjaGUuQWRkUmVxdWVzdC5IZWFkZXISNgoHZW50",
            "cmllcxgFIAMoCzIlLkxtZGJDYWNoZS5BZGRSZXF1ZXN0LkFkZFJlcXVlc3RF",
            "bnRyeRqGAQoGSGVhZGVyEhgKEG92ZXJyaWRlRXhpc3RpbmcYASABKAgSNgoL",
            "Y29tcHJlc3Npb24YAiABKA4yIS5MbWRiQ2FjaGUuS3ZNZXRhZGF0YS5Db21w",
            "cmVzc2lvbhIVCg1jb3JyZWxhdGlvbklkGAMgASgJEhMKC2NodW5rc0NvdW50",
            "GAQgASgNGlMKD0FkZFJlcXVlc3RFbnRyeRILCgNrZXkYASABKAkSJAoGZXhw",
            "aXJ5GAIgASgLMhQuTG1kYkNhY2hlLlRpbWVzdGFtcBINCgV2YWx1ZRgDIAEo",
            "DCKSAQoLQWRkUmVzcG9uc2USMQoHcmVzdWx0cxgBIAMoDjIgLkxtZGJDYWNo",
            "ZS5BZGRSZXNwb25zZS5BZGRSZXN1bHQiUAoJQWRkUmVzdWx0Eg0KCUtFWV9B",
            "RERFRBAAEg8KC0tFWV9VUERBVEVEEAESFgoSS0VZX0FMUkVBRFlfRVhJU1RT",
            "EAISCwoHRkFJTFVSRRADItMBChBBZGRTdHJlYW1SZXF1ZXN0Ei4KBmhlYWRl",
            "chgBIAEoCzIcLkxtZGJDYWNoZS5BZGRSZXF1ZXN0LkhlYWRlckgAEjYKBWNo",
            "dW5rGAIgASgLMiUuTG1kYkNhY2hlLkFkZFN0cmVhbVJlcXVlc3QuRGF0YUNo",
            "dW5rSAAaUAoJRGF0YUNodW5rEg0KBWluZGV4GAEgASgNEjQKBWVudHJ5GAIg",
            "ASgLMiUuTG1kYkNhY2hlLkFkZFJlcXVlc3QuQWRkUmVxdWVzdEVudHJ5QgUK",
            "A21zZyI0Cg1EZWxldGVSZXF1ZXN0EhUKDWNvcnJlbGF0aW9uSWQYASABKAkS",
            "DAoEa2V5cxgCIAMoCSKCAQoORGVsZXRlUmVzcG9uc2USNwoHcmVzdWx0cxgB",
            "IAMoDjImLkxtZGJDYWNoZS5EZWxldGVSZXNwb25zZS5EZWxldGVSZXN1bHQi",
            "NwoMRGVsZXRlUmVzdWx0EgsKB1NVQ0NFU1MQABINCglOT1RfRk9VTkQQARIL",
            "CgdGQUlMVVJFEAIiMQoKR2V0UmVxdWVzdBIVCg1jb3JyZWxhdGlvbklkGAEg",
            "ASgJEgwKBGtleXMYAiADKAkiqwIKC0dldFJlc3BvbnNlEjgKB3Jlc3VsdHMY",
            "ASADKAsyJy5MbWRiQ2FjaGUuR2V0UmVzcG9uc2UuR2V0UmVzcG9uc2VFbnRy",
            "eRrhAQoQR2V0UmVzcG9uc2VFbnRyeRJBCgZyZXN1bHQYASABKA4yMS5MbWRi",
            "Q2FjaGUuR2V0UmVzcG9uc2UuR2V0UmVzcG9uc2VFbnRyeS5HZXRSZXN1bHQS",
            "DQoFaW5kZXgYAiABKA0SNgoLY29tcHJlc3Npb24YAyABKA4yIS5MbWRiQ2Fj",
            "aGUuS3ZNZXRhZGF0YS5Db21wcmVzc2lvbhINCgV2YWx1ZRgFIAEoDCI0CglH",
            "ZXRSZXN1bHQSCwoHU1VDQ0VTUxAAEg0KCU5PVF9GT1VORBABEgsKB0ZBSUxV",
            "UkUQAiJMChFHZXRTdHJlYW1SZXNwb25zZRI3CgZyZXN1bHQYASABKAsyJy5M",
            "bWRiQ2FjaGUuR2V0UmVzcG9uc2UuR2V0UmVzcG9uc2VFbnRyeSInChRDb250",
            "YWluc0tleXNSZXNwb25zZRIPCgdyZXN1bHRzGAEgAygIIrgBCgtDb3B5UmVx",
            "dWVzdBIVCg1jb3JyZWxhdGlvbklkGAEgASgJEjgKB2VudHJpZXMYAiADKAsy",
            "Jy5MbWRiQ2FjaGUuQ29weVJlcXVlc3QuQ29weVJlcXVlc3RFbnRyeRpYChBD",
            "b3B5UmVxdWVzdEVudHJ5Eg8KB2tleUZyb20YASABKAkSJAoGZXhwaXJ5GAIg",
            "ASgLMhQuTG1kYkNhY2hlLlRpbWVzdGFtcBINCgVrZXlUbxgDIAEoCSKWAQoM",
            "Q29weVJlc3BvbnNlEjMKB3Jlc3VsdHMYASADKA4yIi5MbWRiQ2FjaGUuQ29w",
            "eVJlc3BvbnNlLkNvcHlSZXN1bHQiUQoKQ29weVJlc3VsdBILCgdTVUNDRVNT",
            "EAASFgoSRlJPTV9LRVlfTk9UX0ZPVU5EEAESEQoNVE9fS0VZX0VYSVNUUxAC",
            "EgsKB0ZBSUxVUkUQAyJaCg5LZXlMaXN0UmVxdWVzdBIRCglrZXlQcmVmaXgY",
            "ASABKAkSEAoIcGFnZVNpemUYAiABKA0SDAoEcGFnZRgDIAEoDRIVCg1jb3Jy",
            "ZWxhdGlvbklkGAQgASgJIh4KD0tleUxpc3RSZXNwb25zZRILCgNrZXkYASAB",
            "KAkiMgoUS2V5VmFsdWVMaXN0UmVzcG9uc2USCwoDa2V5GAEgASgJEg0KBXZh",
            "bHVlGAMgASgMItYCCg1Xcml0ZUxvZ0V2ZW50EiUKBWNsb2NrGAEgASgLMhYu",
            "TG1kYkNhY2hlLlZlY3RvckNsb2NrEhUKDWNvcnJlbGF0aW9uSWQYAiABKAkS",
            "GwoTb3JpZ2luYXRvclJlcGxpY2FJZBgDIAEoCRI6Cgd1cGRhdGVkGAUgASgL",
            "MicuTG1kYkNhY2hlLldyaXRlTG9nRXZlbnQuQWRkZWRPclVwZGF0ZWRIABIz",
            "CgdkZWxldGVkGAcgASgLMiAuTG1kYkNhY2hlLldyaXRlTG9nRXZlbnQuRGVs",
            "ZXRlZEgAGlIKDkFkZGVkT3JVcGRhdGVkEgsKA2tleRgBIAEoCRIkCgZleHBp",
            "cnkYAiABKAsyFC5MbWRiQ2FjaGUuVGltZXN0YW1wEg0KBXZhbHVlGAMgASgM",
            "GhYKB0RlbGV0ZWQSCwoDa2V5GAEgASgJQg0KC2xvZ2dlZEV2ZW50IikKFEdl",
            "dFJlcGxpY2FJZFJlc3BvbnNlEhEKCXJlcGxpY2FJZBgBIAEoCSJPCg9TeW5j",
            "RnJvbVJlcXVlc3QSEQoJcmVwbGljYUlkGAEgASgJEhMKC2luY2x1ZGVNaW5l",
            "GAIgASgIEhQKDGluY2x1ZGVBY2tlZBgDIAEoCCJQChRTeW5jU3Vic2NyaWJl",
            "UmVxdWVzdBIRCglyZXBsaWNhSWQYASABKAkSJQoFc2luY2UYAiABKAsyFi5M",
            "bWRiQ2FjaGUuVmVjdG9yQ2xvY2siOgoMU3luY1Jlc3BvbnNlEioKCGxvZ0V2",
            "ZW50GAEgASgLMhguTG1kYkNhY2hlLldyaXRlTG9nRXZlbnQiIQoOU3luY0Fj",
            "a1JlcXVlc3QSDwoHZXZlbnRJZBgBIAEoBCIwChdNb25pdG9yaW5nVXBkYXRl",
            "UmVxdWVzdBIVCg1jb3JyZWxhdGlvbklkGAEgASgJIkQKGE1vbml0b3JpbmdV",
            "cGRhdGVSZXNwb25zZRIoCgZzdGF0dXMYASABKAsyGC5MbWRiQ2FjaGUuUmVw",
            "bGljYVN0YXR1cyLBAgoNUmVwbGljYVN0YXR1cxIRCglyZXBsaWNhSWQYASAB",
            "KAkSOAoOY29ubmVjdGlvbkluZm8YAiABKAsyIC5MbWRiQ2FjaGUuUmVwbGlj",
            "YUNvbm5lY3Rpb25JbmZvEiUKB3N0YXJ0ZWQYAyABKAsyFC5MbWRiQ2FjaGUu",
            "VGltZXN0YW1wEi8KDXJlcGxpY2FDb25maWcYBCABKAsyGC5MbWRiQ2FjaGUu",
            "UmVwbGljYUNvbmZpZxIsCgxjdXJyZW50Q2xvY2sYBSABKAsyFi5MbWRiQ2Fj",
            "aGUuVmVjdG9yQ2xvY2sSLAoIY291bnRlcnMYCiABKAsyGi5MbWRiQ2FjaGUu",
            "UmVwbGljYUNvdW50ZXJzEi8KDWNsdXN0ZXJTdGF0dXMYCyABKAsyGC5MbWRi",
            "Q2FjaGUuQ2x1c3RlclN0YXR1cyKcAQoNQ2x1c3RlclN0YXR1cxI4CghyZXBs",
            "aWNhcxgBIAMoCzImLkxtZGJDYWNoZS5DbHVzdGVyU3RhdHVzLlJlcGxpY2Fz",
            "RW50cnkaUQoNUmVwbGljYXNFbnRyeRILCgNrZXkYASABKAkSLwoFdmFsdWUY",
            "AiABKAsyIC5MbWRiQ2FjaGUuUmVwbGljYUNvbm5lY3Rpb25JbmZvOgI4ASIz",
            "ChVSZXBsaWNhQ29ubmVjdGlvbkluZm8SDAoEaG9zdBgBIAEoCRIMCgRwb3J0",
            "GAIgASgNIp8BCg9SZXBsaWNhQ291bnRlcnMSEwoLYWRkc0NvdW50ZXIYDCAB",
            "KAQSFgoOZGVsZXRlc0NvdW50ZXIYDSABKAQSEgoKZ2V0Q291bnRlchgOIAEo",
            "BBIXCg9jb250YWluc0NvdW50ZXIYDyABKAQSGAoQa2V5U2VhcmNoQ291bnRl",
            "chgQIAEoBBIYChBsYXJnZXN0VmFsdWVTZWVuGBQgASgEKkUKE0xpZ2h0bmlu",
            "Z0RiU3luY01vZGUSCQoFRlN5bmMQABIJCgVBc3luYxABEgoKBk5vU3luYxAC",
            "EgwKCFJlYWRPbmx5EAMy7AQKEExtZGJDYWNoZVNlcnZpY2USNgoDQWRkEhUu",
            "TG1kYkNhY2hlLkFkZFJlcXVlc3QaFi5MbWRiQ2FjaGUuQWRkUmVzcG9uc2Ui",
            "ABJECglBZGRTdHJlYW0SGy5MbWRiQ2FjaGUuQWRkU3RyZWFtUmVxdWVzdBoW",
            "LkxtZGJDYWNoZS5BZGRSZXNwb25zZSIAKAESPwoGRGVsZXRlEhguTG1kYkNh",
            "Y2hlLkRlbGV0ZVJlcXVlc3QaGS5MbWRiQ2FjaGUuRGVsZXRlUmVzcG9uc2Ui",
            "ABI5CgRDb3B5EhYuTG1kYkNhY2hlLkNvcHlSZXF1ZXN0GhcuTG1kYkNhY2hl",
            "LkNvcHlSZXNwb25zZSIAEjYKA0dldBIVLkxtZGJDYWNoZS5HZXRSZXF1ZXN0",
            "GhYuTG1kYkNhY2hlLkdldFJlc3BvbnNlIgASRAoJR2V0U3RyZWFtEhUuTG1k",
            "YkNhY2hlLkdldFJlcXVlc3QaHC5MbWRiQ2FjaGUuR2V0U3RyZWFtUmVzcG9u",
            "c2UiADABEkgKDENvbnRhaW5zS2V5cxIVLkxtZGJDYWNoZS5HZXRSZXF1ZXN0",
            "Gh8uTG1kYkNhY2hlLkNvbnRhaW5zS2V5c1Jlc3BvbnNlIgASRQoITGlzdEtl",
            "eXMSGS5MbWRiQ2FjaGUuS2V5TGlzdFJlcXVlc3QaGi5MbWRiQ2FjaGUuS2V5",
            "TGlzdFJlc3BvbnNlIgAwARJPCg1MaXN0S2V5VmFsdWVzEhkuTG1kYkNhY2hl",
            "LktleUxpc3RSZXF1ZXN0Gh8uTG1kYkNhY2hlLktleVZhbHVlTGlzdFJlc3Bv",
            "bnNlIgAwATKaAgoLU3luY1NlcnZpY2USQwoMR2V0UmVwbGljYUlkEhAuTG1k",
            "YkNhY2hlLkVtcHR5Gh8uTG1kYkNhY2hlLkdldFJlcGxpY2FJZFJlc3BvbnNl",
            "IgASQwoIU3luY0Zyb20SGi5MbWRiQ2FjaGUuU3luY0Zyb21SZXF1ZXN0Ghcu",
            "TG1kYkNhY2hlLlN5bmNSZXNwb25zZSIAMAESSQoJU3Vic2NyaWJlEh8uTG1k",
            "YkNhY2hlLlN5bmNTdWJzY3JpYmVSZXF1ZXN0GhcuTG1kYkNhY2hlLlN5bmNS",
            "ZXNwb25zZSIAMAESNgoDQWNrEhkuTG1kYkNhY2hlLlN5bmNBY2tSZXF1ZXN0",
            "GhAuTG1kYkNhY2hlLkVtcHR5IgAoATLFAQoRTW9uaXRvcmluZ1NlcnZpY2US",
            "VgoJR2V0U3RhdHVzEiIuTG1kYkNhY2hlLk1vbml0b3JpbmdVcGRhdGVSZXF1",
            "ZXN0GiMuTG1kYkNhY2hlLk1vbml0b3JpbmdVcGRhdGVSZXNwb25zZSIAElgK",
            "CVN1YnNjcmliZRIiLkxtZGJDYWNoZS5Nb25pdG9yaW5nVXBkYXRlUmVxdWVz",
            "dBojLkxtZGJDYWNoZS5Nb25pdG9yaW5nVXBkYXRlUmVzcG9uc2UiADABQgyq",
            "AglMbWRiQ2FjaGViBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::LmdbCache.LightningDbSyncMode), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::LmdbCache.LightningConfig), global::LmdbCache.LightningConfig.Parser, new[]{ "Name", "StorageLimit", "MaxTables", "WriteBatchTimeoutMilliseconds", "WriteBatchMaxDelegates", "SyncMode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LmdbCache.ReplicaConfig), global::LmdbCache.ReplicaConfig.Parser, new[]{ "ReplicaId", "HostName", "Port", "WebUIPort", "ReplicationPort", "ReplicationPageSize", "MonitoringPort", "MasterNode", "LightningConfig" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LmdbCache.Empty), global::LmdbCache.Empty.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LmdbCache.Timestamp), global::LmdbCache.Timestamp.Parser, new[]{ "TicksOffsetUtc" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LmdbCache.VectorClock), global::LmdbCache.VectorClock.Parser, new[]{ "Replicas", "TicksOffsetUtc" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::LmdbCache.KvMetadata), global::LmdbCache.KvMetadata.Parser, new[]{ "Status", "Expiry", "Updated", "Action", "Compression", "ValueSize", "CorrelationId" }, null, new[]{ typeof(global::LmdbCache.KvMetadata.Types.Status), typeof(global::LmdbCache.KvMetadata.Types.UpdateAction), typeof(global::LmdbCache.KvMetadata.Types.Compression) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LmdbCache.AddRequest), global::LmdbCache.AddRequest.Parser, new[]{ "Header", "Entries" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::LmdbCache.AddRequest.Types.Header), global::LmdbCache.AddRequest.Types.Header.Parser, new[]{ "OverrideExisting", "Compression", "CorrelationId", "ChunksCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LmdbCache.AddRequest.Types.AddRequestEntry), global::LmdbCache.AddRequest.Types.AddRequestEntry.Parser, new[]{ "Key", "Expiry", "Value" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::LmdbCache.AddResponse), global::LmdbCache.AddResponse.Parser, new[]{ "Results" }, null, new[]{ typeof(global::LmdbCache.AddResponse.Types.AddResult) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LmdbCache.AddStreamRequest), global::LmdbCache.AddStreamRequest.Parser, new[]{ "Header", "Chunk" }, new[]{ "Msg" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::LmdbCache.AddStreamRequest.Types.DataChunk), global::LmdbCache.AddStreamRequest.Types.DataChunk.Parser, new[]{ "Index", "Entry" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::LmdbCache.DeleteRequest), global::LmdbCache.DeleteRequest.Parser, new[]{ "CorrelationId", "Keys" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LmdbCache.DeleteResponse), global::LmdbCache.DeleteResponse.Parser, new[]{ "Results" }, null, new[]{ typeof(global::LmdbCache.DeleteResponse.Types.DeleteResult) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LmdbCache.GetRequest), global::LmdbCache.GetRequest.Parser, new[]{ "CorrelationId", "Keys" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LmdbCache.GetResponse), global::LmdbCache.GetResponse.Parser, new[]{ "Results" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::LmdbCache.GetResponse.Types.GetResponseEntry), global::LmdbCache.GetResponse.Types.GetResponseEntry.Parser, new[]{ "Result", "Index", "Compression", "Value" }, null, new[]{ typeof(global::LmdbCache.GetResponse.Types.GetResponseEntry.Types.GetResult) }, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::LmdbCache.GetStreamResponse), global::LmdbCache.GetStreamResponse.Parser, new[]{ "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LmdbCache.ContainsKeysResponse), global::LmdbCache.ContainsKeysResponse.Parser, new[]{ "Results" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LmdbCache.CopyRequest), global::LmdbCache.CopyRequest.Parser, new[]{ "CorrelationId", "Entries" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::LmdbCache.CopyRequest.Types.CopyRequestEntry), global::LmdbCache.CopyRequest.Types.CopyRequestEntry.Parser, new[]{ "KeyFrom", "Expiry", "KeyTo" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::LmdbCache.CopyResponse), global::LmdbCache.CopyResponse.Parser, new[]{ "Results" }, null, new[]{ typeof(global::LmdbCache.CopyResponse.Types.CopyResult) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LmdbCache.KeyListRequest), global::LmdbCache.KeyListRequest.Parser, new[]{ "KeyPrefix", "PageSize", "Page", "CorrelationId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LmdbCache.KeyListResponse), global::LmdbCache.KeyListResponse.Parser, new[]{ "Key" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LmdbCache.KeyValueListResponse), global::LmdbCache.KeyValueListResponse.Parser, new[]{ "Key", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LmdbCache.WriteLogEvent), global::LmdbCache.WriteLogEvent.Parser, new[]{ "Clock", "CorrelationId", "OriginatorReplicaId", "Updated", "Deleted" }, new[]{ "LoggedEvent" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::LmdbCache.WriteLogEvent.Types.AddedOrUpdated), global::LmdbCache.WriteLogEvent.Types.AddedOrUpdated.Parser, new[]{ "Key", "Expiry", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LmdbCache.WriteLogEvent.Types.Deleted), global::LmdbCache.WriteLogEvent.Types.Deleted.Parser, new[]{ "Key" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::LmdbCache.GetReplicaIdResponse), global::LmdbCache.GetReplicaIdResponse.Parser, new[]{ "ReplicaId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LmdbCache.SyncFromRequest), global::LmdbCache.SyncFromRequest.Parser, new[]{ "ReplicaId", "IncludeMine", "IncludeAcked" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LmdbCache.SyncSubscribeRequest), global::LmdbCache.SyncSubscribeRequest.Parser, new[]{ "ReplicaId", "Since" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LmdbCache.SyncResponse), global::LmdbCache.SyncResponse.Parser, new[]{ "LogEvent" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LmdbCache.SyncAckRequest), global::LmdbCache.SyncAckRequest.Parser, new[]{ "EventId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LmdbCache.MonitoringUpdateRequest), global::LmdbCache.MonitoringUpdateRequest.Parser, new[]{ "CorrelationId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LmdbCache.MonitoringUpdateResponse), global::LmdbCache.MonitoringUpdateResponse.Parser, new[]{ "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LmdbCache.ReplicaStatus), global::LmdbCache.ReplicaStatus.Parser, new[]{ "ReplicaId", "ConnectionInfo", "Started", "ReplicaConfig", "CurrentClock", "Counters", "ClusterStatus" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LmdbCache.ClusterStatus), global::LmdbCache.ClusterStatus.Parser, new[]{ "Replicas" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::LmdbCache.ReplicaConnectionInfo), global::LmdbCache.ReplicaConnectionInfo.Parser, new[]{ "Host", "Port" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LmdbCache.ReplicaCounters), global::LmdbCache.ReplicaCounters.Parser, new[]{ "AddsCounter", "DeletesCounter", "GetCounter", "ContainsCounter", "KeySearchCounter", "LargestValueSeen" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum LightningDbSyncMode {
    /// <summary>
    /// SAFE
    /// </summary>
    [pbr::OriginalName("FSync")] Fsync = 0,
    /// <summary>
    /// SANE
    /// </summary>
    [pbr::OriginalName("Async")] Async = 1,
    /// <summary>
    /// INSANE
    /// </summary>
    [pbr::OriginalName("NoSync")] NoSync = 2,
    [pbr::OriginalName("ReadOnly")] ReadOnly = 3,
  }

  #endregion

  #region Messages
  public sealed partial class LightningConfig : pb::IMessage<LightningConfig> {
    private static readonly pb::MessageParser<LightningConfig> _parser = new pb::MessageParser<LightningConfig>(() => new LightningConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LightningConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LmdbCache.LmdbCacheRemotingReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LightningConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LightningConfig(LightningConfig other) : this() {
      name_ = other.name_;
      storageLimit_ = other.storageLimit_;
      maxTables_ = other.maxTables_;
      writeBatchTimeoutMilliseconds_ = other.writeBatchTimeoutMilliseconds_;
      writeBatchMaxDelegates_ = other.writeBatchMaxDelegates_;
      syncMode_ = other.syncMode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LightningConfig Clone() {
      return new LightningConfig(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "storageLimit" field.</summary>
    public const int StorageLimitFieldNumber = 2;
    private ulong storageLimit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong StorageLimit {
      get { return storageLimit_; }
      set {
        storageLimit_ = value;
      }
    }

    /// <summary>Field number for the "maxTables" field.</summary>
    public const int MaxTablesFieldNumber = 3;
    private uint maxTables_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxTables {
      get { return maxTables_; }
      set {
        maxTables_ = value;
      }
    }

    /// <summary>Field number for the "writeBatchTimeoutMilliseconds" field.</summary>
    public const int WriteBatchTimeoutMillisecondsFieldNumber = 4;
    private uint writeBatchTimeoutMilliseconds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint WriteBatchTimeoutMilliseconds {
      get { return writeBatchTimeoutMilliseconds_; }
      set {
        writeBatchTimeoutMilliseconds_ = value;
      }
    }

    /// <summary>Field number for the "writeBatchMaxDelegates" field.</summary>
    public const int WriteBatchMaxDelegatesFieldNumber = 5;
    private uint writeBatchMaxDelegates_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint WriteBatchMaxDelegates {
      get { return writeBatchMaxDelegates_; }
      set {
        writeBatchMaxDelegates_ = value;
      }
    }

    /// <summary>Field number for the "syncMode" field.</summary>
    public const int SyncModeFieldNumber = 6;
    private global::LmdbCache.LightningDbSyncMode syncMode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LmdbCache.LightningDbSyncMode SyncMode {
      get { return syncMode_; }
      set {
        syncMode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LightningConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LightningConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (StorageLimit != other.StorageLimit) return false;
      if (MaxTables != other.MaxTables) return false;
      if (WriteBatchTimeoutMilliseconds != other.WriteBatchTimeoutMilliseconds) return false;
      if (WriteBatchMaxDelegates != other.WriteBatchMaxDelegates) return false;
      if (SyncMode != other.SyncMode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (StorageLimit != 0UL) hash ^= StorageLimit.GetHashCode();
      if (MaxTables != 0) hash ^= MaxTables.GetHashCode();
      if (WriteBatchTimeoutMilliseconds != 0) hash ^= WriteBatchTimeoutMilliseconds.GetHashCode();
      if (WriteBatchMaxDelegates != 0) hash ^= WriteBatchMaxDelegates.GetHashCode();
      if (SyncMode != 0) hash ^= SyncMode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (StorageLimit != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(StorageLimit);
      }
      if (MaxTables != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(MaxTables);
      }
      if (WriteBatchTimeoutMilliseconds != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(WriteBatchTimeoutMilliseconds);
      }
      if (WriteBatchMaxDelegates != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(WriteBatchMaxDelegates);
      }
      if (SyncMode != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) SyncMode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (StorageLimit != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(StorageLimit);
      }
      if (MaxTables != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxTables);
      }
      if (WriteBatchTimeoutMilliseconds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WriteBatchTimeoutMilliseconds);
      }
      if (WriteBatchMaxDelegates != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WriteBatchMaxDelegates);
      }
      if (SyncMode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SyncMode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LightningConfig other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.StorageLimit != 0UL) {
        StorageLimit = other.StorageLimit;
      }
      if (other.MaxTables != 0) {
        MaxTables = other.MaxTables;
      }
      if (other.WriteBatchTimeoutMilliseconds != 0) {
        WriteBatchTimeoutMilliseconds = other.WriteBatchTimeoutMilliseconds;
      }
      if (other.WriteBatchMaxDelegates != 0) {
        WriteBatchMaxDelegates = other.WriteBatchMaxDelegates;
      }
      if (other.SyncMode != 0) {
        SyncMode = other.SyncMode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            StorageLimit = input.ReadUInt64();
            break;
          }
          case 24: {
            MaxTables = input.ReadUInt32();
            break;
          }
          case 32: {
            WriteBatchTimeoutMilliseconds = input.ReadUInt32();
            break;
          }
          case 40: {
            WriteBatchMaxDelegates = input.ReadUInt32();
            break;
          }
          case 48: {
            syncMode_ = (global::LmdbCache.LightningDbSyncMode) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReplicaConfig : pb::IMessage<ReplicaConfig> {
    private static readonly pb::MessageParser<ReplicaConfig> _parser = new pb::MessageParser<ReplicaConfig>(() => new ReplicaConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReplicaConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LmdbCache.LmdbCacheRemotingReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplicaConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplicaConfig(ReplicaConfig other) : this() {
      replicaId_ = other.replicaId_;
      hostName_ = other.hostName_;
      port_ = other.port_;
      webUIPort_ = other.webUIPort_;
      replicationPort_ = other.replicationPort_;
      replicationPageSize_ = other.replicationPageSize_;
      monitoringPort_ = other.monitoringPort_;
      masterNode_ = other.masterNode_;
      lightningConfig_ = other.lightningConfig_ != null ? other.lightningConfig_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplicaConfig Clone() {
      return new ReplicaConfig(this);
    }

    /// <summary>Field number for the "replicaId" field.</summary>
    public const int ReplicaIdFieldNumber = 1;
    private string replicaId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReplicaId {
      get { return replicaId_; }
      set {
        replicaId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "hostName" field.</summary>
    public const int HostNameFieldNumber = 2;
    private string hostName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HostName {
      get { return hostName_; }
      set {
        hostName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 3;
    private uint port_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    /// <summary>Field number for the "webUIPort" field.</summary>
    public const int WebUIPortFieldNumber = 4;
    private uint webUIPort_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint WebUIPort {
      get { return webUIPort_; }
      set {
        webUIPort_ = value;
      }
    }

    /// <summary>Field number for the "replicationPort" field.</summary>
    public const int ReplicationPortFieldNumber = 5;
    private uint replicationPort_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ReplicationPort {
      get { return replicationPort_; }
      set {
        replicationPort_ = value;
      }
    }

    /// <summary>Field number for the "replicationPageSize" field.</summary>
    public const int ReplicationPageSizeFieldNumber = 6;
    private uint replicationPageSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ReplicationPageSize {
      get { return replicationPageSize_; }
      set {
        replicationPageSize_ = value;
      }
    }

    /// <summary>Field number for the "monitoringPort" field.</summary>
    public const int MonitoringPortFieldNumber = 7;
    private uint monitoringPort_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MonitoringPort {
      get { return monitoringPort_; }
      set {
        monitoringPort_ = value;
      }
    }

    /// <summary>Field number for the "masterNode" field.</summary>
    public const int MasterNodeFieldNumber = 10;
    private string masterNode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MasterNode {
      get { return masterNode_; }
      set {
        masterNode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lightningConfig" field.</summary>
    public const int LightningConfigFieldNumber = 15;
    private global::LmdbCache.LightningConfig lightningConfig_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LmdbCache.LightningConfig LightningConfig {
      get { return lightningConfig_; }
      set {
        lightningConfig_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReplicaConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReplicaConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReplicaId != other.ReplicaId) return false;
      if (HostName != other.HostName) return false;
      if (Port != other.Port) return false;
      if (WebUIPort != other.WebUIPort) return false;
      if (ReplicationPort != other.ReplicationPort) return false;
      if (ReplicationPageSize != other.ReplicationPageSize) return false;
      if (MonitoringPort != other.MonitoringPort) return false;
      if (MasterNode != other.MasterNode) return false;
      if (!object.Equals(LightningConfig, other.LightningConfig)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReplicaId.Length != 0) hash ^= ReplicaId.GetHashCode();
      if (HostName.Length != 0) hash ^= HostName.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      if (WebUIPort != 0) hash ^= WebUIPort.GetHashCode();
      if (ReplicationPort != 0) hash ^= ReplicationPort.GetHashCode();
      if (ReplicationPageSize != 0) hash ^= ReplicationPageSize.GetHashCode();
      if (MonitoringPort != 0) hash ^= MonitoringPort.GetHashCode();
      if (MasterNode.Length != 0) hash ^= MasterNode.GetHashCode();
      if (lightningConfig_ != null) hash ^= LightningConfig.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReplicaId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ReplicaId);
      }
      if (HostName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(HostName);
      }
      if (Port != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Port);
      }
      if (WebUIPort != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(WebUIPort);
      }
      if (ReplicationPort != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(ReplicationPort);
      }
      if (ReplicationPageSize != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(ReplicationPageSize);
      }
      if (MonitoringPort != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(MonitoringPort);
      }
      if (MasterNode.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(MasterNode);
      }
      if (lightningConfig_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(LightningConfig);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReplicaId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ReplicaId);
      }
      if (HostName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HostName);
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Port);
      }
      if (WebUIPort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WebUIPort);
      }
      if (ReplicationPort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ReplicationPort);
      }
      if (ReplicationPageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ReplicationPageSize);
      }
      if (MonitoringPort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MonitoringPort);
      }
      if (MasterNode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MasterNode);
      }
      if (lightningConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LightningConfig);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReplicaConfig other) {
      if (other == null) {
        return;
      }
      if (other.ReplicaId.Length != 0) {
        ReplicaId = other.ReplicaId;
      }
      if (other.HostName.Length != 0) {
        HostName = other.HostName;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
      if (other.WebUIPort != 0) {
        WebUIPort = other.WebUIPort;
      }
      if (other.ReplicationPort != 0) {
        ReplicationPort = other.ReplicationPort;
      }
      if (other.ReplicationPageSize != 0) {
        ReplicationPageSize = other.ReplicationPageSize;
      }
      if (other.MonitoringPort != 0) {
        MonitoringPort = other.MonitoringPort;
      }
      if (other.MasterNode.Length != 0) {
        MasterNode = other.MasterNode;
      }
      if (other.lightningConfig_ != null) {
        if (lightningConfig_ == null) {
          lightningConfig_ = new global::LmdbCache.LightningConfig();
        }
        LightningConfig.MergeFrom(other.LightningConfig);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ReplicaId = input.ReadString();
            break;
          }
          case 18: {
            HostName = input.ReadString();
            break;
          }
          case 24: {
            Port = input.ReadUInt32();
            break;
          }
          case 32: {
            WebUIPort = input.ReadUInt32();
            break;
          }
          case 40: {
            ReplicationPort = input.ReadUInt32();
            break;
          }
          case 48: {
            ReplicationPageSize = input.ReadUInt32();
            break;
          }
          case 56: {
            MonitoringPort = input.ReadUInt32();
            break;
          }
          case 82: {
            MasterNode = input.ReadString();
            break;
          }
          case 122: {
            if (lightningConfig_ == null) {
              lightningConfig_ = new global::LmdbCache.LightningConfig();
            }
            input.ReadMessage(lightningConfig_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Empty : pb::IMessage<Empty> {
    private static readonly pb::MessageParser<Empty> _parser = new pb::MessageParser<Empty>(() => new Empty());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Empty> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LmdbCache.LmdbCacheRemotingReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Empty() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Empty(Empty other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Empty Clone() {
      return new Empty(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Empty);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Empty other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Empty other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class Timestamp : pb::IMessage<Timestamp> {
    private static readonly pb::MessageParser<Timestamp> _parser = new pb::MessageParser<Timestamp>(() => new Timestamp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Timestamp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LmdbCache.LmdbCacheRemotingReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Timestamp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Timestamp(Timestamp other) : this() {
      ticksOffsetUtc_ = other.ticksOffsetUtc_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Timestamp Clone() {
      return new Timestamp(this);
    }

    /// <summary>Field number for the "ticksOffsetUtc" field.</summary>
    public const int TicksOffsetUtcFieldNumber = 1;
    private ulong ticksOffsetUtc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TicksOffsetUtc {
      get { return ticksOffsetUtc_; }
      set {
        ticksOffsetUtc_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Timestamp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Timestamp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TicksOffsetUtc != other.TicksOffsetUtc) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TicksOffsetUtc != 0UL) hash ^= TicksOffsetUtc.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TicksOffsetUtc != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(TicksOffsetUtc);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TicksOffsetUtc != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TicksOffsetUtc);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Timestamp other) {
      if (other == null) {
        return;
      }
      if (other.TicksOffsetUtc != 0UL) {
        TicksOffsetUtc = other.TicksOffsetUtc;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TicksOffsetUtc = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// In fact we are following LWWRegister ("Last Write Wins") logic for conflict resolution here
  /// </summary>
  public sealed partial class VectorClock : pb::IMessage<VectorClock> {
    private static readonly pb::MessageParser<VectorClock> _parser = new pb::MessageParser<VectorClock>(() => new VectorClock());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VectorClock> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LmdbCache.LmdbCacheRemotingReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VectorClock() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VectorClock(VectorClock other) : this() {
      replicas_ = other.replicas_.Clone();
      ticksOffsetUtc_ = other.ticksOffsetUtc_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VectorClock Clone() {
      return new VectorClock(this);
    }

    /// <summary>Field number for the "replicas" field.</summary>
    public const int ReplicasFieldNumber = 1;
    private static readonly pbc::MapField<string, ulong>.Codec _map_replicas_codec
        = new pbc::MapField<string, ulong>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForUInt64(16), 10);
    private readonly pbc::MapField<string, ulong> replicas_ = new pbc::MapField<string, ulong>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, ulong> Replicas {
      get { return replicas_; }
    }

    /// <summary>Field number for the "ticksOffsetUtc" field.</summary>
    public const int TicksOffsetUtcFieldNumber = 2;
    private ulong ticksOffsetUtc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TicksOffsetUtc {
      get { return ticksOffsetUtc_; }
      set {
        ticksOffsetUtc_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VectorClock);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VectorClock other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!Replicas.Equals(other.Replicas)) return false;
      if (TicksOffsetUtc != other.TicksOffsetUtc) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= Replicas.GetHashCode();
      if (TicksOffsetUtc != 0UL) hash ^= TicksOffsetUtc.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      replicas_.WriteTo(output, _map_replicas_codec);
      if (TicksOffsetUtc != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(TicksOffsetUtc);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += replicas_.CalculateSize(_map_replicas_codec);
      if (TicksOffsetUtc != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TicksOffsetUtc);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VectorClock other) {
      if (other == null) {
        return;
      }
      replicas_.Add(other.replicas_);
      if (other.TicksOffsetUtc != 0UL) {
        TicksOffsetUtc = other.TicksOffsetUtc;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            replicas_.AddEntriesFrom(input, _map_replicas_codec);
            break;
          }
          case 16: {
            TicksOffsetUtc = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class KvMetadata : pb::IMessage<KvMetadata> {
    private static readonly pb::MessageParser<KvMetadata> _parser = new pb::MessageParser<KvMetadata>(() => new KvMetadata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KvMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LmdbCache.LmdbCacheRemotingReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KvMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KvMetadata(KvMetadata other) : this() {
      status_ = other.status_;
      expiry_ = other.expiry_ != null ? other.expiry_.Clone() : null;
      updated_ = other.updated_ != null ? other.updated_.Clone() : null;
      action_ = other.action_;
      compression_ = other.compression_;
      valueSize_ = other.valueSize_;
      correlationId_ = other.correlationId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KvMetadata Clone() {
      return new KvMetadata(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::LmdbCache.KvMetadata.Types.Status status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LmdbCache.KvMetadata.Types.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "expiry" field.</summary>
    public const int ExpiryFieldNumber = 2;
    private global::LmdbCache.Timestamp expiry_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LmdbCache.Timestamp Expiry {
      get { return expiry_; }
      set {
        expiry_ = value;
      }
    }

    /// <summary>Field number for the "updated" field.</summary>
    public const int UpdatedFieldNumber = 3;
    private global::LmdbCache.VectorClock updated_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LmdbCache.VectorClock Updated {
      get { return updated_; }
      set {
        updated_ = value;
      }
    }

    /// <summary>Field number for the "action" field.</summary>
    public const int ActionFieldNumber = 4;
    private global::LmdbCache.KvMetadata.Types.UpdateAction action_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LmdbCache.KvMetadata.Types.UpdateAction Action {
      get { return action_; }
      set {
        action_ = value;
      }
    }

    /// <summary>Field number for the "compression" field.</summary>
    public const int CompressionFieldNumber = 5;
    private global::LmdbCache.KvMetadata.Types.Compression compression_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LmdbCache.KvMetadata.Types.Compression Compression {
      get { return compression_; }
      set {
        compression_ = value;
      }
    }

    /// <summary>Field number for the "valueSize" field.</summary>
    public const int ValueSizeFieldNumber = 6;
    private uint valueSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ValueSize {
      get { return valueSize_; }
      set {
        valueSize_ = value;
      }
    }

    /// <summary>Field number for the "correlationId" field.</summary>
    public const int CorrelationIdFieldNumber = 7;
    private string correlationId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CorrelationId {
      get { return correlationId_; }
      set {
        correlationId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KvMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KvMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (!object.Equals(Expiry, other.Expiry)) return false;
      if (!object.Equals(Updated, other.Updated)) return false;
      if (Action != other.Action) return false;
      if (Compression != other.Compression) return false;
      if (ValueSize != other.ValueSize) return false;
      if (CorrelationId != other.CorrelationId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (expiry_ != null) hash ^= Expiry.GetHashCode();
      if (updated_ != null) hash ^= Updated.GetHashCode();
      if (Action != 0) hash ^= Action.GetHashCode();
      if (Compression != 0) hash ^= Compression.GetHashCode();
      if (ValueSize != 0) hash ^= ValueSize.GetHashCode();
      if (CorrelationId.Length != 0) hash ^= CorrelationId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (expiry_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Expiry);
      }
      if (updated_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Updated);
      }
      if (Action != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Action);
      }
      if (Compression != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Compression);
      }
      if (ValueSize != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(ValueSize);
      }
      if (CorrelationId.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(CorrelationId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (expiry_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Expiry);
      }
      if (updated_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Updated);
      }
      if (Action != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Action);
      }
      if (Compression != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Compression);
      }
      if (ValueSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ValueSize);
      }
      if (CorrelationId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CorrelationId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KvMetadata other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.expiry_ != null) {
        if (expiry_ == null) {
          expiry_ = new global::LmdbCache.Timestamp();
        }
        Expiry.MergeFrom(other.Expiry);
      }
      if (other.updated_ != null) {
        if (updated_ == null) {
          updated_ = new global::LmdbCache.VectorClock();
        }
        Updated.MergeFrom(other.Updated);
      }
      if (other.Action != 0) {
        Action = other.Action;
      }
      if (other.Compression != 0) {
        Compression = other.Compression;
      }
      if (other.ValueSize != 0) {
        ValueSize = other.ValueSize;
      }
      if (other.CorrelationId.Length != 0) {
        CorrelationId = other.CorrelationId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            status_ = (global::LmdbCache.KvMetadata.Types.Status) input.ReadEnum();
            break;
          }
          case 18: {
            if (expiry_ == null) {
              expiry_ = new global::LmdbCache.Timestamp();
            }
            input.ReadMessage(expiry_);
            break;
          }
          case 26: {
            if (updated_ == null) {
              updated_ = new global::LmdbCache.VectorClock();
            }
            input.ReadMessage(updated_);
            break;
          }
          case 32: {
            action_ = (global::LmdbCache.KvMetadata.Types.UpdateAction) input.ReadEnum();
            break;
          }
          case 40: {
            compression_ = (global::LmdbCache.KvMetadata.Types.Compression) input.ReadEnum();
            break;
          }
          case 48: {
            ValueSize = input.ReadUInt32();
            break;
          }
          case 58: {
            CorrelationId = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the KvMetadata message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Status {
        [pbr::OriginalName("ACTIVE")] Active = 0,
        [pbr::OriginalName("DELETED")] Deleted = 1,
        /// <summary>
        ///    FAILURE             = 3;
        /// </summary>
        [pbr::OriginalName("EXPIRED")] Expired = 2,
      }

      public enum UpdateAction {
        [pbr::OriginalName("ADDED")] Added = 0,
        [pbr::OriginalName("UPDATED")] Updated = 1,
        [pbr::OriginalName("REPLICATED")] Replicated = 2,
      }

      public enum Compression {
        [pbr::OriginalName("NONE")] None = 0,
        [pbr::OriginalName("LZ4")] Lz4 = 1,
        [pbr::OriginalName("GZIP")] Gzip = 2,
      }

    }
    #endregion

  }

  public sealed partial class AddRequest : pb::IMessage<AddRequest> {
    private static readonly pb::MessageParser<AddRequest> _parser = new pb::MessageParser<AddRequest>(() => new AddRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LmdbCache.LmdbCacheRemotingReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddRequest(AddRequest other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      entries_ = other.entries_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddRequest Clone() {
      return new AddRequest(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::LmdbCache.AddRequest.Types.Header header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LmdbCache.AddRequest.Types.Header Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "entries" field.</summary>
    public const int EntriesFieldNumber = 5;
    private static readonly pb::FieldCodec<global::LmdbCache.AddRequest.Types.AddRequestEntry> _repeated_entries_codec
        = pb::FieldCodec.ForMessage(42, global::LmdbCache.AddRequest.Types.AddRequestEntry.Parser);
    private readonly pbc::RepeatedField<global::LmdbCache.AddRequest.Types.AddRequestEntry> entries_ = new pbc::RepeatedField<global::LmdbCache.AddRequest.Types.AddRequestEntry>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::LmdbCache.AddRequest.Types.AddRequestEntry> Entries {
      get { return entries_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if(!entries_.Equals(other.entries_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      hash ^= entries_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      entries_.WriteTo(output, _repeated_entries_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      size += entries_.CalculateSize(_repeated_entries_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddRequest other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          header_ = new global::LmdbCache.AddRequest.Types.Header();
        }
        Header.MergeFrom(other.Header);
      }
      entries_.Add(other.entries_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              header_ = new global::LmdbCache.AddRequest.Types.Header();
            }
            input.ReadMessage(header_);
            break;
          }
          case 42: {
            entries_.AddEntriesFrom(input, _repeated_entries_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the AddRequest message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Header : pb::IMessage<Header> {
        private static readonly pb::MessageParser<Header> _parser = new pb::MessageParser<Header>(() => new Header());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Header> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::LmdbCache.AddRequest.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Header() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Header(Header other) : this() {
          overrideExisting_ = other.overrideExisting_;
          compression_ = other.compression_;
          correlationId_ = other.correlationId_;
          chunksCount_ = other.chunksCount_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Header Clone() {
          return new Header(this);
        }

        /// <summary>Field number for the "overrideExisting" field.</summary>
        public const int OverrideExistingFieldNumber = 1;
        private bool overrideExisting_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool OverrideExisting {
          get { return overrideExisting_; }
          set {
            overrideExisting_ = value;
          }
        }

        /// <summary>Field number for the "compression" field.</summary>
        public const int CompressionFieldNumber = 2;
        private global::LmdbCache.KvMetadata.Types.Compression compression_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::LmdbCache.KvMetadata.Types.Compression Compression {
          get { return compression_; }
          set {
            compression_ = value;
          }
        }

        /// <summary>Field number for the "correlationId" field.</summary>
        public const int CorrelationIdFieldNumber = 3;
        private string correlationId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string CorrelationId {
          get { return correlationId_; }
          set {
            correlationId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "chunksCount" field.</summary>
        public const int ChunksCountFieldNumber = 4;
        private uint chunksCount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ChunksCount {
          get { return chunksCount_; }
          set {
            chunksCount_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Header);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Header other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (OverrideExisting != other.OverrideExisting) return false;
          if (Compression != other.Compression) return false;
          if (CorrelationId != other.CorrelationId) return false;
          if (ChunksCount != other.ChunksCount) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (OverrideExisting != false) hash ^= OverrideExisting.GetHashCode();
          if (Compression != 0) hash ^= Compression.GetHashCode();
          if (CorrelationId.Length != 0) hash ^= CorrelationId.GetHashCode();
          if (ChunksCount != 0) hash ^= ChunksCount.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (OverrideExisting != false) {
            output.WriteRawTag(8);
            output.WriteBool(OverrideExisting);
          }
          if (Compression != 0) {
            output.WriteRawTag(16);
            output.WriteEnum((int) Compression);
          }
          if (CorrelationId.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(CorrelationId);
          }
          if (ChunksCount != 0) {
            output.WriteRawTag(32);
            output.WriteUInt32(ChunksCount);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (OverrideExisting != false) {
            size += 1 + 1;
          }
          if (Compression != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Compression);
          }
          if (CorrelationId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(CorrelationId);
          }
          if (ChunksCount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChunksCount);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Header other) {
          if (other == null) {
            return;
          }
          if (other.OverrideExisting != false) {
            OverrideExisting = other.OverrideExisting;
          }
          if (other.Compression != 0) {
            Compression = other.Compression;
          }
          if (other.CorrelationId.Length != 0) {
            CorrelationId = other.CorrelationId;
          }
          if (other.ChunksCount != 0) {
            ChunksCount = other.ChunksCount;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                OverrideExisting = input.ReadBool();
                break;
              }
              case 16: {
                compression_ = (global::LmdbCache.KvMetadata.Types.Compression) input.ReadEnum();
                break;
              }
              case 26: {
                CorrelationId = input.ReadString();
                break;
              }
              case 32: {
                ChunksCount = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class AddRequestEntry : pb::IMessage<AddRequestEntry> {
        private static readonly pb::MessageParser<AddRequestEntry> _parser = new pb::MessageParser<AddRequestEntry>(() => new AddRequestEntry());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AddRequestEntry> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::LmdbCache.AddRequest.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AddRequestEntry() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AddRequestEntry(AddRequestEntry other) : this() {
          key_ = other.key_;
          expiry_ = other.expiry_ != null ? other.expiry_.Clone() : null;
          value_ = other.value_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AddRequestEntry Clone() {
          return new AddRequestEntry(this);
        }

        /// <summary>Field number for the "key" field.</summary>
        public const int KeyFieldNumber = 1;
        private string key_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Key {
          get { return key_; }
          set {
            key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "expiry" field.</summary>
        public const int ExpiryFieldNumber = 2;
        private global::LmdbCache.Timestamp expiry_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::LmdbCache.Timestamp Expiry {
          get { return expiry_; }
          set {
            expiry_ = value;
          }
        }

        /// <summary>Field number for the "value" field.</summary>
        public const int ValueFieldNumber = 3;
        private pb::ByteString value_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Value {
          get { return value_; }
          set {
            value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as AddRequestEntry);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AddRequestEntry other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Key != other.Key) return false;
          if (!object.Equals(Expiry, other.Expiry)) return false;
          if (Value != other.Value) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Key.Length != 0) hash ^= Key.GetHashCode();
          if (expiry_ != null) hash ^= Expiry.GetHashCode();
          if (Value.Length != 0) hash ^= Value.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Key.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Key);
          }
          if (expiry_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Expiry);
          }
          if (Value.Length != 0) {
            output.WriteRawTag(26);
            output.WriteBytes(Value);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Key.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
          }
          if (expiry_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Expiry);
          }
          if (Value.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Value);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AddRequestEntry other) {
          if (other == null) {
            return;
          }
          if (other.Key.Length != 0) {
            Key = other.Key;
          }
          if (other.expiry_ != null) {
            if (expiry_ == null) {
              expiry_ = new global::LmdbCache.Timestamp();
            }
            Expiry.MergeFrom(other.Expiry);
          }
          if (other.Value.Length != 0) {
            Value = other.Value;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Key = input.ReadString();
                break;
              }
              case 18: {
                if (expiry_ == null) {
                  expiry_ = new global::LmdbCache.Timestamp();
                }
                input.ReadMessage(expiry_);
                break;
              }
              case 26: {
                Value = input.ReadBytes();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class AddResponse : pb::IMessage<AddResponse> {
    private static readonly pb::MessageParser<AddResponse> _parser = new pb::MessageParser<AddResponse>(() => new AddResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LmdbCache.LmdbCacheRemotingReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddResponse(AddResponse other) : this() {
      results_ = other.results_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddResponse Clone() {
      return new AddResponse(this);
    }

    /// <summary>Field number for the "results" field.</summary>
    public const int ResultsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::LmdbCache.AddResponse.Types.AddResult> _repeated_results_codec
        = pb::FieldCodec.ForEnum(10, x => (int) x, x => (global::LmdbCache.AddResponse.Types.AddResult) x);
    private readonly pbc::RepeatedField<global::LmdbCache.AddResponse.Types.AddResult> results_ = new pbc::RepeatedField<global::LmdbCache.AddResponse.Types.AddResult>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::LmdbCache.AddResponse.Types.AddResult> Results {
      get { return results_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!results_.Equals(other.results_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= results_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      results_.WriteTo(output, _repeated_results_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += results_.CalculateSize(_repeated_results_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddResponse other) {
      if (other == null) {
        return;
      }
      results_.Add(other.results_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            results_.AddEntriesFrom(input, _repeated_results_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the AddResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum AddResult {
        [pbr::OriginalName("KEY_ADDED")] KeyAdded = 0,
        [pbr::OriginalName("KEY_UPDATED")] KeyUpdated = 1,
        [pbr::OriginalName("KEY_ALREADY_EXISTS")] KeyAlreadyExists = 2,
        [pbr::OriginalName("FAILURE")] Failure = 3,
      }

    }
    #endregion

  }

  public sealed partial class AddStreamRequest : pb::IMessage<AddStreamRequest> {
    private static readonly pb::MessageParser<AddStreamRequest> _parser = new pb::MessageParser<AddStreamRequest>(() => new AddStreamRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddStreamRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LmdbCache.LmdbCacheRemotingReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddStreamRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddStreamRequest(AddStreamRequest other) : this() {
      switch (other.MsgCase) {
        case MsgOneofCase.Header:
          Header = other.Header.Clone();
          break;
        case MsgOneofCase.Chunk:
          Chunk = other.Chunk.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddStreamRequest Clone() {
      return new AddStreamRequest(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LmdbCache.AddRequest.Types.Header Header {
      get { return msgCase_ == MsgOneofCase.Header ? (global::LmdbCache.AddRequest.Types.Header) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.Header;
      }
    }

    /// <summary>Field number for the "chunk" field.</summary>
    public const int ChunkFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LmdbCache.AddStreamRequest.Types.DataChunk Chunk {
      get { return msgCase_ == MsgOneofCase.Chunk ? (global::LmdbCache.AddStreamRequest.Types.DataChunk) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.Chunk;
      }
    }

    private object msg_;
    /// <summary>Enum of possible cases for the "msg" oneof.</summary>
    public enum MsgOneofCase {
      None = 0,
      Header = 1,
      Chunk = 2,
    }
    private MsgOneofCase msgCase_ = MsgOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgOneofCase MsgCase {
      get { return msgCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMsg() {
      msgCase_ = MsgOneofCase.None;
      msg_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddStreamRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddStreamRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (!object.Equals(Chunk, other.Chunk)) return false;
      if (MsgCase != other.MsgCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (msgCase_ == MsgOneofCase.Header) hash ^= Header.GetHashCode();
      if (msgCase_ == MsgOneofCase.Chunk) hash ^= Chunk.GetHashCode();
      hash ^= (int) msgCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (msgCase_ == MsgOneofCase.Header) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (msgCase_ == MsgOneofCase.Chunk) {
        output.WriteRawTag(18);
        output.WriteMessage(Chunk);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (msgCase_ == MsgOneofCase.Header) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (msgCase_ == MsgOneofCase.Chunk) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Chunk);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddStreamRequest other) {
      if (other == null) {
        return;
      }
      switch (other.MsgCase) {
        case MsgOneofCase.Header:
          if (Header == null) {
            Header = new global::LmdbCache.AddRequest.Types.Header();
          }
          Header.MergeFrom(other.Header);
          break;
        case MsgOneofCase.Chunk:
          if (Chunk == null) {
            Chunk = new global::LmdbCache.AddStreamRequest.Types.DataChunk();
          }
          Chunk.MergeFrom(other.Chunk);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::LmdbCache.AddRequest.Types.Header subBuilder = new global::LmdbCache.AddRequest.Types.Header();
            if (msgCase_ == MsgOneofCase.Header) {
              subBuilder.MergeFrom(Header);
            }
            input.ReadMessage(subBuilder);
            Header = subBuilder;
            break;
          }
          case 18: {
            global::LmdbCache.AddStreamRequest.Types.DataChunk subBuilder = new global::LmdbCache.AddStreamRequest.Types.DataChunk();
            if (msgCase_ == MsgOneofCase.Chunk) {
              subBuilder.MergeFrom(Chunk);
            }
            input.ReadMessage(subBuilder);
            Chunk = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the AddStreamRequest message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class DataChunk : pb::IMessage<DataChunk> {
        private static readonly pb::MessageParser<DataChunk> _parser = new pb::MessageParser<DataChunk>(() => new DataChunk());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<DataChunk> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::LmdbCache.AddStreamRequest.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DataChunk() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DataChunk(DataChunk other) : this() {
          index_ = other.index_;
          entry_ = other.entry_ != null ? other.entry_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DataChunk Clone() {
          return new DataChunk(this);
        }

        /// <summary>Field number for the "index" field.</summary>
        public const int IndexFieldNumber = 1;
        private uint index_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Index {
          get { return index_; }
          set {
            index_ = value;
          }
        }

        /// <summary>Field number for the "entry" field.</summary>
        public const int EntryFieldNumber = 2;
        private global::LmdbCache.AddRequest.Types.AddRequestEntry entry_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::LmdbCache.AddRequest.Types.AddRequestEntry Entry {
          get { return entry_; }
          set {
            entry_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as DataChunk);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(DataChunk other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Index != other.Index) return false;
          if (!object.Equals(Entry, other.Entry)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Index != 0) hash ^= Index.GetHashCode();
          if (entry_ != null) hash ^= Entry.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Index != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Index);
          }
          if (entry_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Entry);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Index != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
          }
          if (entry_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Entry);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(DataChunk other) {
          if (other == null) {
            return;
          }
          if (other.Index != 0) {
            Index = other.Index;
          }
          if (other.entry_ != null) {
            if (entry_ == null) {
              entry_ = new global::LmdbCache.AddRequest.Types.AddRequestEntry();
            }
            Entry.MergeFrom(other.Entry);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Index = input.ReadUInt32();
                break;
              }
              case 18: {
                if (entry_ == null) {
                  entry_ = new global::LmdbCache.AddRequest.Types.AddRequestEntry();
                }
                input.ReadMessage(entry_);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class DeleteRequest : pb::IMessage<DeleteRequest> {
    private static readonly pb::MessageParser<DeleteRequest> _parser = new pb::MessageParser<DeleteRequest>(() => new DeleteRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LmdbCache.LmdbCacheRemotingReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteRequest(DeleteRequest other) : this() {
      correlationId_ = other.correlationId_;
      keys_ = other.keys_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteRequest Clone() {
      return new DeleteRequest(this);
    }

    /// <summary>Field number for the "correlationId" field.</summary>
    public const int CorrelationIdFieldNumber = 1;
    private string correlationId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CorrelationId {
      get { return correlationId_; }
      set {
        correlationId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "keys" field.</summary>
    public const int KeysFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_keys_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> keys_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Keys {
      get { return keys_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CorrelationId != other.CorrelationId) return false;
      if(!keys_.Equals(other.keys_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CorrelationId.Length != 0) hash ^= CorrelationId.GetHashCode();
      hash ^= keys_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CorrelationId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CorrelationId);
      }
      keys_.WriteTo(output, _repeated_keys_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CorrelationId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CorrelationId);
      }
      size += keys_.CalculateSize(_repeated_keys_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteRequest other) {
      if (other == null) {
        return;
      }
      if (other.CorrelationId.Length != 0) {
        CorrelationId = other.CorrelationId;
      }
      keys_.Add(other.keys_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            CorrelationId = input.ReadString();
            break;
          }
          case 18: {
            keys_.AddEntriesFrom(input, _repeated_keys_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DeleteResponse : pb::IMessage<DeleteResponse> {
    private static readonly pb::MessageParser<DeleteResponse> _parser = new pb::MessageParser<DeleteResponse>(() => new DeleteResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LmdbCache.LmdbCacheRemotingReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteResponse(DeleteResponse other) : this() {
      results_ = other.results_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteResponse Clone() {
      return new DeleteResponse(this);
    }

    /// <summary>Field number for the "results" field.</summary>
    public const int ResultsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::LmdbCache.DeleteResponse.Types.DeleteResult> _repeated_results_codec
        = pb::FieldCodec.ForEnum(10, x => (int) x, x => (global::LmdbCache.DeleteResponse.Types.DeleteResult) x);
    private readonly pbc::RepeatedField<global::LmdbCache.DeleteResponse.Types.DeleteResult> results_ = new pbc::RepeatedField<global::LmdbCache.DeleteResponse.Types.DeleteResult>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::LmdbCache.DeleteResponse.Types.DeleteResult> Results {
      get { return results_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!results_.Equals(other.results_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= results_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      results_.WriteTo(output, _repeated_results_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += results_.CalculateSize(_repeated_results_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteResponse other) {
      if (other == null) {
        return;
      }
      results_.Add(other.results_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            results_.AddEntriesFrom(input, _repeated_results_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the DeleteResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum DeleteResult {
        [pbr::OriginalName("SUCCESS")] Success = 0,
        [pbr::OriginalName("NOT_FOUND")] NotFound = 1,
        [pbr::OriginalName("FAILURE")] Failure = 2,
      }

    }
    #endregion

  }

  public sealed partial class GetRequest : pb::IMessage<GetRequest> {
    private static readonly pb::MessageParser<GetRequest> _parser = new pb::MessageParser<GetRequest>(() => new GetRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LmdbCache.LmdbCacheRemotingReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRequest(GetRequest other) : this() {
      correlationId_ = other.correlationId_;
      keys_ = other.keys_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRequest Clone() {
      return new GetRequest(this);
    }

    /// <summary>Field number for the "correlationId" field.</summary>
    public const int CorrelationIdFieldNumber = 1;
    private string correlationId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CorrelationId {
      get { return correlationId_; }
      set {
        correlationId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "keys" field.</summary>
    public const int KeysFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_keys_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> keys_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Keys {
      get { return keys_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CorrelationId != other.CorrelationId) return false;
      if(!keys_.Equals(other.keys_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CorrelationId.Length != 0) hash ^= CorrelationId.GetHashCode();
      hash ^= keys_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CorrelationId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CorrelationId);
      }
      keys_.WriteTo(output, _repeated_keys_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CorrelationId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CorrelationId);
      }
      size += keys_.CalculateSize(_repeated_keys_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetRequest other) {
      if (other == null) {
        return;
      }
      if (other.CorrelationId.Length != 0) {
        CorrelationId = other.CorrelationId;
      }
      keys_.Add(other.keys_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            CorrelationId = input.ReadString();
            break;
          }
          case 18: {
            keys_.AddEntriesFrom(input, _repeated_keys_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetResponse : pb::IMessage<GetResponse> {
    private static readonly pb::MessageParser<GetResponse> _parser = new pb::MessageParser<GetResponse>(() => new GetResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LmdbCache.LmdbCacheRemotingReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetResponse(GetResponse other) : this() {
      results_ = other.results_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetResponse Clone() {
      return new GetResponse(this);
    }

    /// <summary>Field number for the "results" field.</summary>
    public const int ResultsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::LmdbCache.GetResponse.Types.GetResponseEntry> _repeated_results_codec
        = pb::FieldCodec.ForMessage(10, global::LmdbCache.GetResponse.Types.GetResponseEntry.Parser);
    private readonly pbc::RepeatedField<global::LmdbCache.GetResponse.Types.GetResponseEntry> results_ = new pbc::RepeatedField<global::LmdbCache.GetResponse.Types.GetResponseEntry>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::LmdbCache.GetResponse.Types.GetResponseEntry> Results {
      get { return results_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!results_.Equals(other.results_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= results_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      results_.WriteTo(output, _repeated_results_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += results_.CalculateSize(_repeated_results_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetResponse other) {
      if (other == null) {
        return;
      }
      results_.Add(other.results_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            results_.AddEntriesFrom(input, _repeated_results_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the GetResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class GetResponseEntry : pb::IMessage<GetResponseEntry> {
        private static readonly pb::MessageParser<GetResponseEntry> _parser = new pb::MessageParser<GetResponseEntry>(() => new GetResponseEntry());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GetResponseEntry> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::LmdbCache.GetResponse.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GetResponseEntry() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GetResponseEntry(GetResponseEntry other) : this() {
          result_ = other.result_;
          index_ = other.index_;
          compression_ = other.compression_;
          value_ = other.value_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GetResponseEntry Clone() {
          return new GetResponseEntry(this);
        }

        /// <summary>Field number for the "result" field.</summary>
        public const int ResultFieldNumber = 1;
        private global::LmdbCache.GetResponse.Types.GetResponseEntry.Types.GetResult result_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::LmdbCache.GetResponse.Types.GetResponseEntry.Types.GetResult Result {
          get { return result_; }
          set {
            result_ = value;
          }
        }

        /// <summary>Field number for the "index" field.</summary>
        public const int IndexFieldNumber = 2;
        private uint index_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Index {
          get { return index_; }
          set {
            index_ = value;
          }
        }

        /// <summary>Field number for the "compression" field.</summary>
        public const int CompressionFieldNumber = 3;
        private global::LmdbCache.KvMetadata.Types.Compression compression_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::LmdbCache.KvMetadata.Types.Compression Compression {
          get { return compression_; }
          set {
            compression_ = value;
          }
        }

        /// <summary>Field number for the "value" field.</summary>
        public const int ValueFieldNumber = 5;
        private pb::ByteString value_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Value {
          get { return value_; }
          set {
            value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as GetResponseEntry);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GetResponseEntry other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Result != other.Result) return false;
          if (Index != other.Index) return false;
          if (Compression != other.Compression) return false;
          if (Value != other.Value) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Result != 0) hash ^= Result.GetHashCode();
          if (Index != 0) hash ^= Index.GetHashCode();
          if (Compression != 0) hash ^= Compression.GetHashCode();
          if (Value.Length != 0) hash ^= Value.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Result != 0) {
            output.WriteRawTag(8);
            output.WriteEnum((int) Result);
          }
          if (Index != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(Index);
          }
          if (Compression != 0) {
            output.WriteRawTag(24);
            output.WriteEnum((int) Compression);
          }
          if (Value.Length != 0) {
            output.WriteRawTag(42);
            output.WriteBytes(Value);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Result != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
          }
          if (Index != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
          }
          if (Compression != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Compression);
          }
          if (Value.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Value);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GetResponseEntry other) {
          if (other == null) {
            return;
          }
          if (other.Result != 0) {
            Result = other.Result;
          }
          if (other.Index != 0) {
            Index = other.Index;
          }
          if (other.Compression != 0) {
            Compression = other.Compression;
          }
          if (other.Value.Length != 0) {
            Value = other.Value;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                result_ = (global::LmdbCache.GetResponse.Types.GetResponseEntry.Types.GetResult) input.ReadEnum();
                break;
              }
              case 16: {
                Index = input.ReadUInt32();
                break;
              }
              case 24: {
                compression_ = (global::LmdbCache.KvMetadata.Types.Compression) input.ReadEnum();
                break;
              }
              case 42: {
                Value = input.ReadBytes();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the GetResponseEntry message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public enum GetResult {
            [pbr::OriginalName("SUCCESS")] Success = 0,
            [pbr::OriginalName("NOT_FOUND")] NotFound = 1,
            [pbr::OriginalName("FAILURE")] Failure = 2,
          }

        }
        #endregion

      }

    }
    #endregion

  }

  public sealed partial class GetStreamResponse : pb::IMessage<GetStreamResponse> {
    private static readonly pb::MessageParser<GetStreamResponse> _parser = new pb::MessageParser<GetStreamResponse>(() => new GetStreamResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetStreamResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LmdbCache.LmdbCacheRemotingReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetStreamResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetStreamResponse(GetStreamResponse other) : this() {
      result_ = other.result_ != null ? other.result_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetStreamResponse Clone() {
      return new GetStreamResponse(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private global::LmdbCache.GetResponse.Types.GetResponseEntry result_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LmdbCache.GetResponse.Types.GetResponseEntry Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetStreamResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetStreamResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Result, other.Result)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (result_ != null) hash ^= Result.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (result_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Result);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (result_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Result);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetStreamResponse other) {
      if (other == null) {
        return;
      }
      if (other.result_ != null) {
        if (result_ == null) {
          result_ = new global::LmdbCache.GetResponse.Types.GetResponseEntry();
        }
        Result.MergeFrom(other.Result);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (result_ == null) {
              result_ = new global::LmdbCache.GetResponse.Types.GetResponseEntry();
            }
            input.ReadMessage(result_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ContainsKeysResponse : pb::IMessage<ContainsKeysResponse> {
    private static readonly pb::MessageParser<ContainsKeysResponse> _parser = new pb::MessageParser<ContainsKeysResponse>(() => new ContainsKeysResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ContainsKeysResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LmdbCache.LmdbCacheRemotingReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContainsKeysResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContainsKeysResponse(ContainsKeysResponse other) : this() {
      results_ = other.results_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContainsKeysResponse Clone() {
      return new ContainsKeysResponse(this);
    }

    /// <summary>Field number for the "results" field.</summary>
    public const int ResultsFieldNumber = 1;
    private static readonly pb::FieldCodec<bool> _repeated_results_codec
        = pb::FieldCodec.ForBool(10);
    private readonly pbc::RepeatedField<bool> results_ = new pbc::RepeatedField<bool>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<bool> Results {
      get { return results_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ContainsKeysResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ContainsKeysResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!results_.Equals(other.results_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= results_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      results_.WriteTo(output, _repeated_results_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += results_.CalculateSize(_repeated_results_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ContainsKeysResponse other) {
      if (other == null) {
        return;
      }
      results_.Add(other.results_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            results_.AddEntriesFrom(input, _repeated_results_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CopyRequest : pb::IMessage<CopyRequest> {
    private static readonly pb::MessageParser<CopyRequest> _parser = new pb::MessageParser<CopyRequest>(() => new CopyRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CopyRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LmdbCache.LmdbCacheRemotingReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CopyRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CopyRequest(CopyRequest other) : this() {
      correlationId_ = other.correlationId_;
      entries_ = other.entries_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CopyRequest Clone() {
      return new CopyRequest(this);
    }

    /// <summary>Field number for the "correlationId" field.</summary>
    public const int CorrelationIdFieldNumber = 1;
    private string correlationId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CorrelationId {
      get { return correlationId_; }
      set {
        correlationId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "entries" field.</summary>
    public const int EntriesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::LmdbCache.CopyRequest.Types.CopyRequestEntry> _repeated_entries_codec
        = pb::FieldCodec.ForMessage(18, global::LmdbCache.CopyRequest.Types.CopyRequestEntry.Parser);
    private readonly pbc::RepeatedField<global::LmdbCache.CopyRequest.Types.CopyRequestEntry> entries_ = new pbc::RepeatedField<global::LmdbCache.CopyRequest.Types.CopyRequestEntry>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::LmdbCache.CopyRequest.Types.CopyRequestEntry> Entries {
      get { return entries_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CopyRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CopyRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CorrelationId != other.CorrelationId) return false;
      if(!entries_.Equals(other.entries_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CorrelationId.Length != 0) hash ^= CorrelationId.GetHashCode();
      hash ^= entries_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CorrelationId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CorrelationId);
      }
      entries_.WriteTo(output, _repeated_entries_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CorrelationId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CorrelationId);
      }
      size += entries_.CalculateSize(_repeated_entries_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CopyRequest other) {
      if (other == null) {
        return;
      }
      if (other.CorrelationId.Length != 0) {
        CorrelationId = other.CorrelationId;
      }
      entries_.Add(other.entries_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            CorrelationId = input.ReadString();
            break;
          }
          case 18: {
            entries_.AddEntriesFrom(input, _repeated_entries_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CopyRequest message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class CopyRequestEntry : pb::IMessage<CopyRequestEntry> {
        private static readonly pb::MessageParser<CopyRequestEntry> _parser = new pb::MessageParser<CopyRequestEntry>(() => new CopyRequestEntry());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CopyRequestEntry> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::LmdbCache.CopyRequest.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CopyRequestEntry() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CopyRequestEntry(CopyRequestEntry other) : this() {
          keyFrom_ = other.keyFrom_;
          expiry_ = other.expiry_ != null ? other.expiry_.Clone() : null;
          keyTo_ = other.keyTo_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CopyRequestEntry Clone() {
          return new CopyRequestEntry(this);
        }

        /// <summary>Field number for the "keyFrom" field.</summary>
        public const int KeyFromFieldNumber = 1;
        private string keyFrom_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string KeyFrom {
          get { return keyFrom_; }
          set {
            keyFrom_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "expiry" field.</summary>
        public const int ExpiryFieldNumber = 2;
        private global::LmdbCache.Timestamp expiry_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::LmdbCache.Timestamp Expiry {
          get { return expiry_; }
          set {
            expiry_ = value;
          }
        }

        /// <summary>Field number for the "keyTo" field.</summary>
        public const int KeyToFieldNumber = 3;
        private string keyTo_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string KeyTo {
          get { return keyTo_; }
          set {
            keyTo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as CopyRequestEntry);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CopyRequestEntry other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (KeyFrom != other.KeyFrom) return false;
          if (!object.Equals(Expiry, other.Expiry)) return false;
          if (KeyTo != other.KeyTo) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (KeyFrom.Length != 0) hash ^= KeyFrom.GetHashCode();
          if (expiry_ != null) hash ^= Expiry.GetHashCode();
          if (KeyTo.Length != 0) hash ^= KeyTo.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (KeyFrom.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(KeyFrom);
          }
          if (expiry_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Expiry);
          }
          if (KeyTo.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(KeyTo);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (KeyFrom.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(KeyFrom);
          }
          if (expiry_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Expiry);
          }
          if (KeyTo.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(KeyTo);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CopyRequestEntry other) {
          if (other == null) {
            return;
          }
          if (other.KeyFrom.Length != 0) {
            KeyFrom = other.KeyFrom;
          }
          if (other.expiry_ != null) {
            if (expiry_ == null) {
              expiry_ = new global::LmdbCache.Timestamp();
            }
            Expiry.MergeFrom(other.Expiry);
          }
          if (other.KeyTo.Length != 0) {
            KeyTo = other.KeyTo;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                KeyFrom = input.ReadString();
                break;
              }
              case 18: {
                if (expiry_ == null) {
                  expiry_ = new global::LmdbCache.Timestamp();
                }
                input.ReadMessage(expiry_);
                break;
              }
              case 26: {
                KeyTo = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class CopyResponse : pb::IMessage<CopyResponse> {
    private static readonly pb::MessageParser<CopyResponse> _parser = new pb::MessageParser<CopyResponse>(() => new CopyResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CopyResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LmdbCache.LmdbCacheRemotingReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CopyResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CopyResponse(CopyResponse other) : this() {
      results_ = other.results_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CopyResponse Clone() {
      return new CopyResponse(this);
    }

    /// <summary>Field number for the "results" field.</summary>
    public const int ResultsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::LmdbCache.CopyResponse.Types.CopyResult> _repeated_results_codec
        = pb::FieldCodec.ForEnum(10, x => (int) x, x => (global::LmdbCache.CopyResponse.Types.CopyResult) x);
    private readonly pbc::RepeatedField<global::LmdbCache.CopyResponse.Types.CopyResult> results_ = new pbc::RepeatedField<global::LmdbCache.CopyResponse.Types.CopyResult>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::LmdbCache.CopyResponse.Types.CopyResult> Results {
      get { return results_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CopyResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CopyResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!results_.Equals(other.results_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= results_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      results_.WriteTo(output, _repeated_results_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += results_.CalculateSize(_repeated_results_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CopyResponse other) {
      if (other == null) {
        return;
      }
      results_.Add(other.results_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            results_.AddEntriesFrom(input, _repeated_results_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CopyResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum CopyResult {
        [pbr::OriginalName("SUCCESS")] Success = 0,
        [pbr::OriginalName("FROM_KEY_NOT_FOUND")] FromKeyNotFound = 1,
        [pbr::OriginalName("TO_KEY_EXISTS")] ToKeyExists = 2,
        [pbr::OriginalName("FAILURE")] Failure = 3,
      }

    }
    #endregion

  }

  public sealed partial class KeyListRequest : pb::IMessage<KeyListRequest> {
    private static readonly pb::MessageParser<KeyListRequest> _parser = new pb::MessageParser<KeyListRequest>(() => new KeyListRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KeyListRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LmdbCache.LmdbCacheRemotingReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyListRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyListRequest(KeyListRequest other) : this() {
      keyPrefix_ = other.keyPrefix_;
      pageSize_ = other.pageSize_;
      page_ = other.page_;
      correlationId_ = other.correlationId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyListRequest Clone() {
      return new KeyListRequest(this);
    }

    /// <summary>Field number for the "keyPrefix" field.</summary>
    public const int KeyPrefixFieldNumber = 1;
    private string keyPrefix_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string KeyPrefix {
      get { return keyPrefix_; }
      set {
        keyPrefix_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pageSize" field.</summary>
    public const int PageSizeFieldNumber = 2;
    private uint pageSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    /// <summary>Field number for the "page" field.</summary>
    public const int PageFieldNumber = 3;
    private uint page_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Page {
      get { return page_; }
      set {
        page_ = value;
      }
    }

    /// <summary>Field number for the "correlationId" field.</summary>
    public const int CorrelationIdFieldNumber = 4;
    private string correlationId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CorrelationId {
      get { return correlationId_; }
      set {
        correlationId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KeyListRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KeyListRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (KeyPrefix != other.KeyPrefix) return false;
      if (PageSize != other.PageSize) return false;
      if (Page != other.Page) return false;
      if (CorrelationId != other.CorrelationId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (KeyPrefix.Length != 0) hash ^= KeyPrefix.GetHashCode();
      if (PageSize != 0) hash ^= PageSize.GetHashCode();
      if (Page != 0) hash ^= Page.GetHashCode();
      if (CorrelationId.Length != 0) hash ^= CorrelationId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (KeyPrefix.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(KeyPrefix);
      }
      if (PageSize != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(PageSize);
      }
      if (Page != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Page);
      }
      if (CorrelationId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(CorrelationId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (KeyPrefix.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(KeyPrefix);
      }
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PageSize);
      }
      if (Page != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Page);
      }
      if (CorrelationId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CorrelationId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KeyListRequest other) {
      if (other == null) {
        return;
      }
      if (other.KeyPrefix.Length != 0) {
        KeyPrefix = other.KeyPrefix;
      }
      if (other.PageSize != 0) {
        PageSize = other.PageSize;
      }
      if (other.Page != 0) {
        Page = other.Page;
      }
      if (other.CorrelationId.Length != 0) {
        CorrelationId = other.CorrelationId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            KeyPrefix = input.ReadString();
            break;
          }
          case 16: {
            PageSize = input.ReadUInt32();
            break;
          }
          case 24: {
            Page = input.ReadUInt32();
            break;
          }
          case 34: {
            CorrelationId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class KeyListResponse : pb::IMessage<KeyListResponse> {
    private static readonly pb::MessageParser<KeyListResponse> _parser = new pb::MessageParser<KeyListResponse>(() => new KeyListResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KeyListResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LmdbCache.LmdbCacheRemotingReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyListResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyListResponse(KeyListResponse other) : this() {
      key_ = other.key_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyListResponse Clone() {
      return new KeyListResponse(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    /// <summary>
    /// Timestamp expiry = 2;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KeyListResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KeyListResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KeyListResponse other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class KeyValueListResponse : pb::IMessage<KeyValueListResponse> {
    private static readonly pb::MessageParser<KeyValueListResponse> _parser = new pb::MessageParser<KeyValueListResponse>(() => new KeyValueListResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KeyValueListResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LmdbCache.LmdbCacheRemotingReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyValueListResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyValueListResponse(KeyValueListResponse other) : this() {
      key_ = other.key_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyValueListResponse Clone() {
      return new KeyValueListResponse(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 3;
    private pb::ByteString value_ = pb::ByteString.Empty;
    /// <summary>
    /// Timestamp expiry = 2;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KeyValueListResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KeyValueListResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KeyValueListResponse other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 26: {
            Value = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class WriteLogEvent : pb::IMessage<WriteLogEvent> {
    private static readonly pb::MessageParser<WriteLogEvent> _parser = new pb::MessageParser<WriteLogEvent>(() => new WriteLogEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WriteLogEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LmdbCache.LmdbCacheRemotingReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WriteLogEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WriteLogEvent(WriteLogEvent other) : this() {
      clock_ = other.clock_ != null ? other.clock_.Clone() : null;
      correlationId_ = other.correlationId_;
      originatorReplicaId_ = other.originatorReplicaId_;
      switch (other.LoggedEventCase) {
        case LoggedEventOneofCase.Updated:
          Updated = other.Updated.Clone();
          break;
        case LoggedEventOneofCase.Deleted:
          Deleted = other.Deleted.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WriteLogEvent Clone() {
      return new WriteLogEvent(this);
    }

    /// <summary>Field number for the "clock" field.</summary>
    public const int ClockFieldNumber = 1;
    private global::LmdbCache.VectorClock clock_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LmdbCache.VectorClock Clock {
      get { return clock_; }
      set {
        clock_ = value;
      }
    }

    /// <summary>Field number for the "correlationId" field.</summary>
    public const int CorrelationIdFieldNumber = 2;
    private string correlationId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CorrelationId {
      get { return correlationId_; }
      set {
        correlationId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "originatorReplicaId" field.</summary>
    public const int OriginatorReplicaIdFieldNumber = 3;
    private string originatorReplicaId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OriginatorReplicaId {
      get { return originatorReplicaId_; }
      set {
        originatorReplicaId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "updated" field.</summary>
    public const int UpdatedFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LmdbCache.WriteLogEvent.Types.AddedOrUpdated Updated {
      get { return loggedEventCase_ == LoggedEventOneofCase.Updated ? (global::LmdbCache.WriteLogEvent.Types.AddedOrUpdated) loggedEvent_ : null; }
      set {
        loggedEvent_ = value;
        loggedEventCase_ = value == null ? LoggedEventOneofCase.None : LoggedEventOneofCase.Updated;
      }
    }

    /// <summary>Field number for the "deleted" field.</summary>
    public const int DeletedFieldNumber = 7;
    /// <summary>
    ///Expired expired   = 8; 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LmdbCache.WriteLogEvent.Types.Deleted Deleted {
      get { return loggedEventCase_ == LoggedEventOneofCase.Deleted ? (global::LmdbCache.WriteLogEvent.Types.Deleted) loggedEvent_ : null; }
      set {
        loggedEvent_ = value;
        loggedEventCase_ = value == null ? LoggedEventOneofCase.None : LoggedEventOneofCase.Deleted;
      }
    }

    private object loggedEvent_;
    /// <summary>Enum of possible cases for the "loggedEvent" oneof.</summary>
    public enum LoggedEventOneofCase {
      None = 0,
      Updated = 5,
      Deleted = 7,
    }
    private LoggedEventOneofCase loggedEventCase_ = LoggedEventOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoggedEventOneofCase LoggedEventCase {
      get { return loggedEventCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLoggedEvent() {
      loggedEventCase_ = LoggedEventOneofCase.None;
      loggedEvent_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WriteLogEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WriteLogEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Clock, other.Clock)) return false;
      if (CorrelationId != other.CorrelationId) return false;
      if (OriginatorReplicaId != other.OriginatorReplicaId) return false;
      if (!object.Equals(Updated, other.Updated)) return false;
      if (!object.Equals(Deleted, other.Deleted)) return false;
      if (LoggedEventCase != other.LoggedEventCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (clock_ != null) hash ^= Clock.GetHashCode();
      if (CorrelationId.Length != 0) hash ^= CorrelationId.GetHashCode();
      if (OriginatorReplicaId.Length != 0) hash ^= OriginatorReplicaId.GetHashCode();
      if (loggedEventCase_ == LoggedEventOneofCase.Updated) hash ^= Updated.GetHashCode();
      if (loggedEventCase_ == LoggedEventOneofCase.Deleted) hash ^= Deleted.GetHashCode();
      hash ^= (int) loggedEventCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (clock_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Clock);
      }
      if (CorrelationId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(CorrelationId);
      }
      if (OriginatorReplicaId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(OriginatorReplicaId);
      }
      if (loggedEventCase_ == LoggedEventOneofCase.Updated) {
        output.WriteRawTag(42);
        output.WriteMessage(Updated);
      }
      if (loggedEventCase_ == LoggedEventOneofCase.Deleted) {
        output.WriteRawTag(58);
        output.WriteMessage(Deleted);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (clock_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Clock);
      }
      if (CorrelationId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CorrelationId);
      }
      if (OriginatorReplicaId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OriginatorReplicaId);
      }
      if (loggedEventCase_ == LoggedEventOneofCase.Updated) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Updated);
      }
      if (loggedEventCase_ == LoggedEventOneofCase.Deleted) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Deleted);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WriteLogEvent other) {
      if (other == null) {
        return;
      }
      if (other.clock_ != null) {
        if (clock_ == null) {
          clock_ = new global::LmdbCache.VectorClock();
        }
        Clock.MergeFrom(other.Clock);
      }
      if (other.CorrelationId.Length != 0) {
        CorrelationId = other.CorrelationId;
      }
      if (other.OriginatorReplicaId.Length != 0) {
        OriginatorReplicaId = other.OriginatorReplicaId;
      }
      switch (other.LoggedEventCase) {
        case LoggedEventOneofCase.Updated:
          if (Updated == null) {
            Updated = new global::LmdbCache.WriteLogEvent.Types.AddedOrUpdated();
          }
          Updated.MergeFrom(other.Updated);
          break;
        case LoggedEventOneofCase.Deleted:
          if (Deleted == null) {
            Deleted = new global::LmdbCache.WriteLogEvent.Types.Deleted();
          }
          Deleted.MergeFrom(other.Deleted);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (clock_ == null) {
              clock_ = new global::LmdbCache.VectorClock();
            }
            input.ReadMessage(clock_);
            break;
          }
          case 18: {
            CorrelationId = input.ReadString();
            break;
          }
          case 26: {
            OriginatorReplicaId = input.ReadString();
            break;
          }
          case 42: {
            global::LmdbCache.WriteLogEvent.Types.AddedOrUpdated subBuilder = new global::LmdbCache.WriteLogEvent.Types.AddedOrUpdated();
            if (loggedEventCase_ == LoggedEventOneofCase.Updated) {
              subBuilder.MergeFrom(Updated);
            }
            input.ReadMessage(subBuilder);
            Updated = subBuilder;
            break;
          }
          case 58: {
            global::LmdbCache.WriteLogEvent.Types.Deleted subBuilder = new global::LmdbCache.WriteLogEvent.Types.Deleted();
            if (loggedEventCase_ == LoggedEventOneofCase.Deleted) {
              subBuilder.MergeFrom(Deleted);
            }
            input.ReadMessage(subBuilder);
            Deleted = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the WriteLogEvent message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// TODO: Add a value hash?
      /// </summary>
      public sealed partial class AddedOrUpdated : pb::IMessage<AddedOrUpdated> {
        private static readonly pb::MessageParser<AddedOrUpdated> _parser = new pb::MessageParser<AddedOrUpdated>(() => new AddedOrUpdated());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AddedOrUpdated> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::LmdbCache.WriteLogEvent.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AddedOrUpdated() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AddedOrUpdated(AddedOrUpdated other) : this() {
          key_ = other.key_;
          expiry_ = other.expiry_ != null ? other.expiry_.Clone() : null;
          value_ = other.value_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AddedOrUpdated Clone() {
          return new AddedOrUpdated(this);
        }

        /// <summary>Field number for the "key" field.</summary>
        public const int KeyFieldNumber = 1;
        private string key_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Key {
          get { return key_; }
          set {
            key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "expiry" field.</summary>
        public const int ExpiryFieldNumber = 2;
        private global::LmdbCache.Timestamp expiry_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::LmdbCache.Timestamp Expiry {
          get { return expiry_; }
          set {
            expiry_ = value;
          }
        }

        /// <summary>Field number for the "value" field.</summary>
        public const int ValueFieldNumber = 3;
        private pb::ByteString value_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Value {
          get { return value_; }
          set {
            value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as AddedOrUpdated);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AddedOrUpdated other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Key != other.Key) return false;
          if (!object.Equals(Expiry, other.Expiry)) return false;
          if (Value != other.Value) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Key.Length != 0) hash ^= Key.GetHashCode();
          if (expiry_ != null) hash ^= Expiry.GetHashCode();
          if (Value.Length != 0) hash ^= Value.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Key.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Key);
          }
          if (expiry_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Expiry);
          }
          if (Value.Length != 0) {
            output.WriteRawTag(26);
            output.WriteBytes(Value);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Key.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
          }
          if (expiry_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Expiry);
          }
          if (Value.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Value);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AddedOrUpdated other) {
          if (other == null) {
            return;
          }
          if (other.Key.Length != 0) {
            Key = other.Key;
          }
          if (other.expiry_ != null) {
            if (expiry_ == null) {
              expiry_ = new global::LmdbCache.Timestamp();
            }
            Expiry.MergeFrom(other.Expiry);
          }
          if (other.Value.Length != 0) {
            Value = other.Value;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Key = input.ReadString();
                break;
              }
              case 18: {
                if (expiry_ == null) {
                  expiry_ = new global::LmdbCache.Timestamp();
                }
                input.ReadMessage(expiry_);
                break;
              }
              case 26: {
                Value = input.ReadBytes();
                break;
              }
            }
          }
        }

      }

      public sealed partial class Deleted : pb::IMessage<Deleted> {
        private static readonly pb::MessageParser<Deleted> _parser = new pb::MessageParser<Deleted>(() => new Deleted());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Deleted> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::LmdbCache.WriteLogEvent.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Deleted() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Deleted(Deleted other) : this() {
          key_ = other.key_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Deleted Clone() {
          return new Deleted(this);
        }

        /// <summary>Field number for the "key" field.</summary>
        public const int KeyFieldNumber = 1;
        private string key_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Key {
          get { return key_; }
          set {
            key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Deleted);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Deleted other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Key != other.Key) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Key.Length != 0) hash ^= Key.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Key.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Key);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Key.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Deleted other) {
          if (other == null) {
            return;
          }
          if (other.Key.Length != 0) {
            Key = other.Key;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Key = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class GetReplicaIdResponse : pb::IMessage<GetReplicaIdResponse> {
    private static readonly pb::MessageParser<GetReplicaIdResponse> _parser = new pb::MessageParser<GetReplicaIdResponse>(() => new GetReplicaIdResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetReplicaIdResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LmdbCache.LmdbCacheRemotingReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetReplicaIdResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetReplicaIdResponse(GetReplicaIdResponse other) : this() {
      replicaId_ = other.replicaId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetReplicaIdResponse Clone() {
      return new GetReplicaIdResponse(this);
    }

    /// <summary>Field number for the "replicaId" field.</summary>
    public const int ReplicaIdFieldNumber = 1;
    private string replicaId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReplicaId {
      get { return replicaId_; }
      set {
        replicaId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetReplicaIdResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetReplicaIdResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReplicaId != other.ReplicaId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReplicaId.Length != 0) hash ^= ReplicaId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReplicaId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ReplicaId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReplicaId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ReplicaId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetReplicaIdResponse other) {
      if (other == null) {
        return;
      }
      if (other.ReplicaId.Length != 0) {
        ReplicaId = other.ReplicaId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ReplicaId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SyncFromRequest : pb::IMessage<SyncFromRequest> {
    private static readonly pb::MessageParser<SyncFromRequest> _parser = new pb::MessageParser<SyncFromRequest>(() => new SyncFromRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SyncFromRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LmdbCache.LmdbCacheRemotingReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SyncFromRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SyncFromRequest(SyncFromRequest other) : this() {
      replicaId_ = other.replicaId_;
      includeMine_ = other.includeMine_;
      includeAcked_ = other.includeAcked_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SyncFromRequest Clone() {
      return new SyncFromRequest(this);
    }

    /// <summary>Field number for the "replicaId" field.</summary>
    public const int ReplicaIdFieldNumber = 1;
    private string replicaId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReplicaId {
      get { return replicaId_; }
      set {
        replicaId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "includeMine" field.</summary>
    public const int IncludeMineFieldNumber = 2;
    private bool includeMine_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IncludeMine {
      get { return includeMine_; }
      set {
        includeMine_ = value;
      }
    }

    /// <summary>Field number for the "includeAcked" field.</summary>
    public const int IncludeAckedFieldNumber = 3;
    private bool includeAcked_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IncludeAcked {
      get { return includeAcked_; }
      set {
        includeAcked_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SyncFromRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SyncFromRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReplicaId != other.ReplicaId) return false;
      if (IncludeMine != other.IncludeMine) return false;
      if (IncludeAcked != other.IncludeAcked) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReplicaId.Length != 0) hash ^= ReplicaId.GetHashCode();
      if (IncludeMine != false) hash ^= IncludeMine.GetHashCode();
      if (IncludeAcked != false) hash ^= IncludeAcked.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReplicaId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ReplicaId);
      }
      if (IncludeMine != false) {
        output.WriteRawTag(16);
        output.WriteBool(IncludeMine);
      }
      if (IncludeAcked != false) {
        output.WriteRawTag(24);
        output.WriteBool(IncludeAcked);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReplicaId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ReplicaId);
      }
      if (IncludeMine != false) {
        size += 1 + 1;
      }
      if (IncludeAcked != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SyncFromRequest other) {
      if (other == null) {
        return;
      }
      if (other.ReplicaId.Length != 0) {
        ReplicaId = other.ReplicaId;
      }
      if (other.IncludeMine != false) {
        IncludeMine = other.IncludeMine;
      }
      if (other.IncludeAcked != false) {
        IncludeAcked = other.IncludeAcked;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ReplicaId = input.ReadString();
            break;
          }
          case 16: {
            IncludeMine = input.ReadBool();
            break;
          }
          case 24: {
            IncludeAcked = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SyncSubscribeRequest : pb::IMessage<SyncSubscribeRequest> {
    private static readonly pb::MessageParser<SyncSubscribeRequest> _parser = new pb::MessageParser<SyncSubscribeRequest>(() => new SyncSubscribeRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SyncSubscribeRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LmdbCache.LmdbCacheRemotingReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SyncSubscribeRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SyncSubscribeRequest(SyncSubscribeRequest other) : this() {
      replicaId_ = other.replicaId_;
      since_ = other.since_ != null ? other.since_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SyncSubscribeRequest Clone() {
      return new SyncSubscribeRequest(this);
    }

    /// <summary>Field number for the "replicaId" field.</summary>
    public const int ReplicaIdFieldNumber = 1;
    private string replicaId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReplicaId {
      get { return replicaId_; }
      set {
        replicaId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "since" field.</summary>
    public const int SinceFieldNumber = 2;
    private global::LmdbCache.VectorClock since_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LmdbCache.VectorClock Since {
      get { return since_; }
      set {
        since_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SyncSubscribeRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SyncSubscribeRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReplicaId != other.ReplicaId) return false;
      if (!object.Equals(Since, other.Since)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReplicaId.Length != 0) hash ^= ReplicaId.GetHashCode();
      if (since_ != null) hash ^= Since.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReplicaId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ReplicaId);
      }
      if (since_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Since);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReplicaId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ReplicaId);
      }
      if (since_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Since);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SyncSubscribeRequest other) {
      if (other == null) {
        return;
      }
      if (other.ReplicaId.Length != 0) {
        ReplicaId = other.ReplicaId;
      }
      if (other.since_ != null) {
        if (since_ == null) {
          since_ = new global::LmdbCache.VectorClock();
        }
        Since.MergeFrom(other.Since);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ReplicaId = input.ReadString();
            break;
          }
          case 18: {
            if (since_ == null) {
              since_ = new global::LmdbCache.VectorClock();
            }
            input.ReadMessage(since_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SyncResponse : pb::IMessage<SyncResponse> {
    private static readonly pb::MessageParser<SyncResponse> _parser = new pb::MessageParser<SyncResponse>(() => new SyncResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SyncResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LmdbCache.LmdbCacheRemotingReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SyncResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SyncResponse(SyncResponse other) : this() {
      logEvent_ = other.logEvent_ != null ? other.logEvent_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SyncResponse Clone() {
      return new SyncResponse(this);
    }

    /// <summary>Field number for the "logEvent" field.</summary>
    public const int LogEventFieldNumber = 1;
    private global::LmdbCache.WriteLogEvent logEvent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LmdbCache.WriteLogEvent LogEvent {
      get { return logEvent_; }
      set {
        logEvent_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SyncResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SyncResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(LogEvent, other.LogEvent)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (logEvent_ != null) hash ^= LogEvent.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (logEvent_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(LogEvent);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (logEvent_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LogEvent);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SyncResponse other) {
      if (other == null) {
        return;
      }
      if (other.logEvent_ != null) {
        if (logEvent_ == null) {
          logEvent_ = new global::LmdbCache.WriteLogEvent();
        }
        LogEvent.MergeFrom(other.LogEvent);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (logEvent_ == null) {
              logEvent_ = new global::LmdbCache.WriteLogEvent();
            }
            input.ReadMessage(logEvent_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SyncAckRequest : pb::IMessage<SyncAckRequest> {
    private static readonly pb::MessageParser<SyncAckRequest> _parser = new pb::MessageParser<SyncAckRequest>(() => new SyncAckRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SyncAckRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LmdbCache.LmdbCacheRemotingReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SyncAckRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SyncAckRequest(SyncAckRequest other) : this() {
      eventId_ = other.eventId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SyncAckRequest Clone() {
      return new SyncAckRequest(this);
    }

    /// <summary>Field number for the "eventId" field.</summary>
    public const int EventIdFieldNumber = 1;
    private ulong eventId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong EventId {
      get { return eventId_; }
      set {
        eventId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SyncAckRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SyncAckRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EventId != other.EventId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EventId != 0UL) hash ^= EventId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EventId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(EventId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EventId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(EventId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SyncAckRequest other) {
      if (other == null) {
        return;
      }
      if (other.EventId != 0UL) {
        EventId = other.EventId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EventId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MonitoringUpdateRequest : pb::IMessage<MonitoringUpdateRequest> {
    private static readonly pb::MessageParser<MonitoringUpdateRequest> _parser = new pb::MessageParser<MonitoringUpdateRequest>(() => new MonitoringUpdateRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MonitoringUpdateRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LmdbCache.LmdbCacheRemotingReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonitoringUpdateRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonitoringUpdateRequest(MonitoringUpdateRequest other) : this() {
      correlationId_ = other.correlationId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonitoringUpdateRequest Clone() {
      return new MonitoringUpdateRequest(this);
    }

    /// <summary>Field number for the "correlationId" field.</summary>
    public const int CorrelationIdFieldNumber = 1;
    private string correlationId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CorrelationId {
      get { return correlationId_; }
      set {
        correlationId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MonitoringUpdateRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MonitoringUpdateRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CorrelationId != other.CorrelationId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CorrelationId.Length != 0) hash ^= CorrelationId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CorrelationId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CorrelationId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CorrelationId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CorrelationId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MonitoringUpdateRequest other) {
      if (other == null) {
        return;
      }
      if (other.CorrelationId.Length != 0) {
        CorrelationId = other.CorrelationId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            CorrelationId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MonitoringUpdateResponse : pb::IMessage<MonitoringUpdateResponse> {
    private static readonly pb::MessageParser<MonitoringUpdateResponse> _parser = new pb::MessageParser<MonitoringUpdateResponse>(() => new MonitoringUpdateResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MonitoringUpdateResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LmdbCache.LmdbCacheRemotingReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonitoringUpdateResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonitoringUpdateResponse(MonitoringUpdateResponse other) : this() {
      status_ = other.status_ != null ? other.status_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonitoringUpdateResponse Clone() {
      return new MonitoringUpdateResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::LmdbCache.ReplicaStatus status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LmdbCache.ReplicaStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MonitoringUpdateResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MonitoringUpdateResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Status, other.Status)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (status_ != null) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (status_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (status_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MonitoringUpdateResponse other) {
      if (other == null) {
        return;
      }
      if (other.status_ != null) {
        if (status_ == null) {
          status_ = new global::LmdbCache.ReplicaStatus();
        }
        Status.MergeFrom(other.Status);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (status_ == null) {
              status_ = new global::LmdbCache.ReplicaStatus();
            }
            input.ReadMessage(status_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReplicaStatus : pb::IMessage<ReplicaStatus> {
    private static readonly pb::MessageParser<ReplicaStatus> _parser = new pb::MessageParser<ReplicaStatus>(() => new ReplicaStatus());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReplicaStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LmdbCache.LmdbCacheRemotingReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplicaStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplicaStatus(ReplicaStatus other) : this() {
      replicaId_ = other.replicaId_;
      connectionInfo_ = other.connectionInfo_ != null ? other.connectionInfo_.Clone() : null;
      started_ = other.started_ != null ? other.started_.Clone() : null;
      replicaConfig_ = other.replicaConfig_ != null ? other.replicaConfig_.Clone() : null;
      currentClock_ = other.currentClock_ != null ? other.currentClock_.Clone() : null;
      counters_ = other.counters_ != null ? other.counters_.Clone() : null;
      clusterStatus_ = other.clusterStatus_ != null ? other.clusterStatus_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplicaStatus Clone() {
      return new ReplicaStatus(this);
    }

    /// <summary>Field number for the "replicaId" field.</summary>
    public const int ReplicaIdFieldNumber = 1;
    private string replicaId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReplicaId {
      get { return replicaId_; }
      set {
        replicaId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "connectionInfo" field.</summary>
    public const int ConnectionInfoFieldNumber = 2;
    private global::LmdbCache.ReplicaConnectionInfo connectionInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LmdbCache.ReplicaConnectionInfo ConnectionInfo {
      get { return connectionInfo_; }
      set {
        connectionInfo_ = value;
      }
    }

    /// <summary>Field number for the "started" field.</summary>
    public const int StartedFieldNumber = 3;
    private global::LmdbCache.Timestamp started_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LmdbCache.Timestamp Started {
      get { return started_; }
      set {
        started_ = value;
      }
    }

    /// <summary>Field number for the "replicaConfig" field.</summary>
    public const int ReplicaConfigFieldNumber = 4;
    private global::LmdbCache.ReplicaConfig replicaConfig_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LmdbCache.ReplicaConfig ReplicaConfig {
      get { return replicaConfig_; }
      set {
        replicaConfig_ = value;
      }
    }

    /// <summary>Field number for the "currentClock" field.</summary>
    public const int CurrentClockFieldNumber = 5;
    private global::LmdbCache.VectorClock currentClock_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LmdbCache.VectorClock CurrentClock {
      get { return currentClock_; }
      set {
        currentClock_ = value;
      }
    }

    /// <summary>Field number for the "counters" field.</summary>
    public const int CountersFieldNumber = 10;
    private global::LmdbCache.ReplicaCounters counters_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LmdbCache.ReplicaCounters Counters {
      get { return counters_; }
      set {
        counters_ = value;
      }
    }

    /// <summary>Field number for the "clusterStatus" field.</summary>
    public const int ClusterStatusFieldNumber = 11;
    private global::LmdbCache.ClusterStatus clusterStatus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LmdbCache.ClusterStatus ClusterStatus {
      get { return clusterStatus_; }
      set {
        clusterStatus_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReplicaStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReplicaStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReplicaId != other.ReplicaId) return false;
      if (!object.Equals(ConnectionInfo, other.ConnectionInfo)) return false;
      if (!object.Equals(Started, other.Started)) return false;
      if (!object.Equals(ReplicaConfig, other.ReplicaConfig)) return false;
      if (!object.Equals(CurrentClock, other.CurrentClock)) return false;
      if (!object.Equals(Counters, other.Counters)) return false;
      if (!object.Equals(ClusterStatus, other.ClusterStatus)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReplicaId.Length != 0) hash ^= ReplicaId.GetHashCode();
      if (connectionInfo_ != null) hash ^= ConnectionInfo.GetHashCode();
      if (started_ != null) hash ^= Started.GetHashCode();
      if (replicaConfig_ != null) hash ^= ReplicaConfig.GetHashCode();
      if (currentClock_ != null) hash ^= CurrentClock.GetHashCode();
      if (counters_ != null) hash ^= Counters.GetHashCode();
      if (clusterStatus_ != null) hash ^= ClusterStatus.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReplicaId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ReplicaId);
      }
      if (connectionInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ConnectionInfo);
      }
      if (started_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Started);
      }
      if (replicaConfig_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ReplicaConfig);
      }
      if (currentClock_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(CurrentClock);
      }
      if (counters_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Counters);
      }
      if (clusterStatus_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(ClusterStatus);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReplicaId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ReplicaId);
      }
      if (connectionInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConnectionInfo);
      }
      if (started_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Started);
      }
      if (replicaConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReplicaConfig);
      }
      if (currentClock_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CurrentClock);
      }
      if (counters_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Counters);
      }
      if (clusterStatus_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClusterStatus);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReplicaStatus other) {
      if (other == null) {
        return;
      }
      if (other.ReplicaId.Length != 0) {
        ReplicaId = other.ReplicaId;
      }
      if (other.connectionInfo_ != null) {
        if (connectionInfo_ == null) {
          connectionInfo_ = new global::LmdbCache.ReplicaConnectionInfo();
        }
        ConnectionInfo.MergeFrom(other.ConnectionInfo);
      }
      if (other.started_ != null) {
        if (started_ == null) {
          started_ = new global::LmdbCache.Timestamp();
        }
        Started.MergeFrom(other.Started);
      }
      if (other.replicaConfig_ != null) {
        if (replicaConfig_ == null) {
          replicaConfig_ = new global::LmdbCache.ReplicaConfig();
        }
        ReplicaConfig.MergeFrom(other.ReplicaConfig);
      }
      if (other.currentClock_ != null) {
        if (currentClock_ == null) {
          currentClock_ = new global::LmdbCache.VectorClock();
        }
        CurrentClock.MergeFrom(other.CurrentClock);
      }
      if (other.counters_ != null) {
        if (counters_ == null) {
          counters_ = new global::LmdbCache.ReplicaCounters();
        }
        Counters.MergeFrom(other.Counters);
      }
      if (other.clusterStatus_ != null) {
        if (clusterStatus_ == null) {
          clusterStatus_ = new global::LmdbCache.ClusterStatus();
        }
        ClusterStatus.MergeFrom(other.ClusterStatus);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ReplicaId = input.ReadString();
            break;
          }
          case 18: {
            if (connectionInfo_ == null) {
              connectionInfo_ = new global::LmdbCache.ReplicaConnectionInfo();
            }
            input.ReadMessage(connectionInfo_);
            break;
          }
          case 26: {
            if (started_ == null) {
              started_ = new global::LmdbCache.Timestamp();
            }
            input.ReadMessage(started_);
            break;
          }
          case 34: {
            if (replicaConfig_ == null) {
              replicaConfig_ = new global::LmdbCache.ReplicaConfig();
            }
            input.ReadMessage(replicaConfig_);
            break;
          }
          case 42: {
            if (currentClock_ == null) {
              currentClock_ = new global::LmdbCache.VectorClock();
            }
            input.ReadMessage(currentClock_);
            break;
          }
          case 82: {
            if (counters_ == null) {
              counters_ = new global::LmdbCache.ReplicaCounters();
            }
            input.ReadMessage(counters_);
            break;
          }
          case 90: {
            if (clusterStatus_ == null) {
              clusterStatus_ = new global::LmdbCache.ClusterStatus();
            }
            input.ReadMessage(clusterStatus_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ClusterStatus : pb::IMessage<ClusterStatus> {
    private static readonly pb::MessageParser<ClusterStatus> _parser = new pb::MessageParser<ClusterStatus>(() => new ClusterStatus());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClusterStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LmdbCache.LmdbCacheRemotingReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClusterStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClusterStatus(ClusterStatus other) : this() {
      replicas_ = other.replicas_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClusterStatus Clone() {
      return new ClusterStatus(this);
    }

    /// <summary>Field number for the "replicas" field.</summary>
    public const int ReplicasFieldNumber = 1;
    private static readonly pbc::MapField<string, global::LmdbCache.ReplicaConnectionInfo>.Codec _map_replicas_codec
        = new pbc::MapField<string, global::LmdbCache.ReplicaConnectionInfo>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::LmdbCache.ReplicaConnectionInfo.Parser), 10);
    private readonly pbc::MapField<string, global::LmdbCache.ReplicaConnectionInfo> replicas_ = new pbc::MapField<string, global::LmdbCache.ReplicaConnectionInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::LmdbCache.ReplicaConnectionInfo> Replicas {
      get { return replicas_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClusterStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClusterStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!Replicas.Equals(other.Replicas)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= Replicas.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      replicas_.WriteTo(output, _map_replicas_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += replicas_.CalculateSize(_map_replicas_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClusterStatus other) {
      if (other == null) {
        return;
      }
      replicas_.Add(other.replicas_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            replicas_.AddEntriesFrom(input, _map_replicas_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReplicaConnectionInfo : pb::IMessage<ReplicaConnectionInfo> {
    private static readonly pb::MessageParser<ReplicaConnectionInfo> _parser = new pb::MessageParser<ReplicaConnectionInfo>(() => new ReplicaConnectionInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReplicaConnectionInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LmdbCache.LmdbCacheRemotingReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplicaConnectionInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplicaConnectionInfo(ReplicaConnectionInfo other) : this() {
      host_ = other.host_;
      port_ = other.port_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplicaConnectionInfo Clone() {
      return new ReplicaConnectionInfo(this);
    }

    /// <summary>Field number for the "host" field.</summary>
    public const int HostFieldNumber = 1;
    private string host_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Host {
      get { return host_; }
      set {
        host_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 2;
    private uint port_;
    /// <summary>
    /// Some other metadata?
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReplicaConnectionInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReplicaConnectionInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Host != other.Host) return false;
      if (Port != other.Port) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Host.Length != 0) hash ^= Host.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Host.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Host);
      }
      if (Port != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Port);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Host.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Host);
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Port);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReplicaConnectionInfo other) {
      if (other == null) {
        return;
      }
      if (other.Host.Length != 0) {
        Host = other.Host;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Host = input.ReadString();
            break;
          }
          case 16: {
            Port = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// uint64 nonExpiredKeysCounter = 10;
  /// uint64 allKeysCounter        = 11;
  /// </summary>
  public sealed partial class ReplicaCounters : pb::IMessage<ReplicaCounters> {
    private static readonly pb::MessageParser<ReplicaCounters> _parser = new pb::MessageParser<ReplicaCounters>(() => new ReplicaCounters());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReplicaCounters> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LmdbCache.LmdbCacheRemotingReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplicaCounters() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplicaCounters(ReplicaCounters other) : this() {
      addsCounter_ = other.addsCounter_;
      deletesCounter_ = other.deletesCounter_;
      getCounter_ = other.getCounter_;
      containsCounter_ = other.containsCounter_;
      keySearchCounter_ = other.keySearchCounter_;
      largestValueSeen_ = other.largestValueSeen_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplicaCounters Clone() {
      return new ReplicaCounters(this);
    }

    /// <summary>Field number for the "addsCounter" field.</summary>
    public const int AddsCounterFieldNumber = 12;
    private ulong addsCounter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong AddsCounter {
      get { return addsCounter_; }
      set {
        addsCounter_ = value;
      }
    }

    /// <summary>Field number for the "deletesCounter" field.</summary>
    public const int DeletesCounterFieldNumber = 13;
    private ulong deletesCounter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong DeletesCounter {
      get { return deletesCounter_; }
      set {
        deletesCounter_ = value;
      }
    }

    /// <summary>Field number for the "getCounter" field.</summary>
    public const int GetCounterFieldNumber = 14;
    private ulong getCounter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GetCounter {
      get { return getCounter_; }
      set {
        getCounter_ = value;
      }
    }

    /// <summary>Field number for the "containsCounter" field.</summary>
    public const int ContainsCounterFieldNumber = 15;
    private ulong containsCounter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ContainsCounter {
      get { return containsCounter_; }
      set {
        containsCounter_ = value;
      }
    }

    /// <summary>Field number for the "keySearchCounter" field.</summary>
    public const int KeySearchCounterFieldNumber = 16;
    private ulong keySearchCounter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong KeySearchCounter {
      get { return keySearchCounter_; }
      set {
        keySearchCounter_ = value;
      }
    }

    /// <summary>Field number for the "largestValueSeen" field.</summary>
    public const int LargestValueSeenFieldNumber = 20;
    private ulong largestValueSeen_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong LargestValueSeen {
      get { return largestValueSeen_; }
      set {
        largestValueSeen_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReplicaCounters);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReplicaCounters other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AddsCounter != other.AddsCounter) return false;
      if (DeletesCounter != other.DeletesCounter) return false;
      if (GetCounter != other.GetCounter) return false;
      if (ContainsCounter != other.ContainsCounter) return false;
      if (KeySearchCounter != other.KeySearchCounter) return false;
      if (LargestValueSeen != other.LargestValueSeen) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AddsCounter != 0UL) hash ^= AddsCounter.GetHashCode();
      if (DeletesCounter != 0UL) hash ^= DeletesCounter.GetHashCode();
      if (GetCounter != 0UL) hash ^= GetCounter.GetHashCode();
      if (ContainsCounter != 0UL) hash ^= ContainsCounter.GetHashCode();
      if (KeySearchCounter != 0UL) hash ^= KeySearchCounter.GetHashCode();
      if (LargestValueSeen != 0UL) hash ^= LargestValueSeen.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AddsCounter != 0UL) {
        output.WriteRawTag(96);
        output.WriteUInt64(AddsCounter);
      }
      if (DeletesCounter != 0UL) {
        output.WriteRawTag(104);
        output.WriteUInt64(DeletesCounter);
      }
      if (GetCounter != 0UL) {
        output.WriteRawTag(112);
        output.WriteUInt64(GetCounter);
      }
      if (ContainsCounter != 0UL) {
        output.WriteRawTag(120);
        output.WriteUInt64(ContainsCounter);
      }
      if (KeySearchCounter != 0UL) {
        output.WriteRawTag(128, 1);
        output.WriteUInt64(KeySearchCounter);
      }
      if (LargestValueSeen != 0UL) {
        output.WriteRawTag(160, 1);
        output.WriteUInt64(LargestValueSeen);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AddsCounter != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AddsCounter);
      }
      if (DeletesCounter != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(DeletesCounter);
      }
      if (GetCounter != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GetCounter);
      }
      if (ContainsCounter != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ContainsCounter);
      }
      if (KeySearchCounter != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(KeySearchCounter);
      }
      if (LargestValueSeen != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(LargestValueSeen);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReplicaCounters other) {
      if (other == null) {
        return;
      }
      if (other.AddsCounter != 0UL) {
        AddsCounter = other.AddsCounter;
      }
      if (other.DeletesCounter != 0UL) {
        DeletesCounter = other.DeletesCounter;
      }
      if (other.GetCounter != 0UL) {
        GetCounter = other.GetCounter;
      }
      if (other.ContainsCounter != 0UL) {
        ContainsCounter = other.ContainsCounter;
      }
      if (other.KeySearchCounter != 0UL) {
        KeySearchCounter = other.KeySearchCounter;
      }
      if (other.LargestValueSeen != 0UL) {
        LargestValueSeen = other.LargestValueSeen;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 96: {
            AddsCounter = input.ReadUInt64();
            break;
          }
          case 104: {
            DeletesCounter = input.ReadUInt64();
            break;
          }
          case 112: {
            GetCounter = input.ReadUInt64();
            break;
          }
          case 120: {
            ContainsCounter = input.ReadUInt64();
            break;
          }
          case 128: {
            KeySearchCounter = input.ReadUInt64();
            break;
          }
          case 160: {
            LargestValueSeen = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
