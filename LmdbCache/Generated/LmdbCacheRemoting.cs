// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: lmdb_cache_remoting.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace LmdbCache {

  /// <summary>Holder for reflection information generated from lmdb_cache_remoting.proto</summary>
  public static partial class LmdbCacheRemotingReflection {

    #region Descriptor
    /// <summary>File descriptor for lmdb_cache_remoting.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static LmdbCacheRemotingReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChlsbWRiX2NhY2hlX3JlbW90aW5nLnByb3RvEglMbWRiQ2FjaGUiwQEKD0xp",
            "Z2h0bmluZ0NvbmZpZxIMCgRuYW1lGAEgASgJEhQKDHN0b3JhZ2VMaW1pdBgC",
            "IAEoBBIRCgltYXhUYWJsZXMYAyABKA0SJQodd3JpdGVCYXRjaFRpbWVvdXRN",
            "aWxsaXNlY29uZHMYBCABKA0SHgoWd3JpdGVCYXRjaE1heERlbGVnYXRlcxgF",
            "IAEoDRIwCghzeW5jTW9kZRgGIAEoDjIeLkxtZGJDYWNoZS5MaWdodG5pbmdE",
            "YlN5bmNNb2RlIl8KEVJlcGxpY2F0aW9uQ29uZmlnEgwKBHBvcnQYASABKA0S",
            "EAoIcGFnZVNpemUYAiABKA0SEwoLdXNlQmF0Y2hpbmcYAyABKAgSFQoNYXdh",
            "aXRTeW5jRnJvbRgEIAEoCCKBAgoNUmVwbGljYUNvbmZpZxIRCglyZXBsaWNh",
            "SWQYASABKAkSEAoIaG9zdE5hbWUYAiABKAkSDAoEcG9ydBgDIAEoDRIRCgl3",
            "ZWJVSVBvcnQYBCABKA0SFgoObW9uaXRvcmluZ1BvcnQYBSABKA0SGgoSbW9u",
            "aXRvcmluZ0ludGVydmFsGAYgASgNEhIKCm1hc3Rlck5vZGUYCiABKAkSLwoL",
            "cGVyc2lzdGVuY2UYDyABKAsyGi5MbWRiQ2FjaGUuTGlnaHRuaW5nQ29uZmln",
            "EjEKC3JlcGxpY2F0aW9uGBQgASgLMhwuTG1kYkNhY2hlLlJlcGxpY2F0aW9u",
            "Q29uZmlnIpgBCgxDbGllbnRDb25maWcSFAoMdXNlU3RyZWFtaW5nGAEgASgI",
            "EjkKC2NvbXByZXNzaW9uGAIgASgOMiQuTG1kYkNhY2hlLlZhbHVlTWV0YWRh",
            "dGEuQ29tcHJlc3Npb24SNwoKaGFzaGVkV2l0aBgDIAEoDjIjLkxtZGJDYWNo",
            "ZS5WYWx1ZU1ldGFkYXRhLkhhc2hlZFdpdGgiBwoFRW1wdHkiIwoJVGltZXN0",
            "YW1wEhYKDnRpY2tzT2Zmc2V0VXRjGAEgASgEIo4BCgtWZWN0b3JDbG9jaxI2",
            "CghyZXBsaWNhcxgBIAMoCzIkLkxtZGJDYWNoZS5WZWN0b3JDbG9jay5SZXBs",
            "aWNhc0VudHJ5EhYKDnRpY2tzT2Zmc2V0VXRjGAIgASgEGi8KDVJlcGxpY2Fz",
            "RW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgEOgI4ASL+AQoNVmFs",
            "dWVNZXRhZGF0YRI3CgpoYXNoZWRXaXRoGAEgASgOMiMuTG1kYkNhY2hlLlZh",
            "bHVlTWV0YWRhdGEuSGFzaGVkV2l0aBIMCgRoYXNoGAIgASgMEjkKC2NvbXBy",
            "ZXNzaW9uGAMgASgOMiQuTG1kYkNhY2hlLlZhbHVlTWV0YWRhdGEuQ29tcHJl",
            "c3Npb24SFgoOc2l6ZUNvbXByZXNzZWQYBCABKA0SEAoIc2l6ZUZ1bGwYBSAB",
            "KA0iFQoKSGFzaGVkV2l0aBIHCgNNRDUQACIqCgtDb21wcmVzc2lvbhIICgRO",
            "T05FEAASBwoDTFo0EAESCAoER1pJUBACIu0CCgpLdk1ldGFkYXRhEiwKBnN0",
            "YXR1cxgBIAEoDjIcLkxtZGJDYWNoZS5Ldk1ldGFkYXRhLlN0YXR1cxIkCgZl",
            "eHBpcnkYAiABKAsyFC5MbWRiQ2FjaGUuVGltZXN0YW1wEicKB3VwZGF0ZWQY",
            "AyABKAsyFi5MbWRiQ2FjaGUuVmVjdG9yQ2xvY2sSMgoGYWN0aW9uGAQgASgO",
            "MiIuTG1kYkNhY2hlLkt2TWV0YWRhdGEuVXBkYXRlQWN0aW9uEhUKDWNvcnJl",
            "bGF0aW9uSWQYBSABKAkSLwoNdmFsdWVNZXRhZGF0YRgGIAEoCzIYLkxtZGJD",
            "YWNoZS5WYWx1ZU1ldGFkYXRhIi4KBlN0YXR1cxIKCgZBQ1RJVkUQABILCgdE",
            "RUxFVEVEEAESCwoHRVhQSVJFRBACIjYKDFVwZGF0ZUFjdGlvbhIJCgVBRERF",
            "RBAAEgsKB1VQREFURUQQARIOCgpSRVBMSUNBVEVEEAIiyQIKCkFkZFJlcXVl",
            "c3QSLAoGaGVhZGVyGAEgASgLMhwuTG1kYkNhY2hlLkFkZFJlcXVlc3QuSGVh",
            "ZGVyEjYKB2VudHJpZXMYBSADKAsyJS5MbWRiQ2FjaGUuQWRkUmVxdWVzdC5B",
            "ZGRSZXF1ZXN0RW50cnkaTgoGSGVhZGVyEhgKEG92ZXJyaWRlRXhpc3RpbmcY",
            "ASABKAgSFQoNY29ycmVsYXRpb25JZBgCIAEoCRITCgtjaHVua3NDb3VudBgD",
            "IAEoDRqEAQoPQWRkUmVxdWVzdEVudHJ5EgsKA2tleRgBIAEoCRIkCgZleHBp",
            "cnkYAiABKAsyFC5MbWRiQ2FjaGUuVGltZXN0YW1wEi8KDXZhbHVlTWV0YWRh",
            "dGEYAyABKAsyGC5MbWRiQ2FjaGUuVmFsdWVNZXRhZGF0YRINCgV2YWx1ZRgE",
            "IAEoDCKSAQoLQWRkUmVzcG9uc2USMQoHcmVzdWx0cxgBIAMoDjIgLkxtZGJD",
            "YWNoZS5BZGRSZXNwb25zZS5BZGRSZXN1bHQiUAoJQWRkUmVzdWx0Eg0KCUtF",
            "WV9BRERFRBAAEg8KC0tFWV9VUERBVEVEEAESFgoSS0VZX0FMUkVBRFlfRVhJ",
            "U1RTEAISCwoHRkFJTFVSRRADItMBChBBZGRTdHJlYW1SZXF1ZXN0Ei4KBmhl",
            "YWRlchgBIAEoCzIcLkxtZGJDYWNoZS5BZGRSZXF1ZXN0LkhlYWRlckgAEjYK",
            "BWNodW5rGAIgASgLMiUuTG1kYkNhY2hlLkFkZFN0cmVhbVJlcXVlc3QuRGF0",
            "YUNodW5rSAAaUAoJRGF0YUNodW5rEg0KBWluZGV4GAEgASgNEjQKBWVudHJ5",
            "GAIgASgLMiUuTG1kYkNhY2hlLkFkZFJlcXVlc3QuQWRkUmVxdWVzdEVudHJ5",
            "QgUKA21zZyI0Cg1EZWxldGVSZXF1ZXN0EhUKDWNvcnJlbGF0aW9uSWQYASAB",
            "KAkSDAoEa2V5cxgCIAMoCSKCAQoORGVsZXRlUmVzcG9uc2USNwoHcmVzdWx0",
            "cxgBIAMoDjImLkxtZGJDYWNoZS5EZWxldGVSZXNwb25zZS5EZWxldGVSZXN1",
            "bHQiNwoMRGVsZXRlUmVzdWx0EgsKB1NVQ0NFU1MQABINCglOT1RfRk9VTkQQ",
            "ARILCgdGQUlMVVJFEAIiMQoKR2V0UmVxdWVzdBIVCg1jb3JyZWxhdGlvbklk",
            "GAEgASgJEgwKBGtleXMYAiADKAkipAIKC0dldFJlc3BvbnNlEjgKB3Jlc3Vs",
            "dHMYASADKAsyJy5MbWRiQ2FjaGUuR2V0UmVzcG9uc2UuR2V0UmVzcG9uc2VF",
            "bnRyeRraAQoQR2V0UmVzcG9uc2VFbnRyeRJBCgZyZXN1bHQYASABKA4yMS5M",
            "bWRiQ2FjaGUuR2V0UmVzcG9uc2UuR2V0UmVzcG9uc2VFbnRyeS5HZXRSZXN1",
            "bHQSDQoFaW5kZXgYAiABKA0SLwoNdmFsdWVNZXRhZGF0YRgDIAEoCzIYLkxt",
            "ZGJDYWNoZS5WYWx1ZU1ldGFkYXRhEg0KBXZhbHVlGAUgASgMIjQKCUdldFJl",
            "c3VsdBILCgdTVUNDRVNTEAASDQoJTk9UX0ZPVU5EEAESCwoHRkFJTFVSRRAC",
            "IkwKEUdldFN0cmVhbVJlc3BvbnNlEjcKBnJlc3VsdBgBIAEoCzInLkxtZGJD",
            "YWNoZS5HZXRSZXNwb25zZS5HZXRSZXNwb25zZUVudHJ5IicKFENvbnRhaW5z",
            "S2V5c1Jlc3BvbnNlEg8KB3Jlc3VsdHMYASADKAgiuAEKC0NvcHlSZXF1ZXN0",
            "EhUKDWNvcnJlbGF0aW9uSWQYASABKAkSOAoHZW50cmllcxgCIAMoCzInLkxt",
            "ZGJDYWNoZS5Db3B5UmVxdWVzdC5Db3B5UmVxdWVzdEVudHJ5GlgKEENvcHlS",
            "ZXF1ZXN0RW50cnkSDwoHa2V5RnJvbRgBIAEoCRIkCgZleHBpcnkYAiABKAsy",
            "FC5MbWRiQ2FjaGUuVGltZXN0YW1wEg0KBWtleVRvGAMgASgJIpYBCgxDb3B5",
            "UmVzcG9uc2USMwoHcmVzdWx0cxgBIAMoDjIiLkxtZGJDYWNoZS5Db3B5UmVz",
            "cG9uc2UuQ29weVJlc3VsdCJRCgpDb3B5UmVzdWx0EgsKB1NVQ0NFU1MQABIW",
            "ChJGUk9NX0tFWV9OT1RfRk9VTkQQARIRCg1UT19LRVlfRVhJU1RTEAISCwoH",
            "RkFJTFVSRRADIloKDktleUxpc3RSZXF1ZXN0EhEKCWtleVByZWZpeBgBIAEo",
            "CRIQCghwYWdlU2l6ZRgCIAEoDRIMCgRwYWdlGAMgASgNEhUKDWNvcnJlbGF0",
            "aW9uSWQYBCABKAkiHgoPS2V5TGlzdFJlc3BvbnNlEgsKA2tleRgBIAEoCSIy",
            "ChRLZXlWYWx1ZUxpc3RSZXNwb25zZRILCgNrZXkYASABKAkSDQoFdmFsdWUY",
            "AyABKAwiiAMKDVdyaXRlTG9nRXZlbnQSJQoFY2xvY2sYASABKAsyFi5MbWRi",
            "Q2FjaGUuVmVjdG9yQ2xvY2sSFQoNY29ycmVsYXRpb25JZBgCIAEoCRIbChNv",
            "cmlnaW5hdG9yUmVwbGljYUlkGAMgASgJEjoKB3VwZGF0ZWQYBSABKAsyJy5M",
            "bWRiQ2FjaGUuV3JpdGVMb2dFdmVudC5BZGRlZE9yVXBkYXRlZEgAEjMKB2Rl",
            "bGV0ZWQYByABKAsyIC5MbWRiQ2FjaGUuV3JpdGVMb2dFdmVudC5EZWxldGVk",
            "SAAagwEKDkFkZGVkT3JVcGRhdGVkEgsKA2tleRgBIAEoCRIkCgZleHBpcnkY",
            "AiABKAsyFC5MbWRiQ2FjaGUuVGltZXN0YW1wEi8KDXZhbHVlTWV0YWRhdGEY",
            "AyABKAsyGC5MbWRiQ2FjaGUuVmFsdWVNZXRhZGF0YRINCgV2YWx1ZRgEIAEo",
            "DBoWCgdEZWxldGVkEgsKA2tleRgBIAEoCUINCgtsb2dnZWRFdmVudCIpChRH",
            "ZXRSZXBsaWNhSWRSZXNwb25zZRIRCglyZXBsaWNhSWQYASABKAki0wMKClN5",
            "bmNQYWNrZXQSEQoJcmVwbGljYUlkGAEgASgJEjIKCHN5bmNGcm9tGAQgASgL",
            "Mh4uTG1kYkNhY2hlLlN5bmNQYWNrZXQuU3luY0Zyb21IABIsCgVpdGVtcxgF",
            "IAEoCzIbLkxtZGJDYWNoZS5TeW5jUGFja2V0Lkl0ZW1zSAASKgoEaXRlbRgG",
            "IAEoCzIaLkxtZGJDYWNoZS5TeW5jUGFja2V0Lkl0ZW1IABIwCgdza2lwUG9z",
            "GAcgASgLMh0uTG1kYkNhY2hlLlN5bmNQYWNrZXQuU2tpcFBvc0gAGlcKCFN5",
            "bmNGcm9tEhEKCXJlcGxpY2FJZBgBIAEoCRINCgVzaW5jZRgCIAEoBBITCgtp",
            "bmNsdWRlTWluZRgDIAEoCBIUCgxpbmNsdWRlQWNrZWQYBCABKAgaPwoESXRl",
            "bRILCgNwb3MYASABKAQSKgoIbG9nRXZlbnQYAiABKAsyGC5MbWRiQ2FjaGUu",
            "V3JpdGVMb2dFdmVudBoyCgVJdGVtcxIpCgViYXRjaBgBIAMoCzIaLkxtZGJD",
            "YWNoZS5TeW5jUGFja2V0Lkl0ZW0aGgoHU2tpcFBvcxIPCgdsYXN0UG9zGAEg",
            "ASgEQggKBnBhY2tldCIwChdNb25pdG9yaW5nVXBkYXRlUmVxdWVzdBIVCg1j",
            "b3JyZWxhdGlvbklkGAEgASgJIkQKGE1vbml0b3JpbmdVcGRhdGVSZXNwb25z",
            "ZRIoCgZzdGF0dXMYASABKAsyGC5MbWRiQ2FjaGUuUmVwbGljYVN0YXR1cyL0",
            "AgoNUmVwbGljYVN0YXR1cxIRCglyZXBsaWNhSWQYASABKAkSOAoOY29ubmVj",
            "dGlvbkluZm8YAiABKAsyIC5MbWRiQ2FjaGUuUmVwbGljYUNvbm5lY3Rpb25J",
            "bmZvEiUKB3N0YXJ0ZWQYAyABKAsyFC5MbWRiQ2FjaGUuVGltZXN0YW1wEi8K",
            "DXJlcGxpY2FDb25maWcYBCABKAsyGC5MbWRiQ2FjaGUuUmVwbGljYUNvbmZp",
            "ZxIsCgxjdXJyZW50Q2xvY2sYBSABKAsyFi5MbWRiQ2FjaGUuVmVjdG9yQ2xv",
            "Y2sSLAoIY291bnRlcnMYCiABKAsyGi5MbWRiQ2FjaGUuUmVwbGljYUNvdW50",
            "ZXJzEjEKDmNvbGxlY3RlZFN0YXRzGAsgASgLMhkuTG1kYkNhY2hlLkNvbGxl",
            "Y3RlZFN0YXRzEi8KDWNsdXN0ZXJTdGF0dXMYDCABKAsyGC5MbWRiQ2FjaGUu",
            "Q2x1c3RlclN0YXR1cyKcAQoNQ2x1c3RlclN0YXR1cxI4CghyZXBsaWNhcxgB",
            "IAMoCzImLkxtZGJDYWNoZS5DbHVzdGVyU3RhdHVzLlJlcGxpY2FzRW50cnka",
            "UQoNUmVwbGljYXNFbnRyeRILCgNrZXkYASABKAkSLwoFdmFsdWUYAiABKAsy",
            "IC5MbWRiQ2FjaGUuUmVwbGljYUNvbm5lY3Rpb25JbmZvOgI4ASIzChVSZXBs",
            "aWNhQ29ubmVjdGlvbkluZm8SDAoEaG9zdBgBIAEoCRIMCgRwb3J0GAIgASgN",
            "IroCCg9SZXBsaWNhQ291bnRlcnMSEwoLYWRkc0NvdW50ZXIYASABKAQSFgoO",
            "ZGVsZXRlc0NvdW50ZXIYAiABKAQSFAoMY29weXNDb3VudGVyGAMgASgEEhIK",
            "CmdldENvdW50ZXIYBCABKAQSFwoPY29udGFpbnNDb3VudGVyGAUgASgEEhgK",
            "EGtleVNlYXJjaENvdW50ZXIYBiABKAQSHQoVbWV0YWRhdGFTZWFyY2hDb3Vu",
            "dGVyGAcgASgEEhkKEXBhZ2VTZWFyY2hDb3VudGVyGAggASgEEhYKDmxhcmdl",
            "c3RLZXlTaXplGAogASgNEhgKEGxhcmdlc3RWYWx1ZVNpemUYCyABKA0SFgoO",
            "cmVwbGljYXRlZEFkZHMYDyABKAQSGQoRcmVwbGljYXRlZERlbGV0ZXMYECAB",
            "KAQidwoOQ29sbGVjdGVkU3RhdHMSFgoObm9uRXhwaXJlZEtleXMYCiABKAQS",
            "DwoHYWxsS2V5cxgLIAEoBBISCgphY3RpdmVLZXlzGAwgASgEEhMKC2RlbGV0",
            "ZWRLZXlzGA0gASgEEhMKC2V4cGlyZWRLZXlzGA4gASgEKkUKE0xpZ2h0bmlu",
            "Z0RiU3luY01vZGUSCQoFRlN5bmMQABIJCgVBc3luYxABEgoKBk5vU3luYxAC",
            "EgwKCFJlYWRPbmx5EAMy7AQKEExtZGJDYWNoZVNlcnZpY2USNgoDQWRkEhUu",
            "TG1kYkNhY2hlLkFkZFJlcXVlc3QaFi5MbWRiQ2FjaGUuQWRkUmVzcG9uc2Ui",
            "ABJECglBZGRTdHJlYW0SGy5MbWRiQ2FjaGUuQWRkU3RyZWFtUmVxdWVzdBoW",
            "LkxtZGJDYWNoZS5BZGRSZXNwb25zZSIAKAESPwoGRGVsZXRlEhguTG1kYkNh",
            "Y2hlLkRlbGV0ZVJlcXVlc3QaGS5MbWRiQ2FjaGUuRGVsZXRlUmVzcG9uc2Ui",
            "ABI5CgRDb3B5EhYuTG1kYkNhY2hlLkNvcHlSZXF1ZXN0GhcuTG1kYkNhY2hl",
            "LkNvcHlSZXNwb25zZSIAEjYKA0dldBIVLkxtZGJDYWNoZS5HZXRSZXF1ZXN0",
            "GhYuTG1kYkNhY2hlLkdldFJlc3BvbnNlIgASRAoJR2V0U3RyZWFtEhUuTG1k",
            "YkNhY2hlLkdldFJlcXVlc3QaHC5MbWRiQ2FjaGUuR2V0U3RyZWFtUmVzcG9u",
            "c2UiADABEkgKDENvbnRhaW5zS2V5cxIVLkxtZGJDYWNoZS5HZXRSZXF1ZXN0",
            "Gh8uTG1kYkNhY2hlLkNvbnRhaW5zS2V5c1Jlc3BvbnNlIgASRQoITGlzdEtl",
            "eXMSGS5MbWRiQ2FjaGUuS2V5TGlzdFJlcXVlc3QaGi5MbWRiQ2FjaGUuS2V5",
            "TGlzdFJlc3BvbnNlIgAwARJPCg1MaXN0S2V5VmFsdWVzEhkuTG1kYkNhY2hl",
            "LktleUxpc3RSZXF1ZXN0Gh8uTG1kYkNhY2hlLktleVZhbHVlTGlzdFJlc3Bv",
            "bnNlIgAwATKOAQoLU3luY1NlcnZpY2USQwoMR2V0UmVwbGljYUlkEhAuTG1k",
            "YkNhY2hlLkVtcHR5Gh8uTG1kYkNhY2hlLkdldFJlcGxpY2FJZFJlc3BvbnNl",
            "IgASOgoEU3luYxIVLkxtZGJDYWNoZS5TeW5jUGFja2V0GhUuTG1kYkNhY2hl",
            "LlN5bmNQYWNrZXQiACgBMAEyxQEKEU1vbml0b3JpbmdTZXJ2aWNlElYKCUdl",
            "dFN0YXR1cxIiLkxtZGJDYWNoZS5Nb25pdG9yaW5nVXBkYXRlUmVxdWVzdBoj",
            "LkxtZGJDYWNoZS5Nb25pdG9yaW5nVXBkYXRlUmVzcG9uc2UiABJYCglTdWJz",
            "Y3JpYmUSIi5MbWRiQ2FjaGUuTW9uaXRvcmluZ1VwZGF0ZVJlcXVlc3QaIy5M",
            "bWRiQ2FjaGUuTW9uaXRvcmluZ1VwZGF0ZVJlc3BvbnNlIgAwAUIMqgIJTG1k",
            "YkNhY2hlYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::LmdbCache.LightningDbSyncMode), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::LmdbCache.LightningConfig), global::LmdbCache.LightningConfig.Parser, new[]{ "Name", "StorageLimit", "MaxTables", "WriteBatchTimeoutMilliseconds", "WriteBatchMaxDelegates", "SyncMode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LmdbCache.ReplicationConfig), global::LmdbCache.ReplicationConfig.Parser, new[]{ "Port", "PageSize", "UseBatching", "AwaitSyncFrom" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LmdbCache.ReplicaConfig), global::LmdbCache.ReplicaConfig.Parser, new[]{ "ReplicaId", "HostName", "Port", "WebUIPort", "MonitoringPort", "MonitoringInterval", "MasterNode", "Persistence", "Replication" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LmdbCache.ClientConfig), global::LmdbCache.ClientConfig.Parser, new[]{ "UseStreaming", "Compression", "HashedWith" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LmdbCache.Empty), global::LmdbCache.Empty.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LmdbCache.Timestamp), global::LmdbCache.Timestamp.Parser, new[]{ "TicksOffsetUtc" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LmdbCache.VectorClock), global::LmdbCache.VectorClock.Parser, new[]{ "Replicas", "TicksOffsetUtc" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::LmdbCache.ValueMetadata), global::LmdbCache.ValueMetadata.Parser, new[]{ "HashedWith", "Hash", "Compression", "SizeCompressed", "SizeFull" }, null, new[]{ typeof(global::LmdbCache.ValueMetadata.Types.HashedWith), typeof(global::LmdbCache.ValueMetadata.Types.Compression) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LmdbCache.KvMetadata), global::LmdbCache.KvMetadata.Parser, new[]{ "Status", "Expiry", "Updated", "Action", "CorrelationId", "ValueMetadata" }, null, new[]{ typeof(global::LmdbCache.KvMetadata.Types.Status), typeof(global::LmdbCache.KvMetadata.Types.UpdateAction) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LmdbCache.AddRequest), global::LmdbCache.AddRequest.Parser, new[]{ "Header", "Entries" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::LmdbCache.AddRequest.Types.Header), global::LmdbCache.AddRequest.Types.Header.Parser, new[]{ "OverrideExisting", "CorrelationId", "ChunksCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LmdbCache.AddRequest.Types.AddRequestEntry), global::LmdbCache.AddRequest.Types.AddRequestEntry.Parser, new[]{ "Key", "Expiry", "ValueMetadata", "Value" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::LmdbCache.AddResponse), global::LmdbCache.AddResponse.Parser, new[]{ "Results" }, null, new[]{ typeof(global::LmdbCache.AddResponse.Types.AddResult) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LmdbCache.AddStreamRequest), global::LmdbCache.AddStreamRequest.Parser, new[]{ "Header", "Chunk" }, new[]{ "Msg" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::LmdbCache.AddStreamRequest.Types.DataChunk), global::LmdbCache.AddStreamRequest.Types.DataChunk.Parser, new[]{ "Index", "Entry" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::LmdbCache.DeleteRequest), global::LmdbCache.DeleteRequest.Parser, new[]{ "CorrelationId", "Keys" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LmdbCache.DeleteResponse), global::LmdbCache.DeleteResponse.Parser, new[]{ "Results" }, null, new[]{ typeof(global::LmdbCache.DeleteResponse.Types.DeleteResult) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LmdbCache.GetRequest), global::LmdbCache.GetRequest.Parser, new[]{ "CorrelationId", "Keys" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LmdbCache.GetResponse), global::LmdbCache.GetResponse.Parser, new[]{ "Results" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::LmdbCache.GetResponse.Types.GetResponseEntry), global::LmdbCache.GetResponse.Types.GetResponseEntry.Parser, new[]{ "Result", "Index", "ValueMetadata", "Value" }, null, new[]{ typeof(global::LmdbCache.GetResponse.Types.GetResponseEntry.Types.GetResult) }, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::LmdbCache.GetStreamResponse), global::LmdbCache.GetStreamResponse.Parser, new[]{ "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LmdbCache.ContainsKeysResponse), global::LmdbCache.ContainsKeysResponse.Parser, new[]{ "Results" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LmdbCache.CopyRequest), global::LmdbCache.CopyRequest.Parser, new[]{ "CorrelationId", "Entries" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::LmdbCache.CopyRequest.Types.CopyRequestEntry), global::LmdbCache.CopyRequest.Types.CopyRequestEntry.Parser, new[]{ "KeyFrom", "Expiry", "KeyTo" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::LmdbCache.CopyResponse), global::LmdbCache.CopyResponse.Parser, new[]{ "Results" }, null, new[]{ typeof(global::LmdbCache.CopyResponse.Types.CopyResult) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LmdbCache.KeyListRequest), global::LmdbCache.KeyListRequest.Parser, new[]{ "KeyPrefix", "PageSize", "Page", "CorrelationId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LmdbCache.KeyListResponse), global::LmdbCache.KeyListResponse.Parser, new[]{ "Key" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LmdbCache.KeyValueListResponse), global::LmdbCache.KeyValueListResponse.Parser, new[]{ "Key", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LmdbCache.WriteLogEvent), global::LmdbCache.WriteLogEvent.Parser, new[]{ "Clock", "CorrelationId", "OriginatorReplicaId", "Updated", "Deleted" }, new[]{ "LoggedEvent" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::LmdbCache.WriteLogEvent.Types.AddedOrUpdated), global::LmdbCache.WriteLogEvent.Types.AddedOrUpdated.Parser, new[]{ "Key", "Expiry", "ValueMetadata", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LmdbCache.WriteLogEvent.Types.Deleted), global::LmdbCache.WriteLogEvent.Types.Deleted.Parser, new[]{ "Key" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::LmdbCache.GetReplicaIdResponse), global::LmdbCache.GetReplicaIdResponse.Parser, new[]{ "ReplicaId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LmdbCache.SyncPacket), global::LmdbCache.SyncPacket.Parser, new[]{ "ReplicaId", "SyncFrom", "Items", "Item", "SkipPos" }, new[]{ "Packet" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::LmdbCache.SyncPacket.Types.SyncFrom), global::LmdbCache.SyncPacket.Types.SyncFrom.Parser, new[]{ "ReplicaId", "Since", "IncludeMine", "IncludeAcked" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LmdbCache.SyncPacket.Types.Item), global::LmdbCache.SyncPacket.Types.Item.Parser, new[]{ "Pos", "LogEvent" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LmdbCache.SyncPacket.Types.Items), global::LmdbCache.SyncPacket.Types.Items.Parser, new[]{ "Batch" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LmdbCache.SyncPacket.Types.SkipPos), global::LmdbCache.SyncPacket.Types.SkipPos.Parser, new[]{ "LastPos" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::LmdbCache.MonitoringUpdateRequest), global::LmdbCache.MonitoringUpdateRequest.Parser, new[]{ "CorrelationId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LmdbCache.MonitoringUpdateResponse), global::LmdbCache.MonitoringUpdateResponse.Parser, new[]{ "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LmdbCache.ReplicaStatus), global::LmdbCache.ReplicaStatus.Parser, new[]{ "ReplicaId", "ConnectionInfo", "Started", "ReplicaConfig", "CurrentClock", "Counters", "CollectedStats", "ClusterStatus" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LmdbCache.ClusterStatus), global::LmdbCache.ClusterStatus.Parser, new[]{ "Replicas" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::LmdbCache.ReplicaConnectionInfo), global::LmdbCache.ReplicaConnectionInfo.Parser, new[]{ "Host", "Port" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LmdbCache.ReplicaCounters), global::LmdbCache.ReplicaCounters.Parser, new[]{ "AddsCounter", "DeletesCounter", "CopysCounter", "GetCounter", "ContainsCounter", "KeySearchCounter", "MetadataSearchCounter", "PageSearchCounter", "LargestKeySize", "LargestValueSize", "ReplicatedAdds", "ReplicatedDeletes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LmdbCache.CollectedStats), global::LmdbCache.CollectedStats.Parser, new[]{ "NonExpiredKeys", "AllKeys", "ActiveKeys", "DeletedKeys", "ExpiredKeys" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum LightningDbSyncMode {
    /// <summary>
    /// SAFE
    /// </summary>
    [pbr::OriginalName("FSync")] Fsync = 0,
    /// <summary>
    /// SANE
    /// </summary>
    [pbr::OriginalName("Async")] Async = 1,
    /// <summary>
    /// INSANE
    /// </summary>
    [pbr::OriginalName("NoSync")] NoSync = 2,
    [pbr::OriginalName("ReadOnly")] ReadOnly = 3,
  }

  #endregion

  #region Messages
  public sealed partial class LightningConfig : pb::IMessage<LightningConfig> {
    private static readonly pb::MessageParser<LightningConfig> _parser = new pb::MessageParser<LightningConfig>(() => new LightningConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LightningConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LmdbCache.LmdbCacheRemotingReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LightningConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LightningConfig(LightningConfig other) : this() {
      name_ = other.name_;
      storageLimit_ = other.storageLimit_;
      maxTables_ = other.maxTables_;
      writeBatchTimeoutMilliseconds_ = other.writeBatchTimeoutMilliseconds_;
      writeBatchMaxDelegates_ = other.writeBatchMaxDelegates_;
      syncMode_ = other.syncMode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LightningConfig Clone() {
      return new LightningConfig(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "storageLimit" field.</summary>
    public const int StorageLimitFieldNumber = 2;
    private ulong storageLimit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong StorageLimit {
      get { return storageLimit_; }
      set {
        storageLimit_ = value;
      }
    }

    /// <summary>Field number for the "maxTables" field.</summary>
    public const int MaxTablesFieldNumber = 3;
    private uint maxTables_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxTables {
      get { return maxTables_; }
      set {
        maxTables_ = value;
      }
    }

    /// <summary>Field number for the "writeBatchTimeoutMilliseconds" field.</summary>
    public const int WriteBatchTimeoutMillisecondsFieldNumber = 4;
    private uint writeBatchTimeoutMilliseconds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint WriteBatchTimeoutMilliseconds {
      get { return writeBatchTimeoutMilliseconds_; }
      set {
        writeBatchTimeoutMilliseconds_ = value;
      }
    }

    /// <summary>Field number for the "writeBatchMaxDelegates" field.</summary>
    public const int WriteBatchMaxDelegatesFieldNumber = 5;
    private uint writeBatchMaxDelegates_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint WriteBatchMaxDelegates {
      get { return writeBatchMaxDelegates_; }
      set {
        writeBatchMaxDelegates_ = value;
      }
    }

    /// <summary>Field number for the "syncMode" field.</summary>
    public const int SyncModeFieldNumber = 6;
    private global::LmdbCache.LightningDbSyncMode syncMode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LmdbCache.LightningDbSyncMode SyncMode {
      get { return syncMode_; }
      set {
        syncMode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LightningConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LightningConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (StorageLimit != other.StorageLimit) return false;
      if (MaxTables != other.MaxTables) return false;
      if (WriteBatchTimeoutMilliseconds != other.WriteBatchTimeoutMilliseconds) return false;
      if (WriteBatchMaxDelegates != other.WriteBatchMaxDelegates) return false;
      if (SyncMode != other.SyncMode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (StorageLimit != 0UL) hash ^= StorageLimit.GetHashCode();
      if (MaxTables != 0) hash ^= MaxTables.GetHashCode();
      if (WriteBatchTimeoutMilliseconds != 0) hash ^= WriteBatchTimeoutMilliseconds.GetHashCode();
      if (WriteBatchMaxDelegates != 0) hash ^= WriteBatchMaxDelegates.GetHashCode();
      if (SyncMode != 0) hash ^= SyncMode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (StorageLimit != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(StorageLimit);
      }
      if (MaxTables != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(MaxTables);
      }
      if (WriteBatchTimeoutMilliseconds != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(WriteBatchTimeoutMilliseconds);
      }
      if (WriteBatchMaxDelegates != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(WriteBatchMaxDelegates);
      }
      if (SyncMode != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) SyncMode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (StorageLimit != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(StorageLimit);
      }
      if (MaxTables != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxTables);
      }
      if (WriteBatchTimeoutMilliseconds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WriteBatchTimeoutMilliseconds);
      }
      if (WriteBatchMaxDelegates != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WriteBatchMaxDelegates);
      }
      if (SyncMode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SyncMode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LightningConfig other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.StorageLimit != 0UL) {
        StorageLimit = other.StorageLimit;
      }
      if (other.MaxTables != 0) {
        MaxTables = other.MaxTables;
      }
      if (other.WriteBatchTimeoutMilliseconds != 0) {
        WriteBatchTimeoutMilliseconds = other.WriteBatchTimeoutMilliseconds;
      }
      if (other.WriteBatchMaxDelegates != 0) {
        WriteBatchMaxDelegates = other.WriteBatchMaxDelegates;
      }
      if (other.SyncMode != 0) {
        SyncMode = other.SyncMode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            StorageLimit = input.ReadUInt64();
            break;
          }
          case 24: {
            MaxTables = input.ReadUInt32();
            break;
          }
          case 32: {
            WriteBatchTimeoutMilliseconds = input.ReadUInt32();
            break;
          }
          case 40: {
            WriteBatchMaxDelegates = input.ReadUInt32();
            break;
          }
          case 48: {
            syncMode_ = (global::LmdbCache.LightningDbSyncMode) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReplicationConfig : pb::IMessage<ReplicationConfig> {
    private static readonly pb::MessageParser<ReplicationConfig> _parser = new pb::MessageParser<ReplicationConfig>(() => new ReplicationConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReplicationConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LmdbCache.LmdbCacheRemotingReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplicationConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplicationConfig(ReplicationConfig other) : this() {
      port_ = other.port_;
      pageSize_ = other.pageSize_;
      useBatching_ = other.useBatching_;
      awaitSyncFrom_ = other.awaitSyncFrom_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplicationConfig Clone() {
      return new ReplicationConfig(this);
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 1;
    private uint port_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    /// <summary>Field number for the "pageSize" field.</summary>
    public const int PageSizeFieldNumber = 2;
    private uint pageSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    /// <summary>Field number for the "useBatching" field.</summary>
    public const int UseBatchingFieldNumber = 3;
    private bool useBatching_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseBatching {
      get { return useBatching_; }
      set {
        useBatching_ = value;
      }
    }

    /// <summary>Field number for the "awaitSyncFrom" field.</summary>
    public const int AwaitSyncFromFieldNumber = 4;
    private bool awaitSyncFrom_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AwaitSyncFrom {
      get { return awaitSyncFrom_; }
      set {
        awaitSyncFrom_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReplicationConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReplicationConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Port != other.Port) return false;
      if (PageSize != other.PageSize) return false;
      if (UseBatching != other.UseBatching) return false;
      if (AwaitSyncFrom != other.AwaitSyncFrom) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Port != 0) hash ^= Port.GetHashCode();
      if (PageSize != 0) hash ^= PageSize.GetHashCode();
      if (UseBatching != false) hash ^= UseBatching.GetHashCode();
      if (AwaitSyncFrom != false) hash ^= AwaitSyncFrom.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Port != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Port);
      }
      if (PageSize != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(PageSize);
      }
      if (UseBatching != false) {
        output.WriteRawTag(24);
        output.WriteBool(UseBatching);
      }
      if (AwaitSyncFrom != false) {
        output.WriteRawTag(32);
        output.WriteBool(AwaitSyncFrom);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Port);
      }
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PageSize);
      }
      if (UseBatching != false) {
        size += 1 + 1;
      }
      if (AwaitSyncFrom != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReplicationConfig other) {
      if (other == null) {
        return;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
      if (other.PageSize != 0) {
        PageSize = other.PageSize;
      }
      if (other.UseBatching != false) {
        UseBatching = other.UseBatching;
      }
      if (other.AwaitSyncFrom != false) {
        AwaitSyncFrom = other.AwaitSyncFrom;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Port = input.ReadUInt32();
            break;
          }
          case 16: {
            PageSize = input.ReadUInt32();
            break;
          }
          case 24: {
            UseBatching = input.ReadBool();
            break;
          }
          case 32: {
            AwaitSyncFrom = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReplicaConfig : pb::IMessage<ReplicaConfig> {
    private static readonly pb::MessageParser<ReplicaConfig> _parser = new pb::MessageParser<ReplicaConfig>(() => new ReplicaConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReplicaConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LmdbCache.LmdbCacheRemotingReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplicaConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplicaConfig(ReplicaConfig other) : this() {
      replicaId_ = other.replicaId_;
      hostName_ = other.hostName_;
      port_ = other.port_;
      webUIPort_ = other.webUIPort_;
      monitoringPort_ = other.monitoringPort_;
      monitoringInterval_ = other.monitoringInterval_;
      masterNode_ = other.masterNode_;
      persistence_ = other.persistence_ != null ? other.persistence_.Clone() : null;
      replication_ = other.replication_ != null ? other.replication_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplicaConfig Clone() {
      return new ReplicaConfig(this);
    }

    /// <summary>Field number for the "replicaId" field.</summary>
    public const int ReplicaIdFieldNumber = 1;
    private string replicaId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReplicaId {
      get { return replicaId_; }
      set {
        replicaId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "hostName" field.</summary>
    public const int HostNameFieldNumber = 2;
    private string hostName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HostName {
      get { return hostName_; }
      set {
        hostName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 3;
    private uint port_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    /// <summary>Field number for the "webUIPort" field.</summary>
    public const int WebUIPortFieldNumber = 4;
    private uint webUIPort_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint WebUIPort {
      get { return webUIPort_; }
      set {
        webUIPort_ = value;
      }
    }

    /// <summary>Field number for the "monitoringPort" field.</summary>
    public const int MonitoringPortFieldNumber = 5;
    private uint monitoringPort_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MonitoringPort {
      get { return monitoringPort_; }
      set {
        monitoringPort_ = value;
      }
    }

    /// <summary>Field number for the "monitoringInterval" field.</summary>
    public const int MonitoringIntervalFieldNumber = 6;
    private uint monitoringInterval_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MonitoringInterval {
      get { return monitoringInterval_; }
      set {
        monitoringInterval_ = value;
      }
    }

    /// <summary>Field number for the "masterNode" field.</summary>
    public const int MasterNodeFieldNumber = 10;
    private string masterNode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MasterNode {
      get { return masterNode_; }
      set {
        masterNode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "persistence" field.</summary>
    public const int PersistenceFieldNumber = 15;
    private global::LmdbCache.LightningConfig persistence_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LmdbCache.LightningConfig Persistence {
      get { return persistence_; }
      set {
        persistence_ = value;
      }
    }

    /// <summary>Field number for the "replication" field.</summary>
    public const int ReplicationFieldNumber = 20;
    private global::LmdbCache.ReplicationConfig replication_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LmdbCache.ReplicationConfig Replication {
      get { return replication_; }
      set {
        replication_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReplicaConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReplicaConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReplicaId != other.ReplicaId) return false;
      if (HostName != other.HostName) return false;
      if (Port != other.Port) return false;
      if (WebUIPort != other.WebUIPort) return false;
      if (MonitoringPort != other.MonitoringPort) return false;
      if (MonitoringInterval != other.MonitoringInterval) return false;
      if (MasterNode != other.MasterNode) return false;
      if (!object.Equals(Persistence, other.Persistence)) return false;
      if (!object.Equals(Replication, other.Replication)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReplicaId.Length != 0) hash ^= ReplicaId.GetHashCode();
      if (HostName.Length != 0) hash ^= HostName.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      if (WebUIPort != 0) hash ^= WebUIPort.GetHashCode();
      if (MonitoringPort != 0) hash ^= MonitoringPort.GetHashCode();
      if (MonitoringInterval != 0) hash ^= MonitoringInterval.GetHashCode();
      if (MasterNode.Length != 0) hash ^= MasterNode.GetHashCode();
      if (persistence_ != null) hash ^= Persistence.GetHashCode();
      if (replication_ != null) hash ^= Replication.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReplicaId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ReplicaId);
      }
      if (HostName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(HostName);
      }
      if (Port != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Port);
      }
      if (WebUIPort != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(WebUIPort);
      }
      if (MonitoringPort != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(MonitoringPort);
      }
      if (MonitoringInterval != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(MonitoringInterval);
      }
      if (MasterNode.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(MasterNode);
      }
      if (persistence_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(Persistence);
      }
      if (replication_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(Replication);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReplicaId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ReplicaId);
      }
      if (HostName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HostName);
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Port);
      }
      if (WebUIPort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WebUIPort);
      }
      if (MonitoringPort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MonitoringPort);
      }
      if (MonitoringInterval != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MonitoringInterval);
      }
      if (MasterNode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MasterNode);
      }
      if (persistence_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Persistence);
      }
      if (replication_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Replication);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReplicaConfig other) {
      if (other == null) {
        return;
      }
      if (other.ReplicaId.Length != 0) {
        ReplicaId = other.ReplicaId;
      }
      if (other.HostName.Length != 0) {
        HostName = other.HostName;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
      if (other.WebUIPort != 0) {
        WebUIPort = other.WebUIPort;
      }
      if (other.MonitoringPort != 0) {
        MonitoringPort = other.MonitoringPort;
      }
      if (other.MonitoringInterval != 0) {
        MonitoringInterval = other.MonitoringInterval;
      }
      if (other.MasterNode.Length != 0) {
        MasterNode = other.MasterNode;
      }
      if (other.persistence_ != null) {
        if (persistence_ == null) {
          persistence_ = new global::LmdbCache.LightningConfig();
        }
        Persistence.MergeFrom(other.Persistence);
      }
      if (other.replication_ != null) {
        if (replication_ == null) {
          replication_ = new global::LmdbCache.ReplicationConfig();
        }
        Replication.MergeFrom(other.Replication);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ReplicaId = input.ReadString();
            break;
          }
          case 18: {
            HostName = input.ReadString();
            break;
          }
          case 24: {
            Port = input.ReadUInt32();
            break;
          }
          case 32: {
            WebUIPort = input.ReadUInt32();
            break;
          }
          case 40: {
            MonitoringPort = input.ReadUInt32();
            break;
          }
          case 48: {
            MonitoringInterval = input.ReadUInt32();
            break;
          }
          case 82: {
            MasterNode = input.ReadString();
            break;
          }
          case 122: {
            if (persistence_ == null) {
              persistence_ = new global::LmdbCache.LightningConfig();
            }
            input.ReadMessage(persistence_);
            break;
          }
          case 162: {
            if (replication_ == null) {
              replication_ = new global::LmdbCache.ReplicationConfig();
            }
            input.ReadMessage(replication_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ClientConfig : pb::IMessage<ClientConfig> {
    private static readonly pb::MessageParser<ClientConfig> _parser = new pb::MessageParser<ClientConfig>(() => new ClientConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClientConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LmdbCache.LmdbCacheRemotingReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientConfig(ClientConfig other) : this() {
      useStreaming_ = other.useStreaming_;
      compression_ = other.compression_;
      hashedWith_ = other.hashedWith_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientConfig Clone() {
      return new ClientConfig(this);
    }

    /// <summary>Field number for the "useStreaming" field.</summary>
    public const int UseStreamingFieldNumber = 1;
    private bool useStreaming_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseStreaming {
      get { return useStreaming_; }
      set {
        useStreaming_ = value;
      }
    }

    /// <summary>Field number for the "compression" field.</summary>
    public const int CompressionFieldNumber = 2;
    private global::LmdbCache.ValueMetadata.Types.Compression compression_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LmdbCache.ValueMetadata.Types.Compression Compression {
      get { return compression_; }
      set {
        compression_ = value;
      }
    }

    /// <summary>Field number for the "hashedWith" field.</summary>
    public const int HashedWithFieldNumber = 3;
    private global::LmdbCache.ValueMetadata.Types.HashedWith hashedWith_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LmdbCache.ValueMetadata.Types.HashedWith HashedWith {
      get { return hashedWith_; }
      set {
        hashedWith_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClientConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClientConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UseStreaming != other.UseStreaming) return false;
      if (Compression != other.Compression) return false;
      if (HashedWith != other.HashedWith) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UseStreaming != false) hash ^= UseStreaming.GetHashCode();
      if (Compression != 0) hash ^= Compression.GetHashCode();
      if (HashedWith != 0) hash ^= HashedWith.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UseStreaming != false) {
        output.WriteRawTag(8);
        output.WriteBool(UseStreaming);
      }
      if (Compression != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Compression);
      }
      if (HashedWith != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) HashedWith);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UseStreaming != false) {
        size += 1 + 1;
      }
      if (Compression != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Compression);
      }
      if (HashedWith != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) HashedWith);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClientConfig other) {
      if (other == null) {
        return;
      }
      if (other.UseStreaming != false) {
        UseStreaming = other.UseStreaming;
      }
      if (other.Compression != 0) {
        Compression = other.Compression;
      }
      if (other.HashedWith != 0) {
        HashedWith = other.HashedWith;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UseStreaming = input.ReadBool();
            break;
          }
          case 16: {
            compression_ = (global::LmdbCache.ValueMetadata.Types.Compression) input.ReadEnum();
            break;
          }
          case 24: {
            hashedWith_ = (global::LmdbCache.ValueMetadata.Types.HashedWith) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Empty : pb::IMessage<Empty> {
    private static readonly pb::MessageParser<Empty> _parser = new pb::MessageParser<Empty>(() => new Empty());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Empty> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LmdbCache.LmdbCacheRemotingReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Empty() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Empty(Empty other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Empty Clone() {
      return new Empty(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Empty);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Empty other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Empty other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class Timestamp : pb::IMessage<Timestamp> {
    private static readonly pb::MessageParser<Timestamp> _parser = new pb::MessageParser<Timestamp>(() => new Timestamp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Timestamp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LmdbCache.LmdbCacheRemotingReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Timestamp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Timestamp(Timestamp other) : this() {
      ticksOffsetUtc_ = other.ticksOffsetUtc_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Timestamp Clone() {
      return new Timestamp(this);
    }

    /// <summary>Field number for the "ticksOffsetUtc" field.</summary>
    public const int TicksOffsetUtcFieldNumber = 1;
    private ulong ticksOffsetUtc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TicksOffsetUtc {
      get { return ticksOffsetUtc_; }
      set {
        ticksOffsetUtc_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Timestamp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Timestamp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TicksOffsetUtc != other.TicksOffsetUtc) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TicksOffsetUtc != 0UL) hash ^= TicksOffsetUtc.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TicksOffsetUtc != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(TicksOffsetUtc);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TicksOffsetUtc != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TicksOffsetUtc);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Timestamp other) {
      if (other == null) {
        return;
      }
      if (other.TicksOffsetUtc != 0UL) {
        TicksOffsetUtc = other.TicksOffsetUtc;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TicksOffsetUtc = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// In fact we are following LWWRegister ("Last Write Wins") logic for conflict resolution here
  /// </summary>
  public sealed partial class VectorClock : pb::IMessage<VectorClock> {
    private static readonly pb::MessageParser<VectorClock> _parser = new pb::MessageParser<VectorClock>(() => new VectorClock());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VectorClock> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LmdbCache.LmdbCacheRemotingReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VectorClock() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VectorClock(VectorClock other) : this() {
      replicas_ = other.replicas_.Clone();
      ticksOffsetUtc_ = other.ticksOffsetUtc_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VectorClock Clone() {
      return new VectorClock(this);
    }

    /// <summary>Field number for the "replicas" field.</summary>
    public const int ReplicasFieldNumber = 1;
    private static readonly pbc::MapField<string, ulong>.Codec _map_replicas_codec
        = new pbc::MapField<string, ulong>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForUInt64(16), 10);
    private readonly pbc::MapField<string, ulong> replicas_ = new pbc::MapField<string, ulong>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, ulong> Replicas {
      get { return replicas_; }
    }

    /// <summary>Field number for the "ticksOffsetUtc" field.</summary>
    public const int TicksOffsetUtcFieldNumber = 2;
    private ulong ticksOffsetUtc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TicksOffsetUtc {
      get { return ticksOffsetUtc_; }
      set {
        ticksOffsetUtc_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VectorClock);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VectorClock other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!Replicas.Equals(other.Replicas)) return false;
      if (TicksOffsetUtc != other.TicksOffsetUtc) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= Replicas.GetHashCode();
      if (TicksOffsetUtc != 0UL) hash ^= TicksOffsetUtc.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      replicas_.WriteTo(output, _map_replicas_codec);
      if (TicksOffsetUtc != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(TicksOffsetUtc);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += replicas_.CalculateSize(_map_replicas_codec);
      if (TicksOffsetUtc != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TicksOffsetUtc);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VectorClock other) {
      if (other == null) {
        return;
      }
      replicas_.Add(other.replicas_);
      if (other.TicksOffsetUtc != 0UL) {
        TicksOffsetUtc = other.TicksOffsetUtc;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            replicas_.AddEntriesFrom(input, _map_replicas_codec);
            break;
          }
          case 16: {
            TicksOffsetUtc = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ValueMetadata : pb::IMessage<ValueMetadata> {
    private static readonly pb::MessageParser<ValueMetadata> _parser = new pb::MessageParser<ValueMetadata>(() => new ValueMetadata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ValueMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LmdbCache.LmdbCacheRemotingReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValueMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValueMetadata(ValueMetadata other) : this() {
      hashedWith_ = other.hashedWith_;
      hash_ = other.hash_;
      compression_ = other.compression_;
      sizeCompressed_ = other.sizeCompressed_;
      sizeFull_ = other.sizeFull_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValueMetadata Clone() {
      return new ValueMetadata(this);
    }

    /// <summary>Field number for the "hashedWith" field.</summary>
    public const int HashedWithFieldNumber = 1;
    private global::LmdbCache.ValueMetadata.Types.HashedWith hashedWith_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LmdbCache.ValueMetadata.Types.HashedWith HashedWith {
      get { return hashedWith_; }
      set {
        hashedWith_ = value;
      }
    }

    /// <summary>Field number for the "hash" field.</summary>
    public const int HashFieldNumber = 2;
    private pb::ByteString hash_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Hash {
      get { return hash_; }
      set {
        hash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "compression" field.</summary>
    public const int CompressionFieldNumber = 3;
    private global::LmdbCache.ValueMetadata.Types.Compression compression_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LmdbCache.ValueMetadata.Types.Compression Compression {
      get { return compression_; }
      set {
        compression_ = value;
      }
    }

    /// <summary>Field number for the "sizeCompressed" field.</summary>
    public const int SizeCompressedFieldNumber = 4;
    private uint sizeCompressed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SizeCompressed {
      get { return sizeCompressed_; }
      set {
        sizeCompressed_ = value;
      }
    }

    /// <summary>Field number for the "sizeFull" field.</summary>
    public const int SizeFullFieldNumber = 5;
    private uint sizeFull_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SizeFull {
      get { return sizeFull_; }
      set {
        sizeFull_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ValueMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ValueMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HashedWith != other.HashedWith) return false;
      if (Hash != other.Hash) return false;
      if (Compression != other.Compression) return false;
      if (SizeCompressed != other.SizeCompressed) return false;
      if (SizeFull != other.SizeFull) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HashedWith != 0) hash ^= HashedWith.GetHashCode();
      if (Hash.Length != 0) hash ^= Hash.GetHashCode();
      if (Compression != 0) hash ^= Compression.GetHashCode();
      if (SizeCompressed != 0) hash ^= SizeCompressed.GetHashCode();
      if (SizeFull != 0) hash ^= SizeFull.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HashedWith != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) HashedWith);
      }
      if (Hash.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Hash);
      }
      if (Compression != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Compression);
      }
      if (SizeCompressed != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(SizeCompressed);
      }
      if (SizeFull != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(SizeFull);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HashedWith != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) HashedWith);
      }
      if (Hash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Hash);
      }
      if (Compression != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Compression);
      }
      if (SizeCompressed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SizeCompressed);
      }
      if (SizeFull != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SizeFull);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ValueMetadata other) {
      if (other == null) {
        return;
      }
      if (other.HashedWith != 0) {
        HashedWith = other.HashedWith;
      }
      if (other.Hash.Length != 0) {
        Hash = other.Hash;
      }
      if (other.Compression != 0) {
        Compression = other.Compression;
      }
      if (other.SizeCompressed != 0) {
        SizeCompressed = other.SizeCompressed;
      }
      if (other.SizeFull != 0) {
        SizeFull = other.SizeFull;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            hashedWith_ = (global::LmdbCache.ValueMetadata.Types.HashedWith) input.ReadEnum();
            break;
          }
          case 18: {
            Hash = input.ReadBytes();
            break;
          }
          case 24: {
            compression_ = (global::LmdbCache.ValueMetadata.Types.Compression) input.ReadEnum();
            break;
          }
          case 32: {
            SizeCompressed = input.ReadUInt32();
            break;
          }
          case 40: {
            SizeFull = input.ReadUInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ValueMetadata message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum HashedWith {
        [pbr::OriginalName("MD5")] Md5 = 0,
      }

      public enum Compression {
        [pbr::OriginalName("NONE")] None = 0,
        [pbr::OriginalName("LZ4")] Lz4 = 1,
        [pbr::OriginalName("GZIP")] Gzip = 2,
      }

    }
    #endregion

  }

  public sealed partial class KvMetadata : pb::IMessage<KvMetadata> {
    private static readonly pb::MessageParser<KvMetadata> _parser = new pb::MessageParser<KvMetadata>(() => new KvMetadata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KvMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LmdbCache.LmdbCacheRemotingReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KvMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KvMetadata(KvMetadata other) : this() {
      status_ = other.status_;
      expiry_ = other.expiry_ != null ? other.expiry_.Clone() : null;
      updated_ = other.updated_ != null ? other.updated_.Clone() : null;
      action_ = other.action_;
      correlationId_ = other.correlationId_;
      valueMetadata_ = other.valueMetadata_ != null ? other.valueMetadata_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KvMetadata Clone() {
      return new KvMetadata(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::LmdbCache.KvMetadata.Types.Status status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LmdbCache.KvMetadata.Types.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "expiry" field.</summary>
    public const int ExpiryFieldNumber = 2;
    private global::LmdbCache.Timestamp expiry_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LmdbCache.Timestamp Expiry {
      get { return expiry_; }
      set {
        expiry_ = value;
      }
    }

    /// <summary>Field number for the "updated" field.</summary>
    public const int UpdatedFieldNumber = 3;
    private global::LmdbCache.VectorClock updated_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LmdbCache.VectorClock Updated {
      get { return updated_; }
      set {
        updated_ = value;
      }
    }

    /// <summary>Field number for the "action" field.</summary>
    public const int ActionFieldNumber = 4;
    private global::LmdbCache.KvMetadata.Types.UpdateAction action_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LmdbCache.KvMetadata.Types.UpdateAction Action {
      get { return action_; }
      set {
        action_ = value;
      }
    }

    /// <summary>Field number for the "correlationId" field.</summary>
    public const int CorrelationIdFieldNumber = 5;
    private string correlationId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CorrelationId {
      get { return correlationId_; }
      set {
        correlationId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "valueMetadata" field.</summary>
    public const int ValueMetadataFieldNumber = 6;
    private global::LmdbCache.ValueMetadata valueMetadata_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LmdbCache.ValueMetadata ValueMetadata {
      get { return valueMetadata_; }
      set {
        valueMetadata_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KvMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KvMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (!object.Equals(Expiry, other.Expiry)) return false;
      if (!object.Equals(Updated, other.Updated)) return false;
      if (Action != other.Action) return false;
      if (CorrelationId != other.CorrelationId) return false;
      if (!object.Equals(ValueMetadata, other.ValueMetadata)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (expiry_ != null) hash ^= Expiry.GetHashCode();
      if (updated_ != null) hash ^= Updated.GetHashCode();
      if (Action != 0) hash ^= Action.GetHashCode();
      if (CorrelationId.Length != 0) hash ^= CorrelationId.GetHashCode();
      if (valueMetadata_ != null) hash ^= ValueMetadata.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (expiry_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Expiry);
      }
      if (updated_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Updated);
      }
      if (Action != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Action);
      }
      if (CorrelationId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(CorrelationId);
      }
      if (valueMetadata_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(ValueMetadata);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (expiry_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Expiry);
      }
      if (updated_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Updated);
      }
      if (Action != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Action);
      }
      if (CorrelationId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CorrelationId);
      }
      if (valueMetadata_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ValueMetadata);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KvMetadata other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.expiry_ != null) {
        if (expiry_ == null) {
          expiry_ = new global::LmdbCache.Timestamp();
        }
        Expiry.MergeFrom(other.Expiry);
      }
      if (other.updated_ != null) {
        if (updated_ == null) {
          updated_ = new global::LmdbCache.VectorClock();
        }
        Updated.MergeFrom(other.Updated);
      }
      if (other.Action != 0) {
        Action = other.Action;
      }
      if (other.CorrelationId.Length != 0) {
        CorrelationId = other.CorrelationId;
      }
      if (other.valueMetadata_ != null) {
        if (valueMetadata_ == null) {
          valueMetadata_ = new global::LmdbCache.ValueMetadata();
        }
        ValueMetadata.MergeFrom(other.ValueMetadata);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            status_ = (global::LmdbCache.KvMetadata.Types.Status) input.ReadEnum();
            break;
          }
          case 18: {
            if (expiry_ == null) {
              expiry_ = new global::LmdbCache.Timestamp();
            }
            input.ReadMessage(expiry_);
            break;
          }
          case 26: {
            if (updated_ == null) {
              updated_ = new global::LmdbCache.VectorClock();
            }
            input.ReadMessage(updated_);
            break;
          }
          case 32: {
            action_ = (global::LmdbCache.KvMetadata.Types.UpdateAction) input.ReadEnum();
            break;
          }
          case 42: {
            CorrelationId = input.ReadString();
            break;
          }
          case 50: {
            if (valueMetadata_ == null) {
              valueMetadata_ = new global::LmdbCache.ValueMetadata();
            }
            input.ReadMessage(valueMetadata_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the KvMetadata message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Status {
        [pbr::OriginalName("ACTIVE")] Active = 0,
        [pbr::OriginalName("DELETED")] Deleted = 1,
        /// <summary>
        ///    FAILURE             = 3;
        /// </summary>
        [pbr::OriginalName("EXPIRED")] Expired = 2,
      }

      public enum UpdateAction {
        [pbr::OriginalName("ADDED")] Added = 0,
        [pbr::OriginalName("UPDATED")] Updated = 1,
        [pbr::OriginalName("REPLICATED")] Replicated = 2,
      }

    }
    #endregion

  }

  public sealed partial class AddRequest : pb::IMessage<AddRequest> {
    private static readonly pb::MessageParser<AddRequest> _parser = new pb::MessageParser<AddRequest>(() => new AddRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LmdbCache.LmdbCacheRemotingReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddRequest(AddRequest other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      entries_ = other.entries_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddRequest Clone() {
      return new AddRequest(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::LmdbCache.AddRequest.Types.Header header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LmdbCache.AddRequest.Types.Header Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "entries" field.</summary>
    public const int EntriesFieldNumber = 5;
    private static readonly pb::FieldCodec<global::LmdbCache.AddRequest.Types.AddRequestEntry> _repeated_entries_codec
        = pb::FieldCodec.ForMessage(42, global::LmdbCache.AddRequest.Types.AddRequestEntry.Parser);
    private readonly pbc::RepeatedField<global::LmdbCache.AddRequest.Types.AddRequestEntry> entries_ = new pbc::RepeatedField<global::LmdbCache.AddRequest.Types.AddRequestEntry>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::LmdbCache.AddRequest.Types.AddRequestEntry> Entries {
      get { return entries_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if(!entries_.Equals(other.entries_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      hash ^= entries_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      entries_.WriteTo(output, _repeated_entries_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      size += entries_.CalculateSize(_repeated_entries_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddRequest other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          header_ = new global::LmdbCache.AddRequest.Types.Header();
        }
        Header.MergeFrom(other.Header);
      }
      entries_.Add(other.entries_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              header_ = new global::LmdbCache.AddRequest.Types.Header();
            }
            input.ReadMessage(header_);
            break;
          }
          case 42: {
            entries_.AddEntriesFrom(input, _repeated_entries_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the AddRequest message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Header : pb::IMessage<Header> {
        private static readonly pb::MessageParser<Header> _parser = new pb::MessageParser<Header>(() => new Header());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Header> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::LmdbCache.AddRequest.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Header() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Header(Header other) : this() {
          overrideExisting_ = other.overrideExisting_;
          correlationId_ = other.correlationId_;
          chunksCount_ = other.chunksCount_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Header Clone() {
          return new Header(this);
        }

        /// <summary>Field number for the "overrideExisting" field.</summary>
        public const int OverrideExistingFieldNumber = 1;
        private bool overrideExisting_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool OverrideExisting {
          get { return overrideExisting_; }
          set {
            overrideExisting_ = value;
          }
        }

        /// <summary>Field number for the "correlationId" field.</summary>
        public const int CorrelationIdFieldNumber = 2;
        private string correlationId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string CorrelationId {
          get { return correlationId_; }
          set {
            correlationId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "chunksCount" field.</summary>
        public const int ChunksCountFieldNumber = 3;
        private uint chunksCount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ChunksCount {
          get { return chunksCount_; }
          set {
            chunksCount_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Header);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Header other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (OverrideExisting != other.OverrideExisting) return false;
          if (CorrelationId != other.CorrelationId) return false;
          if (ChunksCount != other.ChunksCount) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (OverrideExisting != false) hash ^= OverrideExisting.GetHashCode();
          if (CorrelationId.Length != 0) hash ^= CorrelationId.GetHashCode();
          if (ChunksCount != 0) hash ^= ChunksCount.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (OverrideExisting != false) {
            output.WriteRawTag(8);
            output.WriteBool(OverrideExisting);
          }
          if (CorrelationId.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(CorrelationId);
          }
          if (ChunksCount != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(ChunksCount);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (OverrideExisting != false) {
            size += 1 + 1;
          }
          if (CorrelationId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(CorrelationId);
          }
          if (ChunksCount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChunksCount);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Header other) {
          if (other == null) {
            return;
          }
          if (other.OverrideExisting != false) {
            OverrideExisting = other.OverrideExisting;
          }
          if (other.CorrelationId.Length != 0) {
            CorrelationId = other.CorrelationId;
          }
          if (other.ChunksCount != 0) {
            ChunksCount = other.ChunksCount;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                OverrideExisting = input.ReadBool();
                break;
              }
              case 18: {
                CorrelationId = input.ReadString();
                break;
              }
              case 24: {
                ChunksCount = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class AddRequestEntry : pb::IMessage<AddRequestEntry> {
        private static readonly pb::MessageParser<AddRequestEntry> _parser = new pb::MessageParser<AddRequestEntry>(() => new AddRequestEntry());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AddRequestEntry> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::LmdbCache.AddRequest.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AddRequestEntry() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AddRequestEntry(AddRequestEntry other) : this() {
          key_ = other.key_;
          expiry_ = other.expiry_ != null ? other.expiry_.Clone() : null;
          valueMetadata_ = other.valueMetadata_ != null ? other.valueMetadata_.Clone() : null;
          value_ = other.value_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AddRequestEntry Clone() {
          return new AddRequestEntry(this);
        }

        /// <summary>Field number for the "key" field.</summary>
        public const int KeyFieldNumber = 1;
        private string key_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Key {
          get { return key_; }
          set {
            key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "expiry" field.</summary>
        public const int ExpiryFieldNumber = 2;
        private global::LmdbCache.Timestamp expiry_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::LmdbCache.Timestamp Expiry {
          get { return expiry_; }
          set {
            expiry_ = value;
          }
        }

        /// <summary>Field number for the "valueMetadata" field.</summary>
        public const int ValueMetadataFieldNumber = 3;
        private global::LmdbCache.ValueMetadata valueMetadata_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::LmdbCache.ValueMetadata ValueMetadata {
          get { return valueMetadata_; }
          set {
            valueMetadata_ = value;
          }
        }

        /// <summary>Field number for the "value" field.</summary>
        public const int ValueFieldNumber = 4;
        private pb::ByteString value_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Value {
          get { return value_; }
          set {
            value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as AddRequestEntry);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AddRequestEntry other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Key != other.Key) return false;
          if (!object.Equals(Expiry, other.Expiry)) return false;
          if (!object.Equals(ValueMetadata, other.ValueMetadata)) return false;
          if (Value != other.Value) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Key.Length != 0) hash ^= Key.GetHashCode();
          if (expiry_ != null) hash ^= Expiry.GetHashCode();
          if (valueMetadata_ != null) hash ^= ValueMetadata.GetHashCode();
          if (Value.Length != 0) hash ^= Value.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Key.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Key);
          }
          if (expiry_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Expiry);
          }
          if (valueMetadata_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(ValueMetadata);
          }
          if (Value.Length != 0) {
            output.WriteRawTag(34);
            output.WriteBytes(Value);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Key.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
          }
          if (expiry_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Expiry);
          }
          if (valueMetadata_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(ValueMetadata);
          }
          if (Value.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Value);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AddRequestEntry other) {
          if (other == null) {
            return;
          }
          if (other.Key.Length != 0) {
            Key = other.Key;
          }
          if (other.expiry_ != null) {
            if (expiry_ == null) {
              expiry_ = new global::LmdbCache.Timestamp();
            }
            Expiry.MergeFrom(other.Expiry);
          }
          if (other.valueMetadata_ != null) {
            if (valueMetadata_ == null) {
              valueMetadata_ = new global::LmdbCache.ValueMetadata();
            }
            ValueMetadata.MergeFrom(other.ValueMetadata);
          }
          if (other.Value.Length != 0) {
            Value = other.Value;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Key = input.ReadString();
                break;
              }
              case 18: {
                if (expiry_ == null) {
                  expiry_ = new global::LmdbCache.Timestamp();
                }
                input.ReadMessage(expiry_);
                break;
              }
              case 26: {
                if (valueMetadata_ == null) {
                  valueMetadata_ = new global::LmdbCache.ValueMetadata();
                }
                input.ReadMessage(valueMetadata_);
                break;
              }
              case 34: {
                Value = input.ReadBytes();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class AddResponse : pb::IMessage<AddResponse> {
    private static readonly pb::MessageParser<AddResponse> _parser = new pb::MessageParser<AddResponse>(() => new AddResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LmdbCache.LmdbCacheRemotingReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddResponse(AddResponse other) : this() {
      results_ = other.results_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddResponse Clone() {
      return new AddResponse(this);
    }

    /// <summary>Field number for the "results" field.</summary>
    public const int ResultsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::LmdbCache.AddResponse.Types.AddResult> _repeated_results_codec
        = pb::FieldCodec.ForEnum(10, x => (int) x, x => (global::LmdbCache.AddResponse.Types.AddResult) x);
    private readonly pbc::RepeatedField<global::LmdbCache.AddResponse.Types.AddResult> results_ = new pbc::RepeatedField<global::LmdbCache.AddResponse.Types.AddResult>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::LmdbCache.AddResponse.Types.AddResult> Results {
      get { return results_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!results_.Equals(other.results_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= results_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      results_.WriteTo(output, _repeated_results_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += results_.CalculateSize(_repeated_results_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddResponse other) {
      if (other == null) {
        return;
      }
      results_.Add(other.results_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            results_.AddEntriesFrom(input, _repeated_results_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the AddResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum AddResult {
        [pbr::OriginalName("KEY_ADDED")] KeyAdded = 0,
        [pbr::OriginalName("KEY_UPDATED")] KeyUpdated = 1,
        [pbr::OriginalName("KEY_ALREADY_EXISTS")] KeyAlreadyExists = 2,
        [pbr::OriginalName("FAILURE")] Failure = 3,
      }

    }
    #endregion

  }

  public sealed partial class AddStreamRequest : pb::IMessage<AddStreamRequest> {
    private static readonly pb::MessageParser<AddStreamRequest> _parser = new pb::MessageParser<AddStreamRequest>(() => new AddStreamRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddStreamRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LmdbCache.LmdbCacheRemotingReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddStreamRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddStreamRequest(AddStreamRequest other) : this() {
      switch (other.MsgCase) {
        case MsgOneofCase.Header:
          Header = other.Header.Clone();
          break;
        case MsgOneofCase.Chunk:
          Chunk = other.Chunk.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddStreamRequest Clone() {
      return new AddStreamRequest(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LmdbCache.AddRequest.Types.Header Header {
      get { return msgCase_ == MsgOneofCase.Header ? (global::LmdbCache.AddRequest.Types.Header) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.Header;
      }
    }

    /// <summary>Field number for the "chunk" field.</summary>
    public const int ChunkFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LmdbCache.AddStreamRequest.Types.DataChunk Chunk {
      get { return msgCase_ == MsgOneofCase.Chunk ? (global::LmdbCache.AddStreamRequest.Types.DataChunk) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.Chunk;
      }
    }

    private object msg_;
    /// <summary>Enum of possible cases for the "msg" oneof.</summary>
    public enum MsgOneofCase {
      None = 0,
      Header = 1,
      Chunk = 2,
    }
    private MsgOneofCase msgCase_ = MsgOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgOneofCase MsgCase {
      get { return msgCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMsg() {
      msgCase_ = MsgOneofCase.None;
      msg_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddStreamRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddStreamRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (!object.Equals(Chunk, other.Chunk)) return false;
      if (MsgCase != other.MsgCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (msgCase_ == MsgOneofCase.Header) hash ^= Header.GetHashCode();
      if (msgCase_ == MsgOneofCase.Chunk) hash ^= Chunk.GetHashCode();
      hash ^= (int) msgCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (msgCase_ == MsgOneofCase.Header) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (msgCase_ == MsgOneofCase.Chunk) {
        output.WriteRawTag(18);
        output.WriteMessage(Chunk);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (msgCase_ == MsgOneofCase.Header) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (msgCase_ == MsgOneofCase.Chunk) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Chunk);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddStreamRequest other) {
      if (other == null) {
        return;
      }
      switch (other.MsgCase) {
        case MsgOneofCase.Header:
          if (Header == null) {
            Header = new global::LmdbCache.AddRequest.Types.Header();
          }
          Header.MergeFrom(other.Header);
          break;
        case MsgOneofCase.Chunk:
          if (Chunk == null) {
            Chunk = new global::LmdbCache.AddStreamRequest.Types.DataChunk();
          }
          Chunk.MergeFrom(other.Chunk);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::LmdbCache.AddRequest.Types.Header subBuilder = new global::LmdbCache.AddRequest.Types.Header();
            if (msgCase_ == MsgOneofCase.Header) {
              subBuilder.MergeFrom(Header);
            }
            input.ReadMessage(subBuilder);
            Header = subBuilder;
            break;
          }
          case 18: {
            global::LmdbCache.AddStreamRequest.Types.DataChunk subBuilder = new global::LmdbCache.AddStreamRequest.Types.DataChunk();
            if (msgCase_ == MsgOneofCase.Chunk) {
              subBuilder.MergeFrom(Chunk);
            }
            input.ReadMessage(subBuilder);
            Chunk = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the AddStreamRequest message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class DataChunk : pb::IMessage<DataChunk> {
        private static readonly pb::MessageParser<DataChunk> _parser = new pb::MessageParser<DataChunk>(() => new DataChunk());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<DataChunk> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::LmdbCache.AddStreamRequest.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DataChunk() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DataChunk(DataChunk other) : this() {
          index_ = other.index_;
          entry_ = other.entry_ != null ? other.entry_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DataChunk Clone() {
          return new DataChunk(this);
        }

        /// <summary>Field number for the "index" field.</summary>
        public const int IndexFieldNumber = 1;
        private uint index_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Index {
          get { return index_; }
          set {
            index_ = value;
          }
        }

        /// <summary>Field number for the "entry" field.</summary>
        public const int EntryFieldNumber = 2;
        private global::LmdbCache.AddRequest.Types.AddRequestEntry entry_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::LmdbCache.AddRequest.Types.AddRequestEntry Entry {
          get { return entry_; }
          set {
            entry_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as DataChunk);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(DataChunk other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Index != other.Index) return false;
          if (!object.Equals(Entry, other.Entry)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Index != 0) hash ^= Index.GetHashCode();
          if (entry_ != null) hash ^= Entry.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Index != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Index);
          }
          if (entry_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Entry);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Index != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
          }
          if (entry_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Entry);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(DataChunk other) {
          if (other == null) {
            return;
          }
          if (other.Index != 0) {
            Index = other.Index;
          }
          if (other.entry_ != null) {
            if (entry_ == null) {
              entry_ = new global::LmdbCache.AddRequest.Types.AddRequestEntry();
            }
            Entry.MergeFrom(other.Entry);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Index = input.ReadUInt32();
                break;
              }
              case 18: {
                if (entry_ == null) {
                  entry_ = new global::LmdbCache.AddRequest.Types.AddRequestEntry();
                }
                input.ReadMessage(entry_);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class DeleteRequest : pb::IMessage<DeleteRequest> {
    private static readonly pb::MessageParser<DeleteRequest> _parser = new pb::MessageParser<DeleteRequest>(() => new DeleteRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LmdbCache.LmdbCacheRemotingReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteRequest(DeleteRequest other) : this() {
      correlationId_ = other.correlationId_;
      keys_ = other.keys_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteRequest Clone() {
      return new DeleteRequest(this);
    }

    /// <summary>Field number for the "correlationId" field.</summary>
    public const int CorrelationIdFieldNumber = 1;
    private string correlationId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CorrelationId {
      get { return correlationId_; }
      set {
        correlationId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "keys" field.</summary>
    public const int KeysFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_keys_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> keys_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Keys {
      get { return keys_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CorrelationId != other.CorrelationId) return false;
      if(!keys_.Equals(other.keys_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CorrelationId.Length != 0) hash ^= CorrelationId.GetHashCode();
      hash ^= keys_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CorrelationId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CorrelationId);
      }
      keys_.WriteTo(output, _repeated_keys_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CorrelationId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CorrelationId);
      }
      size += keys_.CalculateSize(_repeated_keys_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteRequest other) {
      if (other == null) {
        return;
      }
      if (other.CorrelationId.Length != 0) {
        CorrelationId = other.CorrelationId;
      }
      keys_.Add(other.keys_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            CorrelationId = input.ReadString();
            break;
          }
          case 18: {
            keys_.AddEntriesFrom(input, _repeated_keys_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DeleteResponse : pb::IMessage<DeleteResponse> {
    private static readonly pb::MessageParser<DeleteResponse> _parser = new pb::MessageParser<DeleteResponse>(() => new DeleteResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LmdbCache.LmdbCacheRemotingReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteResponse(DeleteResponse other) : this() {
      results_ = other.results_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteResponse Clone() {
      return new DeleteResponse(this);
    }

    /// <summary>Field number for the "results" field.</summary>
    public const int ResultsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::LmdbCache.DeleteResponse.Types.DeleteResult> _repeated_results_codec
        = pb::FieldCodec.ForEnum(10, x => (int) x, x => (global::LmdbCache.DeleteResponse.Types.DeleteResult) x);
    private readonly pbc::RepeatedField<global::LmdbCache.DeleteResponse.Types.DeleteResult> results_ = new pbc::RepeatedField<global::LmdbCache.DeleteResponse.Types.DeleteResult>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::LmdbCache.DeleteResponse.Types.DeleteResult> Results {
      get { return results_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!results_.Equals(other.results_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= results_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      results_.WriteTo(output, _repeated_results_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += results_.CalculateSize(_repeated_results_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteResponse other) {
      if (other == null) {
        return;
      }
      results_.Add(other.results_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            results_.AddEntriesFrom(input, _repeated_results_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the DeleteResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum DeleteResult {
        [pbr::OriginalName("SUCCESS")] Success = 0,
        [pbr::OriginalName("NOT_FOUND")] NotFound = 1,
        [pbr::OriginalName("FAILURE")] Failure = 2,
      }

    }
    #endregion

  }

  public sealed partial class GetRequest : pb::IMessage<GetRequest> {
    private static readonly pb::MessageParser<GetRequest> _parser = new pb::MessageParser<GetRequest>(() => new GetRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LmdbCache.LmdbCacheRemotingReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRequest(GetRequest other) : this() {
      correlationId_ = other.correlationId_;
      keys_ = other.keys_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRequest Clone() {
      return new GetRequest(this);
    }

    /// <summary>Field number for the "correlationId" field.</summary>
    public const int CorrelationIdFieldNumber = 1;
    private string correlationId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CorrelationId {
      get { return correlationId_; }
      set {
        correlationId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "keys" field.</summary>
    public const int KeysFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_keys_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> keys_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Keys {
      get { return keys_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CorrelationId != other.CorrelationId) return false;
      if(!keys_.Equals(other.keys_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CorrelationId.Length != 0) hash ^= CorrelationId.GetHashCode();
      hash ^= keys_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CorrelationId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CorrelationId);
      }
      keys_.WriteTo(output, _repeated_keys_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CorrelationId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CorrelationId);
      }
      size += keys_.CalculateSize(_repeated_keys_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetRequest other) {
      if (other == null) {
        return;
      }
      if (other.CorrelationId.Length != 0) {
        CorrelationId = other.CorrelationId;
      }
      keys_.Add(other.keys_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            CorrelationId = input.ReadString();
            break;
          }
          case 18: {
            keys_.AddEntriesFrom(input, _repeated_keys_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetResponse : pb::IMessage<GetResponse> {
    private static readonly pb::MessageParser<GetResponse> _parser = new pb::MessageParser<GetResponse>(() => new GetResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LmdbCache.LmdbCacheRemotingReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetResponse(GetResponse other) : this() {
      results_ = other.results_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetResponse Clone() {
      return new GetResponse(this);
    }

    /// <summary>Field number for the "results" field.</summary>
    public const int ResultsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::LmdbCache.GetResponse.Types.GetResponseEntry> _repeated_results_codec
        = pb::FieldCodec.ForMessage(10, global::LmdbCache.GetResponse.Types.GetResponseEntry.Parser);
    private readonly pbc::RepeatedField<global::LmdbCache.GetResponse.Types.GetResponseEntry> results_ = new pbc::RepeatedField<global::LmdbCache.GetResponse.Types.GetResponseEntry>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::LmdbCache.GetResponse.Types.GetResponseEntry> Results {
      get { return results_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!results_.Equals(other.results_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= results_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      results_.WriteTo(output, _repeated_results_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += results_.CalculateSize(_repeated_results_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetResponse other) {
      if (other == null) {
        return;
      }
      results_.Add(other.results_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            results_.AddEntriesFrom(input, _repeated_results_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the GetResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class GetResponseEntry : pb::IMessage<GetResponseEntry> {
        private static readonly pb::MessageParser<GetResponseEntry> _parser = new pb::MessageParser<GetResponseEntry>(() => new GetResponseEntry());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GetResponseEntry> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::LmdbCache.GetResponse.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GetResponseEntry() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GetResponseEntry(GetResponseEntry other) : this() {
          result_ = other.result_;
          index_ = other.index_;
          valueMetadata_ = other.valueMetadata_ != null ? other.valueMetadata_.Clone() : null;
          value_ = other.value_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GetResponseEntry Clone() {
          return new GetResponseEntry(this);
        }

        /// <summary>Field number for the "result" field.</summary>
        public const int ResultFieldNumber = 1;
        private global::LmdbCache.GetResponse.Types.GetResponseEntry.Types.GetResult result_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::LmdbCache.GetResponse.Types.GetResponseEntry.Types.GetResult Result {
          get { return result_; }
          set {
            result_ = value;
          }
        }

        /// <summary>Field number for the "index" field.</summary>
        public const int IndexFieldNumber = 2;
        private uint index_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Index {
          get { return index_; }
          set {
            index_ = value;
          }
        }

        /// <summary>Field number for the "valueMetadata" field.</summary>
        public const int ValueMetadataFieldNumber = 3;
        private global::LmdbCache.ValueMetadata valueMetadata_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::LmdbCache.ValueMetadata ValueMetadata {
          get { return valueMetadata_; }
          set {
            valueMetadata_ = value;
          }
        }

        /// <summary>Field number for the "value" field.</summary>
        public const int ValueFieldNumber = 5;
        private pb::ByteString value_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Value {
          get { return value_; }
          set {
            value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as GetResponseEntry);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GetResponseEntry other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Result != other.Result) return false;
          if (Index != other.Index) return false;
          if (!object.Equals(ValueMetadata, other.ValueMetadata)) return false;
          if (Value != other.Value) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Result != 0) hash ^= Result.GetHashCode();
          if (Index != 0) hash ^= Index.GetHashCode();
          if (valueMetadata_ != null) hash ^= ValueMetadata.GetHashCode();
          if (Value.Length != 0) hash ^= Value.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Result != 0) {
            output.WriteRawTag(8);
            output.WriteEnum((int) Result);
          }
          if (Index != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(Index);
          }
          if (valueMetadata_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(ValueMetadata);
          }
          if (Value.Length != 0) {
            output.WriteRawTag(42);
            output.WriteBytes(Value);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Result != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
          }
          if (Index != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
          }
          if (valueMetadata_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(ValueMetadata);
          }
          if (Value.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Value);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GetResponseEntry other) {
          if (other == null) {
            return;
          }
          if (other.Result != 0) {
            Result = other.Result;
          }
          if (other.Index != 0) {
            Index = other.Index;
          }
          if (other.valueMetadata_ != null) {
            if (valueMetadata_ == null) {
              valueMetadata_ = new global::LmdbCache.ValueMetadata();
            }
            ValueMetadata.MergeFrom(other.ValueMetadata);
          }
          if (other.Value.Length != 0) {
            Value = other.Value;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                result_ = (global::LmdbCache.GetResponse.Types.GetResponseEntry.Types.GetResult) input.ReadEnum();
                break;
              }
              case 16: {
                Index = input.ReadUInt32();
                break;
              }
              case 26: {
                if (valueMetadata_ == null) {
                  valueMetadata_ = new global::LmdbCache.ValueMetadata();
                }
                input.ReadMessage(valueMetadata_);
                break;
              }
              case 42: {
                Value = input.ReadBytes();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the GetResponseEntry message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public enum GetResult {
            [pbr::OriginalName("SUCCESS")] Success = 0,
            [pbr::OriginalName("NOT_FOUND")] NotFound = 1,
            [pbr::OriginalName("FAILURE")] Failure = 2,
          }

        }
        #endregion

      }

    }
    #endregion

  }

  public sealed partial class GetStreamResponse : pb::IMessage<GetStreamResponse> {
    private static readonly pb::MessageParser<GetStreamResponse> _parser = new pb::MessageParser<GetStreamResponse>(() => new GetStreamResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetStreamResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LmdbCache.LmdbCacheRemotingReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetStreamResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetStreamResponse(GetStreamResponse other) : this() {
      result_ = other.result_ != null ? other.result_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetStreamResponse Clone() {
      return new GetStreamResponse(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private global::LmdbCache.GetResponse.Types.GetResponseEntry result_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LmdbCache.GetResponse.Types.GetResponseEntry Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetStreamResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetStreamResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Result, other.Result)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (result_ != null) hash ^= Result.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (result_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Result);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (result_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Result);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetStreamResponse other) {
      if (other == null) {
        return;
      }
      if (other.result_ != null) {
        if (result_ == null) {
          result_ = new global::LmdbCache.GetResponse.Types.GetResponseEntry();
        }
        Result.MergeFrom(other.Result);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (result_ == null) {
              result_ = new global::LmdbCache.GetResponse.Types.GetResponseEntry();
            }
            input.ReadMessage(result_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ContainsKeysResponse : pb::IMessage<ContainsKeysResponse> {
    private static readonly pb::MessageParser<ContainsKeysResponse> _parser = new pb::MessageParser<ContainsKeysResponse>(() => new ContainsKeysResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ContainsKeysResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LmdbCache.LmdbCacheRemotingReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContainsKeysResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContainsKeysResponse(ContainsKeysResponse other) : this() {
      results_ = other.results_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContainsKeysResponse Clone() {
      return new ContainsKeysResponse(this);
    }

    /// <summary>Field number for the "results" field.</summary>
    public const int ResultsFieldNumber = 1;
    private static readonly pb::FieldCodec<bool> _repeated_results_codec
        = pb::FieldCodec.ForBool(10);
    private readonly pbc::RepeatedField<bool> results_ = new pbc::RepeatedField<bool>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<bool> Results {
      get { return results_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ContainsKeysResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ContainsKeysResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!results_.Equals(other.results_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= results_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      results_.WriteTo(output, _repeated_results_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += results_.CalculateSize(_repeated_results_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ContainsKeysResponse other) {
      if (other == null) {
        return;
      }
      results_.Add(other.results_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            results_.AddEntriesFrom(input, _repeated_results_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CopyRequest : pb::IMessage<CopyRequest> {
    private static readonly pb::MessageParser<CopyRequest> _parser = new pb::MessageParser<CopyRequest>(() => new CopyRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CopyRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LmdbCache.LmdbCacheRemotingReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CopyRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CopyRequest(CopyRequest other) : this() {
      correlationId_ = other.correlationId_;
      entries_ = other.entries_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CopyRequest Clone() {
      return new CopyRequest(this);
    }

    /// <summary>Field number for the "correlationId" field.</summary>
    public const int CorrelationIdFieldNumber = 1;
    private string correlationId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CorrelationId {
      get { return correlationId_; }
      set {
        correlationId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "entries" field.</summary>
    public const int EntriesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::LmdbCache.CopyRequest.Types.CopyRequestEntry> _repeated_entries_codec
        = pb::FieldCodec.ForMessage(18, global::LmdbCache.CopyRequest.Types.CopyRequestEntry.Parser);
    private readonly pbc::RepeatedField<global::LmdbCache.CopyRequest.Types.CopyRequestEntry> entries_ = new pbc::RepeatedField<global::LmdbCache.CopyRequest.Types.CopyRequestEntry>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::LmdbCache.CopyRequest.Types.CopyRequestEntry> Entries {
      get { return entries_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CopyRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CopyRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CorrelationId != other.CorrelationId) return false;
      if(!entries_.Equals(other.entries_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CorrelationId.Length != 0) hash ^= CorrelationId.GetHashCode();
      hash ^= entries_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CorrelationId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CorrelationId);
      }
      entries_.WriteTo(output, _repeated_entries_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CorrelationId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CorrelationId);
      }
      size += entries_.CalculateSize(_repeated_entries_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CopyRequest other) {
      if (other == null) {
        return;
      }
      if (other.CorrelationId.Length != 0) {
        CorrelationId = other.CorrelationId;
      }
      entries_.Add(other.entries_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            CorrelationId = input.ReadString();
            break;
          }
          case 18: {
            entries_.AddEntriesFrom(input, _repeated_entries_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CopyRequest message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class CopyRequestEntry : pb::IMessage<CopyRequestEntry> {
        private static readonly pb::MessageParser<CopyRequestEntry> _parser = new pb::MessageParser<CopyRequestEntry>(() => new CopyRequestEntry());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CopyRequestEntry> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::LmdbCache.CopyRequest.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CopyRequestEntry() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CopyRequestEntry(CopyRequestEntry other) : this() {
          keyFrom_ = other.keyFrom_;
          expiry_ = other.expiry_ != null ? other.expiry_.Clone() : null;
          keyTo_ = other.keyTo_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CopyRequestEntry Clone() {
          return new CopyRequestEntry(this);
        }

        /// <summary>Field number for the "keyFrom" field.</summary>
        public const int KeyFromFieldNumber = 1;
        private string keyFrom_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string KeyFrom {
          get { return keyFrom_; }
          set {
            keyFrom_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "expiry" field.</summary>
        public const int ExpiryFieldNumber = 2;
        private global::LmdbCache.Timestamp expiry_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::LmdbCache.Timestamp Expiry {
          get { return expiry_; }
          set {
            expiry_ = value;
          }
        }

        /// <summary>Field number for the "keyTo" field.</summary>
        public const int KeyToFieldNumber = 3;
        private string keyTo_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string KeyTo {
          get { return keyTo_; }
          set {
            keyTo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as CopyRequestEntry);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CopyRequestEntry other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (KeyFrom != other.KeyFrom) return false;
          if (!object.Equals(Expiry, other.Expiry)) return false;
          if (KeyTo != other.KeyTo) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (KeyFrom.Length != 0) hash ^= KeyFrom.GetHashCode();
          if (expiry_ != null) hash ^= Expiry.GetHashCode();
          if (KeyTo.Length != 0) hash ^= KeyTo.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (KeyFrom.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(KeyFrom);
          }
          if (expiry_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Expiry);
          }
          if (KeyTo.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(KeyTo);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (KeyFrom.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(KeyFrom);
          }
          if (expiry_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Expiry);
          }
          if (KeyTo.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(KeyTo);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CopyRequestEntry other) {
          if (other == null) {
            return;
          }
          if (other.KeyFrom.Length != 0) {
            KeyFrom = other.KeyFrom;
          }
          if (other.expiry_ != null) {
            if (expiry_ == null) {
              expiry_ = new global::LmdbCache.Timestamp();
            }
            Expiry.MergeFrom(other.Expiry);
          }
          if (other.KeyTo.Length != 0) {
            KeyTo = other.KeyTo;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                KeyFrom = input.ReadString();
                break;
              }
              case 18: {
                if (expiry_ == null) {
                  expiry_ = new global::LmdbCache.Timestamp();
                }
                input.ReadMessage(expiry_);
                break;
              }
              case 26: {
                KeyTo = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class CopyResponse : pb::IMessage<CopyResponse> {
    private static readonly pb::MessageParser<CopyResponse> _parser = new pb::MessageParser<CopyResponse>(() => new CopyResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CopyResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LmdbCache.LmdbCacheRemotingReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CopyResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CopyResponse(CopyResponse other) : this() {
      results_ = other.results_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CopyResponse Clone() {
      return new CopyResponse(this);
    }

    /// <summary>Field number for the "results" field.</summary>
    public const int ResultsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::LmdbCache.CopyResponse.Types.CopyResult> _repeated_results_codec
        = pb::FieldCodec.ForEnum(10, x => (int) x, x => (global::LmdbCache.CopyResponse.Types.CopyResult) x);
    private readonly pbc::RepeatedField<global::LmdbCache.CopyResponse.Types.CopyResult> results_ = new pbc::RepeatedField<global::LmdbCache.CopyResponse.Types.CopyResult>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::LmdbCache.CopyResponse.Types.CopyResult> Results {
      get { return results_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CopyResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CopyResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!results_.Equals(other.results_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= results_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      results_.WriteTo(output, _repeated_results_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += results_.CalculateSize(_repeated_results_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CopyResponse other) {
      if (other == null) {
        return;
      }
      results_.Add(other.results_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            results_.AddEntriesFrom(input, _repeated_results_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CopyResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum CopyResult {
        [pbr::OriginalName("SUCCESS")] Success = 0,
        [pbr::OriginalName("FROM_KEY_NOT_FOUND")] FromKeyNotFound = 1,
        [pbr::OriginalName("TO_KEY_EXISTS")] ToKeyExists = 2,
        [pbr::OriginalName("FAILURE")] Failure = 3,
      }

    }
    #endregion

  }

  public sealed partial class KeyListRequest : pb::IMessage<KeyListRequest> {
    private static readonly pb::MessageParser<KeyListRequest> _parser = new pb::MessageParser<KeyListRequest>(() => new KeyListRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KeyListRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LmdbCache.LmdbCacheRemotingReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyListRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyListRequest(KeyListRequest other) : this() {
      keyPrefix_ = other.keyPrefix_;
      pageSize_ = other.pageSize_;
      page_ = other.page_;
      correlationId_ = other.correlationId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyListRequest Clone() {
      return new KeyListRequest(this);
    }

    /// <summary>Field number for the "keyPrefix" field.</summary>
    public const int KeyPrefixFieldNumber = 1;
    private string keyPrefix_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string KeyPrefix {
      get { return keyPrefix_; }
      set {
        keyPrefix_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pageSize" field.</summary>
    public const int PageSizeFieldNumber = 2;
    private uint pageSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    /// <summary>Field number for the "page" field.</summary>
    public const int PageFieldNumber = 3;
    private uint page_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Page {
      get { return page_; }
      set {
        page_ = value;
      }
    }

    /// <summary>Field number for the "correlationId" field.</summary>
    public const int CorrelationIdFieldNumber = 4;
    private string correlationId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CorrelationId {
      get { return correlationId_; }
      set {
        correlationId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KeyListRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KeyListRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (KeyPrefix != other.KeyPrefix) return false;
      if (PageSize != other.PageSize) return false;
      if (Page != other.Page) return false;
      if (CorrelationId != other.CorrelationId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (KeyPrefix.Length != 0) hash ^= KeyPrefix.GetHashCode();
      if (PageSize != 0) hash ^= PageSize.GetHashCode();
      if (Page != 0) hash ^= Page.GetHashCode();
      if (CorrelationId.Length != 0) hash ^= CorrelationId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (KeyPrefix.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(KeyPrefix);
      }
      if (PageSize != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(PageSize);
      }
      if (Page != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Page);
      }
      if (CorrelationId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(CorrelationId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (KeyPrefix.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(KeyPrefix);
      }
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PageSize);
      }
      if (Page != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Page);
      }
      if (CorrelationId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CorrelationId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KeyListRequest other) {
      if (other == null) {
        return;
      }
      if (other.KeyPrefix.Length != 0) {
        KeyPrefix = other.KeyPrefix;
      }
      if (other.PageSize != 0) {
        PageSize = other.PageSize;
      }
      if (other.Page != 0) {
        Page = other.Page;
      }
      if (other.CorrelationId.Length != 0) {
        CorrelationId = other.CorrelationId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            KeyPrefix = input.ReadString();
            break;
          }
          case 16: {
            PageSize = input.ReadUInt32();
            break;
          }
          case 24: {
            Page = input.ReadUInt32();
            break;
          }
          case 34: {
            CorrelationId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class KeyListResponse : pb::IMessage<KeyListResponse> {
    private static readonly pb::MessageParser<KeyListResponse> _parser = new pb::MessageParser<KeyListResponse>(() => new KeyListResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KeyListResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LmdbCache.LmdbCacheRemotingReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyListResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyListResponse(KeyListResponse other) : this() {
      key_ = other.key_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyListResponse Clone() {
      return new KeyListResponse(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    /// <summary>
    /// Timestamp expiry = 2;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KeyListResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KeyListResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KeyListResponse other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class KeyValueListResponse : pb::IMessage<KeyValueListResponse> {
    private static readonly pb::MessageParser<KeyValueListResponse> _parser = new pb::MessageParser<KeyValueListResponse>(() => new KeyValueListResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KeyValueListResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LmdbCache.LmdbCacheRemotingReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyValueListResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyValueListResponse(KeyValueListResponse other) : this() {
      key_ = other.key_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyValueListResponse Clone() {
      return new KeyValueListResponse(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 3;
    private pb::ByteString value_ = pb::ByteString.Empty;
    /// <summary>
    /// Timestamp expiry = 2;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KeyValueListResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KeyValueListResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KeyValueListResponse other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 26: {
            Value = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class WriteLogEvent : pb::IMessage<WriteLogEvent> {
    private static readonly pb::MessageParser<WriteLogEvent> _parser = new pb::MessageParser<WriteLogEvent>(() => new WriteLogEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WriteLogEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LmdbCache.LmdbCacheRemotingReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WriteLogEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WriteLogEvent(WriteLogEvent other) : this() {
      clock_ = other.clock_ != null ? other.clock_.Clone() : null;
      correlationId_ = other.correlationId_;
      originatorReplicaId_ = other.originatorReplicaId_;
      switch (other.LoggedEventCase) {
        case LoggedEventOneofCase.Updated:
          Updated = other.Updated.Clone();
          break;
        case LoggedEventOneofCase.Deleted:
          Deleted = other.Deleted.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WriteLogEvent Clone() {
      return new WriteLogEvent(this);
    }

    /// <summary>Field number for the "clock" field.</summary>
    public const int ClockFieldNumber = 1;
    private global::LmdbCache.VectorClock clock_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LmdbCache.VectorClock Clock {
      get { return clock_; }
      set {
        clock_ = value;
      }
    }

    /// <summary>Field number for the "correlationId" field.</summary>
    public const int CorrelationIdFieldNumber = 2;
    private string correlationId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CorrelationId {
      get { return correlationId_; }
      set {
        correlationId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "originatorReplicaId" field.</summary>
    public const int OriginatorReplicaIdFieldNumber = 3;
    private string originatorReplicaId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OriginatorReplicaId {
      get { return originatorReplicaId_; }
      set {
        originatorReplicaId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "updated" field.</summary>
    public const int UpdatedFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LmdbCache.WriteLogEvent.Types.AddedOrUpdated Updated {
      get { return loggedEventCase_ == LoggedEventOneofCase.Updated ? (global::LmdbCache.WriteLogEvent.Types.AddedOrUpdated) loggedEvent_ : null; }
      set {
        loggedEvent_ = value;
        loggedEventCase_ = value == null ? LoggedEventOneofCase.None : LoggedEventOneofCase.Updated;
      }
    }

    /// <summary>Field number for the "deleted" field.</summary>
    public const int DeletedFieldNumber = 7;
    /// <summary>
    ///Expired expired   = 8; 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LmdbCache.WriteLogEvent.Types.Deleted Deleted {
      get { return loggedEventCase_ == LoggedEventOneofCase.Deleted ? (global::LmdbCache.WriteLogEvent.Types.Deleted) loggedEvent_ : null; }
      set {
        loggedEvent_ = value;
        loggedEventCase_ = value == null ? LoggedEventOneofCase.None : LoggedEventOneofCase.Deleted;
      }
    }

    private object loggedEvent_;
    /// <summary>Enum of possible cases for the "loggedEvent" oneof.</summary>
    public enum LoggedEventOneofCase {
      None = 0,
      Updated = 5,
      Deleted = 7,
    }
    private LoggedEventOneofCase loggedEventCase_ = LoggedEventOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoggedEventOneofCase LoggedEventCase {
      get { return loggedEventCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLoggedEvent() {
      loggedEventCase_ = LoggedEventOneofCase.None;
      loggedEvent_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WriteLogEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WriteLogEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Clock, other.Clock)) return false;
      if (CorrelationId != other.CorrelationId) return false;
      if (OriginatorReplicaId != other.OriginatorReplicaId) return false;
      if (!object.Equals(Updated, other.Updated)) return false;
      if (!object.Equals(Deleted, other.Deleted)) return false;
      if (LoggedEventCase != other.LoggedEventCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (clock_ != null) hash ^= Clock.GetHashCode();
      if (CorrelationId.Length != 0) hash ^= CorrelationId.GetHashCode();
      if (OriginatorReplicaId.Length != 0) hash ^= OriginatorReplicaId.GetHashCode();
      if (loggedEventCase_ == LoggedEventOneofCase.Updated) hash ^= Updated.GetHashCode();
      if (loggedEventCase_ == LoggedEventOneofCase.Deleted) hash ^= Deleted.GetHashCode();
      hash ^= (int) loggedEventCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (clock_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Clock);
      }
      if (CorrelationId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(CorrelationId);
      }
      if (OriginatorReplicaId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(OriginatorReplicaId);
      }
      if (loggedEventCase_ == LoggedEventOneofCase.Updated) {
        output.WriteRawTag(42);
        output.WriteMessage(Updated);
      }
      if (loggedEventCase_ == LoggedEventOneofCase.Deleted) {
        output.WriteRawTag(58);
        output.WriteMessage(Deleted);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (clock_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Clock);
      }
      if (CorrelationId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CorrelationId);
      }
      if (OriginatorReplicaId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OriginatorReplicaId);
      }
      if (loggedEventCase_ == LoggedEventOneofCase.Updated) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Updated);
      }
      if (loggedEventCase_ == LoggedEventOneofCase.Deleted) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Deleted);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WriteLogEvent other) {
      if (other == null) {
        return;
      }
      if (other.clock_ != null) {
        if (clock_ == null) {
          clock_ = new global::LmdbCache.VectorClock();
        }
        Clock.MergeFrom(other.Clock);
      }
      if (other.CorrelationId.Length != 0) {
        CorrelationId = other.CorrelationId;
      }
      if (other.OriginatorReplicaId.Length != 0) {
        OriginatorReplicaId = other.OriginatorReplicaId;
      }
      switch (other.LoggedEventCase) {
        case LoggedEventOneofCase.Updated:
          if (Updated == null) {
            Updated = new global::LmdbCache.WriteLogEvent.Types.AddedOrUpdated();
          }
          Updated.MergeFrom(other.Updated);
          break;
        case LoggedEventOneofCase.Deleted:
          if (Deleted == null) {
            Deleted = new global::LmdbCache.WriteLogEvent.Types.Deleted();
          }
          Deleted.MergeFrom(other.Deleted);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (clock_ == null) {
              clock_ = new global::LmdbCache.VectorClock();
            }
            input.ReadMessage(clock_);
            break;
          }
          case 18: {
            CorrelationId = input.ReadString();
            break;
          }
          case 26: {
            OriginatorReplicaId = input.ReadString();
            break;
          }
          case 42: {
            global::LmdbCache.WriteLogEvent.Types.AddedOrUpdated subBuilder = new global::LmdbCache.WriteLogEvent.Types.AddedOrUpdated();
            if (loggedEventCase_ == LoggedEventOneofCase.Updated) {
              subBuilder.MergeFrom(Updated);
            }
            input.ReadMessage(subBuilder);
            Updated = subBuilder;
            break;
          }
          case 58: {
            global::LmdbCache.WriteLogEvent.Types.Deleted subBuilder = new global::LmdbCache.WriteLogEvent.Types.Deleted();
            if (loggedEventCase_ == LoggedEventOneofCase.Deleted) {
              subBuilder.MergeFrom(Deleted);
            }
            input.ReadMessage(subBuilder);
            Deleted = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the WriteLogEvent message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// TODO: Add a value hash?
      /// </summary>
      public sealed partial class AddedOrUpdated : pb::IMessage<AddedOrUpdated> {
        private static readonly pb::MessageParser<AddedOrUpdated> _parser = new pb::MessageParser<AddedOrUpdated>(() => new AddedOrUpdated());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AddedOrUpdated> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::LmdbCache.WriteLogEvent.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AddedOrUpdated() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AddedOrUpdated(AddedOrUpdated other) : this() {
          key_ = other.key_;
          expiry_ = other.expiry_ != null ? other.expiry_.Clone() : null;
          valueMetadata_ = other.valueMetadata_ != null ? other.valueMetadata_.Clone() : null;
          value_ = other.value_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AddedOrUpdated Clone() {
          return new AddedOrUpdated(this);
        }

        /// <summary>Field number for the "key" field.</summary>
        public const int KeyFieldNumber = 1;
        private string key_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Key {
          get { return key_; }
          set {
            key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "expiry" field.</summary>
        public const int ExpiryFieldNumber = 2;
        private global::LmdbCache.Timestamp expiry_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::LmdbCache.Timestamp Expiry {
          get { return expiry_; }
          set {
            expiry_ = value;
          }
        }

        /// <summary>Field number for the "valueMetadata" field.</summary>
        public const int ValueMetadataFieldNumber = 3;
        private global::LmdbCache.ValueMetadata valueMetadata_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::LmdbCache.ValueMetadata ValueMetadata {
          get { return valueMetadata_; }
          set {
            valueMetadata_ = value;
          }
        }

        /// <summary>Field number for the "value" field.</summary>
        public const int ValueFieldNumber = 4;
        private pb::ByteString value_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Value {
          get { return value_; }
          set {
            value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as AddedOrUpdated);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AddedOrUpdated other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Key != other.Key) return false;
          if (!object.Equals(Expiry, other.Expiry)) return false;
          if (!object.Equals(ValueMetadata, other.ValueMetadata)) return false;
          if (Value != other.Value) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Key.Length != 0) hash ^= Key.GetHashCode();
          if (expiry_ != null) hash ^= Expiry.GetHashCode();
          if (valueMetadata_ != null) hash ^= ValueMetadata.GetHashCode();
          if (Value.Length != 0) hash ^= Value.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Key.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Key);
          }
          if (expiry_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Expiry);
          }
          if (valueMetadata_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(ValueMetadata);
          }
          if (Value.Length != 0) {
            output.WriteRawTag(34);
            output.WriteBytes(Value);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Key.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
          }
          if (expiry_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Expiry);
          }
          if (valueMetadata_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(ValueMetadata);
          }
          if (Value.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Value);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AddedOrUpdated other) {
          if (other == null) {
            return;
          }
          if (other.Key.Length != 0) {
            Key = other.Key;
          }
          if (other.expiry_ != null) {
            if (expiry_ == null) {
              expiry_ = new global::LmdbCache.Timestamp();
            }
            Expiry.MergeFrom(other.Expiry);
          }
          if (other.valueMetadata_ != null) {
            if (valueMetadata_ == null) {
              valueMetadata_ = new global::LmdbCache.ValueMetadata();
            }
            ValueMetadata.MergeFrom(other.ValueMetadata);
          }
          if (other.Value.Length != 0) {
            Value = other.Value;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Key = input.ReadString();
                break;
              }
              case 18: {
                if (expiry_ == null) {
                  expiry_ = new global::LmdbCache.Timestamp();
                }
                input.ReadMessage(expiry_);
                break;
              }
              case 26: {
                if (valueMetadata_ == null) {
                  valueMetadata_ = new global::LmdbCache.ValueMetadata();
                }
                input.ReadMessage(valueMetadata_);
                break;
              }
              case 34: {
                Value = input.ReadBytes();
                break;
              }
            }
          }
        }

      }

      public sealed partial class Deleted : pb::IMessage<Deleted> {
        private static readonly pb::MessageParser<Deleted> _parser = new pb::MessageParser<Deleted>(() => new Deleted());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Deleted> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::LmdbCache.WriteLogEvent.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Deleted() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Deleted(Deleted other) : this() {
          key_ = other.key_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Deleted Clone() {
          return new Deleted(this);
        }

        /// <summary>Field number for the "key" field.</summary>
        public const int KeyFieldNumber = 1;
        private string key_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Key {
          get { return key_; }
          set {
            key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Deleted);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Deleted other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Key != other.Key) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Key.Length != 0) hash ^= Key.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Key.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Key);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Key.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Deleted other) {
          if (other == null) {
            return;
          }
          if (other.Key.Length != 0) {
            Key = other.Key;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Key = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class GetReplicaIdResponse : pb::IMessage<GetReplicaIdResponse> {
    private static readonly pb::MessageParser<GetReplicaIdResponse> _parser = new pb::MessageParser<GetReplicaIdResponse>(() => new GetReplicaIdResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetReplicaIdResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LmdbCache.LmdbCacheRemotingReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetReplicaIdResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetReplicaIdResponse(GetReplicaIdResponse other) : this() {
      replicaId_ = other.replicaId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetReplicaIdResponse Clone() {
      return new GetReplicaIdResponse(this);
    }

    /// <summary>Field number for the "replicaId" field.</summary>
    public const int ReplicaIdFieldNumber = 1;
    private string replicaId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReplicaId {
      get { return replicaId_; }
      set {
        replicaId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetReplicaIdResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetReplicaIdResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReplicaId != other.ReplicaId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReplicaId.Length != 0) hash ^= ReplicaId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReplicaId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ReplicaId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReplicaId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ReplicaId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetReplicaIdResponse other) {
      if (other == null) {
        return;
      }
      if (other.ReplicaId.Length != 0) {
        ReplicaId = other.ReplicaId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ReplicaId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SyncPacket : pb::IMessage<SyncPacket> {
    private static readonly pb::MessageParser<SyncPacket> _parser = new pb::MessageParser<SyncPacket>(() => new SyncPacket());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SyncPacket> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LmdbCache.LmdbCacheRemotingReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SyncPacket() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SyncPacket(SyncPacket other) : this() {
      replicaId_ = other.replicaId_;
      switch (other.PacketCase) {
        case PacketOneofCase.SyncFrom:
          SyncFrom = other.SyncFrom.Clone();
          break;
        case PacketOneofCase.Items:
          Items = other.Items.Clone();
          break;
        case PacketOneofCase.Item:
          Item = other.Item.Clone();
          break;
        case PacketOneofCase.SkipPos:
          SkipPos = other.SkipPos.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SyncPacket Clone() {
      return new SyncPacket(this);
    }

    /// <summary>Field number for the "replicaId" field.</summary>
    public const int ReplicaIdFieldNumber = 1;
    private string replicaId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReplicaId {
      get { return replicaId_; }
      set {
        replicaId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "syncFrom" field.</summary>
    public const int SyncFromFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LmdbCache.SyncPacket.Types.SyncFrom SyncFrom {
      get { return packetCase_ == PacketOneofCase.SyncFrom ? (global::LmdbCache.SyncPacket.Types.SyncFrom) packet_ : null; }
      set {
        packet_ = value;
        packetCase_ = value == null ? PacketOneofCase.None : PacketOneofCase.SyncFrom;
      }
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LmdbCache.SyncPacket.Types.Items Items {
      get { return packetCase_ == PacketOneofCase.Items ? (global::LmdbCache.SyncPacket.Types.Items) packet_ : null; }
      set {
        packet_ = value;
        packetCase_ = value == null ? PacketOneofCase.None : PacketOneofCase.Items;
      }
    }

    /// <summary>Field number for the "item" field.</summary>
    public const int ItemFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LmdbCache.SyncPacket.Types.Item Item {
      get { return packetCase_ == PacketOneofCase.Item ? (global::LmdbCache.SyncPacket.Types.Item) packet_ : null; }
      set {
        packet_ = value;
        packetCase_ = value == null ? PacketOneofCase.None : PacketOneofCase.Item;
      }
    }

    /// <summary>Field number for the "skipPos" field.</summary>
    public const int SkipPosFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LmdbCache.SyncPacket.Types.SkipPos SkipPos {
      get { return packetCase_ == PacketOneofCase.SkipPos ? (global::LmdbCache.SyncPacket.Types.SkipPos) packet_ : null; }
      set {
        packet_ = value;
        packetCase_ = value == null ? PacketOneofCase.None : PacketOneofCase.SkipPos;
      }
    }

    private object packet_;
    /// <summary>Enum of possible cases for the "packet" oneof.</summary>
    public enum PacketOneofCase {
      None = 0,
      SyncFrom = 4,
      Items = 5,
      Item = 6,
      SkipPos = 7,
    }
    private PacketOneofCase packetCase_ = PacketOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PacketOneofCase PacketCase {
      get { return packetCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPacket() {
      packetCase_ = PacketOneofCase.None;
      packet_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SyncPacket);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SyncPacket other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReplicaId != other.ReplicaId) return false;
      if (!object.Equals(SyncFrom, other.SyncFrom)) return false;
      if (!object.Equals(Items, other.Items)) return false;
      if (!object.Equals(Item, other.Item)) return false;
      if (!object.Equals(SkipPos, other.SkipPos)) return false;
      if (PacketCase != other.PacketCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReplicaId.Length != 0) hash ^= ReplicaId.GetHashCode();
      if (packetCase_ == PacketOneofCase.SyncFrom) hash ^= SyncFrom.GetHashCode();
      if (packetCase_ == PacketOneofCase.Items) hash ^= Items.GetHashCode();
      if (packetCase_ == PacketOneofCase.Item) hash ^= Item.GetHashCode();
      if (packetCase_ == PacketOneofCase.SkipPos) hash ^= SkipPos.GetHashCode();
      hash ^= (int) packetCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReplicaId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ReplicaId);
      }
      if (packetCase_ == PacketOneofCase.SyncFrom) {
        output.WriteRawTag(34);
        output.WriteMessage(SyncFrom);
      }
      if (packetCase_ == PacketOneofCase.Items) {
        output.WriteRawTag(42);
        output.WriteMessage(Items);
      }
      if (packetCase_ == PacketOneofCase.Item) {
        output.WriteRawTag(50);
        output.WriteMessage(Item);
      }
      if (packetCase_ == PacketOneofCase.SkipPos) {
        output.WriteRawTag(58);
        output.WriteMessage(SkipPos);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReplicaId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ReplicaId);
      }
      if (packetCase_ == PacketOneofCase.SyncFrom) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SyncFrom);
      }
      if (packetCase_ == PacketOneofCase.Items) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Items);
      }
      if (packetCase_ == PacketOneofCase.Item) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Item);
      }
      if (packetCase_ == PacketOneofCase.SkipPos) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SkipPos);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SyncPacket other) {
      if (other == null) {
        return;
      }
      if (other.ReplicaId.Length != 0) {
        ReplicaId = other.ReplicaId;
      }
      switch (other.PacketCase) {
        case PacketOneofCase.SyncFrom:
          if (SyncFrom == null) {
            SyncFrom = new global::LmdbCache.SyncPacket.Types.SyncFrom();
          }
          SyncFrom.MergeFrom(other.SyncFrom);
          break;
        case PacketOneofCase.Items:
          if (Items == null) {
            Items = new global::LmdbCache.SyncPacket.Types.Items();
          }
          Items.MergeFrom(other.Items);
          break;
        case PacketOneofCase.Item:
          if (Item == null) {
            Item = new global::LmdbCache.SyncPacket.Types.Item();
          }
          Item.MergeFrom(other.Item);
          break;
        case PacketOneofCase.SkipPos:
          if (SkipPos == null) {
            SkipPos = new global::LmdbCache.SyncPacket.Types.SkipPos();
          }
          SkipPos.MergeFrom(other.SkipPos);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ReplicaId = input.ReadString();
            break;
          }
          case 34: {
            global::LmdbCache.SyncPacket.Types.SyncFrom subBuilder = new global::LmdbCache.SyncPacket.Types.SyncFrom();
            if (packetCase_ == PacketOneofCase.SyncFrom) {
              subBuilder.MergeFrom(SyncFrom);
            }
            input.ReadMessage(subBuilder);
            SyncFrom = subBuilder;
            break;
          }
          case 42: {
            global::LmdbCache.SyncPacket.Types.Items subBuilder = new global::LmdbCache.SyncPacket.Types.Items();
            if (packetCase_ == PacketOneofCase.Items) {
              subBuilder.MergeFrom(Items);
            }
            input.ReadMessage(subBuilder);
            Items = subBuilder;
            break;
          }
          case 50: {
            global::LmdbCache.SyncPacket.Types.Item subBuilder = new global::LmdbCache.SyncPacket.Types.Item();
            if (packetCase_ == PacketOneofCase.Item) {
              subBuilder.MergeFrom(Item);
            }
            input.ReadMessage(subBuilder);
            Item = subBuilder;
            break;
          }
          case 58: {
            global::LmdbCache.SyncPacket.Types.SkipPos subBuilder = new global::LmdbCache.SyncPacket.Types.SkipPos();
            if (packetCase_ == PacketOneofCase.SkipPos) {
              subBuilder.MergeFrom(SkipPos);
            }
            input.ReadMessage(subBuilder);
            SkipPos = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the SyncPacket message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class SyncFrom : pb::IMessage<SyncFrom> {
        private static readonly pb::MessageParser<SyncFrom> _parser = new pb::MessageParser<SyncFrom>(() => new SyncFrom());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SyncFrom> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::LmdbCache.SyncPacket.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SyncFrom() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SyncFrom(SyncFrom other) : this() {
          replicaId_ = other.replicaId_;
          since_ = other.since_;
          includeMine_ = other.includeMine_;
          includeAcked_ = other.includeAcked_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SyncFrom Clone() {
          return new SyncFrom(this);
        }

        /// <summary>Field number for the "replicaId" field.</summary>
        public const int ReplicaIdFieldNumber = 1;
        private string replicaId_ = "";
        /// <summary>
        /// TODO: Add pagesize?
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ReplicaId {
          get { return replicaId_; }
          set {
            replicaId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "since" field.</summary>
        public const int SinceFieldNumber = 2;
        private ulong since_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Since {
          get { return since_; }
          set {
            since_ = value;
          }
        }

        /// <summary>Field number for the "includeMine" field.</summary>
        public const int IncludeMineFieldNumber = 3;
        private bool includeMine_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool IncludeMine {
          get { return includeMine_; }
          set {
            includeMine_ = value;
          }
        }

        /// <summary>Field number for the "includeAcked" field.</summary>
        public const int IncludeAckedFieldNumber = 4;
        private bool includeAcked_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool IncludeAcked {
          get { return includeAcked_; }
          set {
            includeAcked_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as SyncFrom);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SyncFrom other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ReplicaId != other.ReplicaId) return false;
          if (Since != other.Since) return false;
          if (IncludeMine != other.IncludeMine) return false;
          if (IncludeAcked != other.IncludeAcked) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (ReplicaId.Length != 0) hash ^= ReplicaId.GetHashCode();
          if (Since != 0UL) hash ^= Since.GetHashCode();
          if (IncludeMine != false) hash ^= IncludeMine.GetHashCode();
          if (IncludeAcked != false) hash ^= IncludeAcked.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (ReplicaId.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(ReplicaId);
          }
          if (Since != 0UL) {
            output.WriteRawTag(16);
            output.WriteUInt64(Since);
          }
          if (IncludeMine != false) {
            output.WriteRawTag(24);
            output.WriteBool(IncludeMine);
          }
          if (IncludeAcked != false) {
            output.WriteRawTag(32);
            output.WriteBool(IncludeAcked);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (ReplicaId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ReplicaId);
          }
          if (Since != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Since);
          }
          if (IncludeMine != false) {
            size += 1 + 1;
          }
          if (IncludeAcked != false) {
            size += 1 + 1;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SyncFrom other) {
          if (other == null) {
            return;
          }
          if (other.ReplicaId.Length != 0) {
            ReplicaId = other.ReplicaId;
          }
          if (other.Since != 0UL) {
            Since = other.Since;
          }
          if (other.IncludeMine != false) {
            IncludeMine = other.IncludeMine;
          }
          if (other.IncludeAcked != false) {
            IncludeAcked = other.IncludeAcked;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                ReplicaId = input.ReadString();
                break;
              }
              case 16: {
                Since = input.ReadUInt64();
                break;
              }
              case 24: {
                IncludeMine = input.ReadBool();
                break;
              }
              case 32: {
                IncludeAcked = input.ReadBool();
                break;
              }
            }
          }
        }

      }

      public sealed partial class Item : pb::IMessage<Item> {
        private static readonly pb::MessageParser<Item> _parser = new pb::MessageParser<Item>(() => new Item());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Item> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::LmdbCache.SyncPacket.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Item() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Item(Item other) : this() {
          pos_ = other.pos_;
          logEvent_ = other.logEvent_ != null ? other.logEvent_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Item Clone() {
          return new Item(this);
        }

        /// <summary>Field number for the "pos" field.</summary>
        public const int PosFieldNumber = 1;
        private ulong pos_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Pos {
          get { return pos_; }
          set {
            pos_ = value;
          }
        }

        /// <summary>Field number for the "logEvent" field.</summary>
        public const int LogEventFieldNumber = 2;
        private global::LmdbCache.WriteLogEvent logEvent_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::LmdbCache.WriteLogEvent LogEvent {
          get { return logEvent_; }
          set {
            logEvent_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Item);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Item other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Pos != other.Pos) return false;
          if (!object.Equals(LogEvent, other.LogEvent)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Pos != 0UL) hash ^= Pos.GetHashCode();
          if (logEvent_ != null) hash ^= LogEvent.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Pos != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(Pos);
          }
          if (logEvent_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(LogEvent);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Pos != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Pos);
          }
          if (logEvent_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(LogEvent);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Item other) {
          if (other == null) {
            return;
          }
          if (other.Pos != 0UL) {
            Pos = other.Pos;
          }
          if (other.logEvent_ != null) {
            if (logEvent_ == null) {
              logEvent_ = new global::LmdbCache.WriteLogEvent();
            }
            LogEvent.MergeFrom(other.LogEvent);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Pos = input.ReadUInt64();
                break;
              }
              case 18: {
                if (logEvent_ == null) {
                  logEvent_ = new global::LmdbCache.WriteLogEvent();
                }
                input.ReadMessage(logEvent_);
                break;
              }
            }
          }
        }

      }

      public sealed partial class Items : pb::IMessage<Items> {
        private static readonly pb::MessageParser<Items> _parser = new pb::MessageParser<Items>(() => new Items());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Items> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::LmdbCache.SyncPacket.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Items() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Items(Items other) : this() {
          batch_ = other.batch_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Items Clone() {
          return new Items(this);
        }

        /// <summary>Field number for the "batch" field.</summary>
        public const int BatchFieldNumber = 1;
        private static readonly pb::FieldCodec<global::LmdbCache.SyncPacket.Types.Item> _repeated_batch_codec
            = pb::FieldCodec.ForMessage(10, global::LmdbCache.SyncPacket.Types.Item.Parser);
        private readonly pbc::RepeatedField<global::LmdbCache.SyncPacket.Types.Item> batch_ = new pbc::RepeatedField<global::LmdbCache.SyncPacket.Types.Item>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::LmdbCache.SyncPacket.Types.Item> Batch {
          get { return batch_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Items);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Items other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!batch_.Equals(other.batch_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= batch_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          batch_.WriteTo(output, _repeated_batch_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += batch_.CalculateSize(_repeated_batch_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Items other) {
          if (other == null) {
            return;
          }
          batch_.Add(other.batch_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                batch_.AddEntriesFrom(input, _repeated_batch_codec);
                break;
              }
            }
          }
        }

      }

      public sealed partial class SkipPos : pb::IMessage<SkipPos> {
        private static readonly pb::MessageParser<SkipPos> _parser = new pb::MessageParser<SkipPos>(() => new SkipPos());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SkipPos> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::LmdbCache.SyncPacket.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SkipPos() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SkipPos(SkipPos other) : this() {
          lastPos_ = other.lastPos_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SkipPos Clone() {
          return new SkipPos(this);
        }

        /// <summary>Field number for the "lastPos" field.</summary>
        public const int LastPosFieldNumber = 1;
        private ulong lastPos_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong LastPos {
          get { return lastPos_; }
          set {
            lastPos_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as SkipPos);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SkipPos other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (LastPos != other.LastPos) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (LastPos != 0UL) hash ^= LastPos.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (LastPos != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(LastPos);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (LastPos != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(LastPos);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SkipPos other) {
          if (other == null) {
            return;
          }
          if (other.LastPos != 0UL) {
            LastPos = other.LastPos;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                LastPos = input.ReadUInt64();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class MonitoringUpdateRequest : pb::IMessage<MonitoringUpdateRequest> {
    private static readonly pb::MessageParser<MonitoringUpdateRequest> _parser = new pb::MessageParser<MonitoringUpdateRequest>(() => new MonitoringUpdateRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MonitoringUpdateRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LmdbCache.LmdbCacheRemotingReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonitoringUpdateRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonitoringUpdateRequest(MonitoringUpdateRequest other) : this() {
      correlationId_ = other.correlationId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonitoringUpdateRequest Clone() {
      return new MonitoringUpdateRequest(this);
    }

    /// <summary>Field number for the "correlationId" field.</summary>
    public const int CorrelationIdFieldNumber = 1;
    private string correlationId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CorrelationId {
      get { return correlationId_; }
      set {
        correlationId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MonitoringUpdateRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MonitoringUpdateRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CorrelationId != other.CorrelationId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CorrelationId.Length != 0) hash ^= CorrelationId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CorrelationId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CorrelationId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CorrelationId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CorrelationId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MonitoringUpdateRequest other) {
      if (other == null) {
        return;
      }
      if (other.CorrelationId.Length != 0) {
        CorrelationId = other.CorrelationId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            CorrelationId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MonitoringUpdateResponse : pb::IMessage<MonitoringUpdateResponse> {
    private static readonly pb::MessageParser<MonitoringUpdateResponse> _parser = new pb::MessageParser<MonitoringUpdateResponse>(() => new MonitoringUpdateResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MonitoringUpdateResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LmdbCache.LmdbCacheRemotingReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonitoringUpdateResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonitoringUpdateResponse(MonitoringUpdateResponse other) : this() {
      status_ = other.status_ != null ? other.status_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonitoringUpdateResponse Clone() {
      return new MonitoringUpdateResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::LmdbCache.ReplicaStatus status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LmdbCache.ReplicaStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MonitoringUpdateResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MonitoringUpdateResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Status, other.Status)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (status_ != null) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (status_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (status_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MonitoringUpdateResponse other) {
      if (other == null) {
        return;
      }
      if (other.status_ != null) {
        if (status_ == null) {
          status_ = new global::LmdbCache.ReplicaStatus();
        }
        Status.MergeFrom(other.Status);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (status_ == null) {
              status_ = new global::LmdbCache.ReplicaStatus();
            }
            input.ReadMessage(status_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReplicaStatus : pb::IMessage<ReplicaStatus> {
    private static readonly pb::MessageParser<ReplicaStatus> _parser = new pb::MessageParser<ReplicaStatus>(() => new ReplicaStatus());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReplicaStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LmdbCache.LmdbCacheRemotingReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplicaStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplicaStatus(ReplicaStatus other) : this() {
      replicaId_ = other.replicaId_;
      connectionInfo_ = other.connectionInfo_ != null ? other.connectionInfo_.Clone() : null;
      started_ = other.started_ != null ? other.started_.Clone() : null;
      replicaConfig_ = other.replicaConfig_ != null ? other.replicaConfig_.Clone() : null;
      currentClock_ = other.currentClock_ != null ? other.currentClock_.Clone() : null;
      counters_ = other.counters_ != null ? other.counters_.Clone() : null;
      collectedStats_ = other.collectedStats_ != null ? other.collectedStats_.Clone() : null;
      clusterStatus_ = other.clusterStatus_ != null ? other.clusterStatus_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplicaStatus Clone() {
      return new ReplicaStatus(this);
    }

    /// <summary>Field number for the "replicaId" field.</summary>
    public const int ReplicaIdFieldNumber = 1;
    private string replicaId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReplicaId {
      get { return replicaId_; }
      set {
        replicaId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "connectionInfo" field.</summary>
    public const int ConnectionInfoFieldNumber = 2;
    private global::LmdbCache.ReplicaConnectionInfo connectionInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LmdbCache.ReplicaConnectionInfo ConnectionInfo {
      get { return connectionInfo_; }
      set {
        connectionInfo_ = value;
      }
    }

    /// <summary>Field number for the "started" field.</summary>
    public const int StartedFieldNumber = 3;
    private global::LmdbCache.Timestamp started_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LmdbCache.Timestamp Started {
      get { return started_; }
      set {
        started_ = value;
      }
    }

    /// <summary>Field number for the "replicaConfig" field.</summary>
    public const int ReplicaConfigFieldNumber = 4;
    private global::LmdbCache.ReplicaConfig replicaConfig_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LmdbCache.ReplicaConfig ReplicaConfig {
      get { return replicaConfig_; }
      set {
        replicaConfig_ = value;
      }
    }

    /// <summary>Field number for the "currentClock" field.</summary>
    public const int CurrentClockFieldNumber = 5;
    private global::LmdbCache.VectorClock currentClock_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LmdbCache.VectorClock CurrentClock {
      get { return currentClock_; }
      set {
        currentClock_ = value;
      }
    }

    /// <summary>Field number for the "counters" field.</summary>
    public const int CountersFieldNumber = 10;
    private global::LmdbCache.ReplicaCounters counters_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LmdbCache.ReplicaCounters Counters {
      get { return counters_; }
      set {
        counters_ = value;
      }
    }

    /// <summary>Field number for the "collectedStats" field.</summary>
    public const int CollectedStatsFieldNumber = 11;
    private global::LmdbCache.CollectedStats collectedStats_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LmdbCache.CollectedStats CollectedStats {
      get { return collectedStats_; }
      set {
        collectedStats_ = value;
      }
    }

    /// <summary>Field number for the "clusterStatus" field.</summary>
    public const int ClusterStatusFieldNumber = 12;
    private global::LmdbCache.ClusterStatus clusterStatus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LmdbCache.ClusterStatus ClusterStatus {
      get { return clusterStatus_; }
      set {
        clusterStatus_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReplicaStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReplicaStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReplicaId != other.ReplicaId) return false;
      if (!object.Equals(ConnectionInfo, other.ConnectionInfo)) return false;
      if (!object.Equals(Started, other.Started)) return false;
      if (!object.Equals(ReplicaConfig, other.ReplicaConfig)) return false;
      if (!object.Equals(CurrentClock, other.CurrentClock)) return false;
      if (!object.Equals(Counters, other.Counters)) return false;
      if (!object.Equals(CollectedStats, other.CollectedStats)) return false;
      if (!object.Equals(ClusterStatus, other.ClusterStatus)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReplicaId.Length != 0) hash ^= ReplicaId.GetHashCode();
      if (connectionInfo_ != null) hash ^= ConnectionInfo.GetHashCode();
      if (started_ != null) hash ^= Started.GetHashCode();
      if (replicaConfig_ != null) hash ^= ReplicaConfig.GetHashCode();
      if (currentClock_ != null) hash ^= CurrentClock.GetHashCode();
      if (counters_ != null) hash ^= Counters.GetHashCode();
      if (collectedStats_ != null) hash ^= CollectedStats.GetHashCode();
      if (clusterStatus_ != null) hash ^= ClusterStatus.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReplicaId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ReplicaId);
      }
      if (connectionInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ConnectionInfo);
      }
      if (started_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Started);
      }
      if (replicaConfig_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ReplicaConfig);
      }
      if (currentClock_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(CurrentClock);
      }
      if (counters_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Counters);
      }
      if (collectedStats_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(CollectedStats);
      }
      if (clusterStatus_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(ClusterStatus);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReplicaId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ReplicaId);
      }
      if (connectionInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConnectionInfo);
      }
      if (started_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Started);
      }
      if (replicaConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReplicaConfig);
      }
      if (currentClock_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CurrentClock);
      }
      if (counters_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Counters);
      }
      if (collectedStats_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CollectedStats);
      }
      if (clusterStatus_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClusterStatus);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReplicaStatus other) {
      if (other == null) {
        return;
      }
      if (other.ReplicaId.Length != 0) {
        ReplicaId = other.ReplicaId;
      }
      if (other.connectionInfo_ != null) {
        if (connectionInfo_ == null) {
          connectionInfo_ = new global::LmdbCache.ReplicaConnectionInfo();
        }
        ConnectionInfo.MergeFrom(other.ConnectionInfo);
      }
      if (other.started_ != null) {
        if (started_ == null) {
          started_ = new global::LmdbCache.Timestamp();
        }
        Started.MergeFrom(other.Started);
      }
      if (other.replicaConfig_ != null) {
        if (replicaConfig_ == null) {
          replicaConfig_ = new global::LmdbCache.ReplicaConfig();
        }
        ReplicaConfig.MergeFrom(other.ReplicaConfig);
      }
      if (other.currentClock_ != null) {
        if (currentClock_ == null) {
          currentClock_ = new global::LmdbCache.VectorClock();
        }
        CurrentClock.MergeFrom(other.CurrentClock);
      }
      if (other.counters_ != null) {
        if (counters_ == null) {
          counters_ = new global::LmdbCache.ReplicaCounters();
        }
        Counters.MergeFrom(other.Counters);
      }
      if (other.collectedStats_ != null) {
        if (collectedStats_ == null) {
          collectedStats_ = new global::LmdbCache.CollectedStats();
        }
        CollectedStats.MergeFrom(other.CollectedStats);
      }
      if (other.clusterStatus_ != null) {
        if (clusterStatus_ == null) {
          clusterStatus_ = new global::LmdbCache.ClusterStatus();
        }
        ClusterStatus.MergeFrom(other.ClusterStatus);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ReplicaId = input.ReadString();
            break;
          }
          case 18: {
            if (connectionInfo_ == null) {
              connectionInfo_ = new global::LmdbCache.ReplicaConnectionInfo();
            }
            input.ReadMessage(connectionInfo_);
            break;
          }
          case 26: {
            if (started_ == null) {
              started_ = new global::LmdbCache.Timestamp();
            }
            input.ReadMessage(started_);
            break;
          }
          case 34: {
            if (replicaConfig_ == null) {
              replicaConfig_ = new global::LmdbCache.ReplicaConfig();
            }
            input.ReadMessage(replicaConfig_);
            break;
          }
          case 42: {
            if (currentClock_ == null) {
              currentClock_ = new global::LmdbCache.VectorClock();
            }
            input.ReadMessage(currentClock_);
            break;
          }
          case 82: {
            if (counters_ == null) {
              counters_ = new global::LmdbCache.ReplicaCounters();
            }
            input.ReadMessage(counters_);
            break;
          }
          case 90: {
            if (collectedStats_ == null) {
              collectedStats_ = new global::LmdbCache.CollectedStats();
            }
            input.ReadMessage(collectedStats_);
            break;
          }
          case 98: {
            if (clusterStatus_ == null) {
              clusterStatus_ = new global::LmdbCache.ClusterStatus();
            }
            input.ReadMessage(clusterStatus_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ClusterStatus : pb::IMessage<ClusterStatus> {
    private static readonly pb::MessageParser<ClusterStatus> _parser = new pb::MessageParser<ClusterStatus>(() => new ClusterStatus());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClusterStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LmdbCache.LmdbCacheRemotingReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClusterStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClusterStatus(ClusterStatus other) : this() {
      replicas_ = other.replicas_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClusterStatus Clone() {
      return new ClusterStatus(this);
    }

    /// <summary>Field number for the "replicas" field.</summary>
    public const int ReplicasFieldNumber = 1;
    private static readonly pbc::MapField<string, global::LmdbCache.ReplicaConnectionInfo>.Codec _map_replicas_codec
        = new pbc::MapField<string, global::LmdbCache.ReplicaConnectionInfo>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::LmdbCache.ReplicaConnectionInfo.Parser), 10);
    private readonly pbc::MapField<string, global::LmdbCache.ReplicaConnectionInfo> replicas_ = new pbc::MapField<string, global::LmdbCache.ReplicaConnectionInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::LmdbCache.ReplicaConnectionInfo> Replicas {
      get { return replicas_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClusterStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClusterStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!Replicas.Equals(other.Replicas)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= Replicas.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      replicas_.WriteTo(output, _map_replicas_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += replicas_.CalculateSize(_map_replicas_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClusterStatus other) {
      if (other == null) {
        return;
      }
      replicas_.Add(other.replicas_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            replicas_.AddEntriesFrom(input, _map_replicas_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReplicaConnectionInfo : pb::IMessage<ReplicaConnectionInfo> {
    private static readonly pb::MessageParser<ReplicaConnectionInfo> _parser = new pb::MessageParser<ReplicaConnectionInfo>(() => new ReplicaConnectionInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReplicaConnectionInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LmdbCache.LmdbCacheRemotingReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplicaConnectionInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplicaConnectionInfo(ReplicaConnectionInfo other) : this() {
      host_ = other.host_;
      port_ = other.port_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplicaConnectionInfo Clone() {
      return new ReplicaConnectionInfo(this);
    }

    /// <summary>Field number for the "host" field.</summary>
    public const int HostFieldNumber = 1;
    private string host_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Host {
      get { return host_; }
      set {
        host_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 2;
    private uint port_;
    /// <summary>
    /// Some other metadata?
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReplicaConnectionInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReplicaConnectionInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Host != other.Host) return false;
      if (Port != other.Port) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Host.Length != 0) hash ^= Host.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Host.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Host);
      }
      if (Port != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Port);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Host.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Host);
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Port);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReplicaConnectionInfo other) {
      if (other == null) {
        return;
      }
      if (other.Host.Length != 0) {
        Host = other.Host;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Host = input.ReadString();
            break;
          }
          case 16: {
            Port = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReplicaCounters : pb::IMessage<ReplicaCounters> {
    private static readonly pb::MessageParser<ReplicaCounters> _parser = new pb::MessageParser<ReplicaCounters>(() => new ReplicaCounters());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReplicaCounters> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LmdbCache.LmdbCacheRemotingReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplicaCounters() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplicaCounters(ReplicaCounters other) : this() {
      addsCounter_ = other.addsCounter_;
      deletesCounter_ = other.deletesCounter_;
      copysCounter_ = other.copysCounter_;
      getCounter_ = other.getCounter_;
      containsCounter_ = other.containsCounter_;
      keySearchCounter_ = other.keySearchCounter_;
      metadataSearchCounter_ = other.metadataSearchCounter_;
      pageSearchCounter_ = other.pageSearchCounter_;
      largestKeySize_ = other.largestKeySize_;
      largestValueSize_ = other.largestValueSize_;
      replicatedAdds_ = other.replicatedAdds_;
      replicatedDeletes_ = other.replicatedDeletes_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplicaCounters Clone() {
      return new ReplicaCounters(this);
    }

    /// <summary>Field number for the "addsCounter" field.</summary>
    public const int AddsCounterFieldNumber = 1;
    private ulong addsCounter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong AddsCounter {
      get { return addsCounter_; }
      set {
        addsCounter_ = value;
      }
    }

    /// <summary>Field number for the "deletesCounter" field.</summary>
    public const int DeletesCounterFieldNumber = 2;
    private ulong deletesCounter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong DeletesCounter {
      get { return deletesCounter_; }
      set {
        deletesCounter_ = value;
      }
    }

    /// <summary>Field number for the "copysCounter" field.</summary>
    public const int CopysCounterFieldNumber = 3;
    private ulong copysCounter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CopysCounter {
      get { return copysCounter_; }
      set {
        copysCounter_ = value;
      }
    }

    /// <summary>Field number for the "getCounter" field.</summary>
    public const int GetCounterFieldNumber = 4;
    private ulong getCounter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GetCounter {
      get { return getCounter_; }
      set {
        getCounter_ = value;
      }
    }

    /// <summary>Field number for the "containsCounter" field.</summary>
    public const int ContainsCounterFieldNumber = 5;
    private ulong containsCounter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ContainsCounter {
      get { return containsCounter_; }
      set {
        containsCounter_ = value;
      }
    }

    /// <summary>Field number for the "keySearchCounter" field.</summary>
    public const int KeySearchCounterFieldNumber = 6;
    private ulong keySearchCounter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong KeySearchCounter {
      get { return keySearchCounter_; }
      set {
        keySearchCounter_ = value;
      }
    }

    /// <summary>Field number for the "metadataSearchCounter" field.</summary>
    public const int MetadataSearchCounterFieldNumber = 7;
    private ulong metadataSearchCounter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MetadataSearchCounter {
      get { return metadataSearchCounter_; }
      set {
        metadataSearchCounter_ = value;
      }
    }

    /// <summary>Field number for the "pageSearchCounter" field.</summary>
    public const int PageSearchCounterFieldNumber = 8;
    private ulong pageSearchCounter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PageSearchCounter {
      get { return pageSearchCounter_; }
      set {
        pageSearchCounter_ = value;
      }
    }

    /// <summary>Field number for the "largestKeySize" field.</summary>
    public const int LargestKeySizeFieldNumber = 10;
    private uint largestKeySize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LargestKeySize {
      get { return largestKeySize_; }
      set {
        largestKeySize_ = value;
      }
    }

    /// <summary>Field number for the "largestValueSize" field.</summary>
    public const int LargestValueSizeFieldNumber = 11;
    private uint largestValueSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LargestValueSize {
      get { return largestValueSize_; }
      set {
        largestValueSize_ = value;
      }
    }

    /// <summary>Field number for the "replicatedAdds" field.</summary>
    public const int ReplicatedAddsFieldNumber = 15;
    private ulong replicatedAdds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ReplicatedAdds {
      get { return replicatedAdds_; }
      set {
        replicatedAdds_ = value;
      }
    }

    /// <summary>Field number for the "replicatedDeletes" field.</summary>
    public const int ReplicatedDeletesFieldNumber = 16;
    private ulong replicatedDeletes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ReplicatedDeletes {
      get { return replicatedDeletes_; }
      set {
        replicatedDeletes_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReplicaCounters);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReplicaCounters other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AddsCounter != other.AddsCounter) return false;
      if (DeletesCounter != other.DeletesCounter) return false;
      if (CopysCounter != other.CopysCounter) return false;
      if (GetCounter != other.GetCounter) return false;
      if (ContainsCounter != other.ContainsCounter) return false;
      if (KeySearchCounter != other.KeySearchCounter) return false;
      if (MetadataSearchCounter != other.MetadataSearchCounter) return false;
      if (PageSearchCounter != other.PageSearchCounter) return false;
      if (LargestKeySize != other.LargestKeySize) return false;
      if (LargestValueSize != other.LargestValueSize) return false;
      if (ReplicatedAdds != other.ReplicatedAdds) return false;
      if (ReplicatedDeletes != other.ReplicatedDeletes) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AddsCounter != 0UL) hash ^= AddsCounter.GetHashCode();
      if (DeletesCounter != 0UL) hash ^= DeletesCounter.GetHashCode();
      if (CopysCounter != 0UL) hash ^= CopysCounter.GetHashCode();
      if (GetCounter != 0UL) hash ^= GetCounter.GetHashCode();
      if (ContainsCounter != 0UL) hash ^= ContainsCounter.GetHashCode();
      if (KeySearchCounter != 0UL) hash ^= KeySearchCounter.GetHashCode();
      if (MetadataSearchCounter != 0UL) hash ^= MetadataSearchCounter.GetHashCode();
      if (PageSearchCounter != 0UL) hash ^= PageSearchCounter.GetHashCode();
      if (LargestKeySize != 0) hash ^= LargestKeySize.GetHashCode();
      if (LargestValueSize != 0) hash ^= LargestValueSize.GetHashCode();
      if (ReplicatedAdds != 0UL) hash ^= ReplicatedAdds.GetHashCode();
      if (ReplicatedDeletes != 0UL) hash ^= ReplicatedDeletes.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AddsCounter != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(AddsCounter);
      }
      if (DeletesCounter != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(DeletesCounter);
      }
      if (CopysCounter != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(CopysCounter);
      }
      if (GetCounter != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(GetCounter);
      }
      if (ContainsCounter != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(ContainsCounter);
      }
      if (KeySearchCounter != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(KeySearchCounter);
      }
      if (MetadataSearchCounter != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(MetadataSearchCounter);
      }
      if (PageSearchCounter != 0UL) {
        output.WriteRawTag(64);
        output.WriteUInt64(PageSearchCounter);
      }
      if (LargestKeySize != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(LargestKeySize);
      }
      if (LargestValueSize != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(LargestValueSize);
      }
      if (ReplicatedAdds != 0UL) {
        output.WriteRawTag(120);
        output.WriteUInt64(ReplicatedAdds);
      }
      if (ReplicatedDeletes != 0UL) {
        output.WriteRawTag(128, 1);
        output.WriteUInt64(ReplicatedDeletes);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AddsCounter != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AddsCounter);
      }
      if (DeletesCounter != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(DeletesCounter);
      }
      if (CopysCounter != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CopysCounter);
      }
      if (GetCounter != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GetCounter);
      }
      if (ContainsCounter != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ContainsCounter);
      }
      if (KeySearchCounter != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(KeySearchCounter);
      }
      if (MetadataSearchCounter != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MetadataSearchCounter);
      }
      if (PageSearchCounter != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PageSearchCounter);
      }
      if (LargestKeySize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LargestKeySize);
      }
      if (LargestValueSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LargestValueSize);
      }
      if (ReplicatedAdds != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ReplicatedAdds);
      }
      if (ReplicatedDeletes != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(ReplicatedDeletes);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReplicaCounters other) {
      if (other == null) {
        return;
      }
      if (other.AddsCounter != 0UL) {
        AddsCounter = other.AddsCounter;
      }
      if (other.DeletesCounter != 0UL) {
        DeletesCounter = other.DeletesCounter;
      }
      if (other.CopysCounter != 0UL) {
        CopysCounter = other.CopysCounter;
      }
      if (other.GetCounter != 0UL) {
        GetCounter = other.GetCounter;
      }
      if (other.ContainsCounter != 0UL) {
        ContainsCounter = other.ContainsCounter;
      }
      if (other.KeySearchCounter != 0UL) {
        KeySearchCounter = other.KeySearchCounter;
      }
      if (other.MetadataSearchCounter != 0UL) {
        MetadataSearchCounter = other.MetadataSearchCounter;
      }
      if (other.PageSearchCounter != 0UL) {
        PageSearchCounter = other.PageSearchCounter;
      }
      if (other.LargestKeySize != 0) {
        LargestKeySize = other.LargestKeySize;
      }
      if (other.LargestValueSize != 0) {
        LargestValueSize = other.LargestValueSize;
      }
      if (other.ReplicatedAdds != 0UL) {
        ReplicatedAdds = other.ReplicatedAdds;
      }
      if (other.ReplicatedDeletes != 0UL) {
        ReplicatedDeletes = other.ReplicatedDeletes;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AddsCounter = input.ReadUInt64();
            break;
          }
          case 16: {
            DeletesCounter = input.ReadUInt64();
            break;
          }
          case 24: {
            CopysCounter = input.ReadUInt64();
            break;
          }
          case 32: {
            GetCounter = input.ReadUInt64();
            break;
          }
          case 40: {
            ContainsCounter = input.ReadUInt64();
            break;
          }
          case 48: {
            KeySearchCounter = input.ReadUInt64();
            break;
          }
          case 56: {
            MetadataSearchCounter = input.ReadUInt64();
            break;
          }
          case 64: {
            PageSearchCounter = input.ReadUInt64();
            break;
          }
          case 80: {
            LargestKeySize = input.ReadUInt32();
            break;
          }
          case 88: {
            LargestValueSize = input.ReadUInt32();
            break;
          }
          case 120: {
            ReplicatedAdds = input.ReadUInt64();
            break;
          }
          case 128: {
            ReplicatedDeletes = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CollectedStats : pb::IMessage<CollectedStats> {
    private static readonly pb::MessageParser<CollectedStats> _parser = new pb::MessageParser<CollectedStats>(() => new CollectedStats());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CollectedStats> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LmdbCache.LmdbCacheRemotingReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CollectedStats() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CollectedStats(CollectedStats other) : this() {
      nonExpiredKeys_ = other.nonExpiredKeys_;
      allKeys_ = other.allKeys_;
      activeKeys_ = other.activeKeys_;
      deletedKeys_ = other.deletedKeys_;
      expiredKeys_ = other.expiredKeys_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CollectedStats Clone() {
      return new CollectedStats(this);
    }

    /// <summary>Field number for the "nonExpiredKeys" field.</summary>
    public const int NonExpiredKeysFieldNumber = 10;
    private ulong nonExpiredKeys_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong NonExpiredKeys {
      get { return nonExpiredKeys_; }
      set {
        nonExpiredKeys_ = value;
      }
    }

    /// <summary>Field number for the "allKeys" field.</summary>
    public const int AllKeysFieldNumber = 11;
    private ulong allKeys_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong AllKeys {
      get { return allKeys_; }
      set {
        allKeys_ = value;
      }
    }

    /// <summary>Field number for the "activeKeys" field.</summary>
    public const int ActiveKeysFieldNumber = 12;
    private ulong activeKeys_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ActiveKeys {
      get { return activeKeys_; }
      set {
        activeKeys_ = value;
      }
    }

    /// <summary>Field number for the "deletedKeys" field.</summary>
    public const int DeletedKeysFieldNumber = 13;
    private ulong deletedKeys_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong DeletedKeys {
      get { return deletedKeys_; }
      set {
        deletedKeys_ = value;
      }
    }

    /// <summary>Field number for the "expiredKeys" field.</summary>
    public const int ExpiredKeysFieldNumber = 14;
    private ulong expiredKeys_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ExpiredKeys {
      get { return expiredKeys_; }
      set {
        expiredKeys_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CollectedStats);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CollectedStats other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NonExpiredKeys != other.NonExpiredKeys) return false;
      if (AllKeys != other.AllKeys) return false;
      if (ActiveKeys != other.ActiveKeys) return false;
      if (DeletedKeys != other.DeletedKeys) return false;
      if (ExpiredKeys != other.ExpiredKeys) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NonExpiredKeys != 0UL) hash ^= NonExpiredKeys.GetHashCode();
      if (AllKeys != 0UL) hash ^= AllKeys.GetHashCode();
      if (ActiveKeys != 0UL) hash ^= ActiveKeys.GetHashCode();
      if (DeletedKeys != 0UL) hash ^= DeletedKeys.GetHashCode();
      if (ExpiredKeys != 0UL) hash ^= ExpiredKeys.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NonExpiredKeys != 0UL) {
        output.WriteRawTag(80);
        output.WriteUInt64(NonExpiredKeys);
      }
      if (AllKeys != 0UL) {
        output.WriteRawTag(88);
        output.WriteUInt64(AllKeys);
      }
      if (ActiveKeys != 0UL) {
        output.WriteRawTag(96);
        output.WriteUInt64(ActiveKeys);
      }
      if (DeletedKeys != 0UL) {
        output.WriteRawTag(104);
        output.WriteUInt64(DeletedKeys);
      }
      if (ExpiredKeys != 0UL) {
        output.WriteRawTag(112);
        output.WriteUInt64(ExpiredKeys);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NonExpiredKeys != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(NonExpiredKeys);
      }
      if (AllKeys != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AllKeys);
      }
      if (ActiveKeys != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ActiveKeys);
      }
      if (DeletedKeys != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(DeletedKeys);
      }
      if (ExpiredKeys != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ExpiredKeys);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CollectedStats other) {
      if (other == null) {
        return;
      }
      if (other.NonExpiredKeys != 0UL) {
        NonExpiredKeys = other.NonExpiredKeys;
      }
      if (other.AllKeys != 0UL) {
        AllKeys = other.AllKeys;
      }
      if (other.ActiveKeys != 0UL) {
        ActiveKeys = other.ActiveKeys;
      }
      if (other.DeletedKeys != 0UL) {
        DeletedKeys = other.DeletedKeys;
      }
      if (other.ExpiredKeys != 0UL) {
        ExpiredKeys = other.ExpiredKeys;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 80: {
            NonExpiredKeys = input.ReadUInt64();
            break;
          }
          case 88: {
            AllKeys = input.ReadUInt64();
            break;
          }
          case 96: {
            ActiveKeys = input.ReadUInt64();
            break;
          }
          case 104: {
            DeletedKeys = input.ReadUInt64();
            break;
          }
          case 112: {
            ExpiredKeys = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
