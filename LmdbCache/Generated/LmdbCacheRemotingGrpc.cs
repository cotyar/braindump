// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: lmdb_cache_remoting.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace LmdbCache {
  /// <summary>
  /// Interface exported by the server.
  /// </summary>
  public static partial class LmdbCacheService
  {
    static readonly string __ServiceName = "LmdbCache.LmdbCacheService";

    static readonly grpc::Marshaller<global::LmdbCache.AddRequest> __Marshaller_LmdbCache_AddRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::LmdbCache.AddRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::LmdbCache.AddResponse> __Marshaller_LmdbCache_AddResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::LmdbCache.AddResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::LmdbCache.AddStreamRequest> __Marshaller_LmdbCache_AddStreamRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::LmdbCache.AddStreamRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::LmdbCache.DeleteRequest> __Marshaller_LmdbCache_DeleteRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::LmdbCache.DeleteRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::LmdbCache.DeleteResponse> __Marshaller_LmdbCache_DeleteResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::LmdbCache.DeleteResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::LmdbCache.CopyRequest> __Marshaller_LmdbCache_CopyRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::LmdbCache.CopyRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::LmdbCache.CopyResponse> __Marshaller_LmdbCache_CopyResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::LmdbCache.CopyResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::LmdbCache.GetRequest> __Marshaller_LmdbCache_GetRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::LmdbCache.GetRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::LmdbCache.GetResponse> __Marshaller_LmdbCache_GetResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::LmdbCache.GetResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::LmdbCache.GetStreamResponse> __Marshaller_LmdbCache_GetStreamResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::LmdbCache.GetStreamResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::LmdbCache.ContainsKeysResponse> __Marshaller_LmdbCache_ContainsKeysResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::LmdbCache.ContainsKeysResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::LmdbCache.KeyListRequest> __Marshaller_LmdbCache_KeyListRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::LmdbCache.KeyListRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::LmdbCache.KeyListResponse> __Marshaller_LmdbCache_KeyListResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::LmdbCache.KeyListResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::LmdbCache.KeyValueListResponse> __Marshaller_LmdbCache_KeyValueListResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::LmdbCache.KeyValueListResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::LmdbCache.AddRequest, global::LmdbCache.AddResponse> __Method_Add = new grpc::Method<global::LmdbCache.AddRequest, global::LmdbCache.AddResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Add",
        __Marshaller_LmdbCache_AddRequest,
        __Marshaller_LmdbCache_AddResponse);

    static readonly grpc::Method<global::LmdbCache.AddStreamRequest, global::LmdbCache.AddResponse> __Method_AddStream = new grpc::Method<global::LmdbCache.AddStreamRequest, global::LmdbCache.AddResponse>(
        grpc::MethodType.ClientStreaming,
        __ServiceName,
        "AddStream",
        __Marshaller_LmdbCache_AddStreamRequest,
        __Marshaller_LmdbCache_AddResponse);

    static readonly grpc::Method<global::LmdbCache.DeleteRequest, global::LmdbCache.DeleteResponse> __Method_Delete = new grpc::Method<global::LmdbCache.DeleteRequest, global::LmdbCache.DeleteResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Delete",
        __Marshaller_LmdbCache_DeleteRequest,
        __Marshaller_LmdbCache_DeleteResponse);

    static readonly grpc::Method<global::LmdbCache.CopyRequest, global::LmdbCache.CopyResponse> __Method_Copy = new grpc::Method<global::LmdbCache.CopyRequest, global::LmdbCache.CopyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Copy",
        __Marshaller_LmdbCache_CopyRequest,
        __Marshaller_LmdbCache_CopyResponse);

    static readonly grpc::Method<global::LmdbCache.GetRequest, global::LmdbCache.GetResponse> __Method_Get = new grpc::Method<global::LmdbCache.GetRequest, global::LmdbCache.GetResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Get",
        __Marshaller_LmdbCache_GetRequest,
        __Marshaller_LmdbCache_GetResponse);

    static readonly grpc::Method<global::LmdbCache.GetRequest, global::LmdbCache.GetStreamResponse> __Method_GetStream = new grpc::Method<global::LmdbCache.GetRequest, global::LmdbCache.GetStreamResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetStream",
        __Marshaller_LmdbCache_GetRequest,
        __Marshaller_LmdbCache_GetStreamResponse);

    static readonly grpc::Method<global::LmdbCache.GetRequest, global::LmdbCache.ContainsKeysResponse> __Method_ContainsKeys = new grpc::Method<global::LmdbCache.GetRequest, global::LmdbCache.ContainsKeysResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ContainsKeys",
        __Marshaller_LmdbCache_GetRequest,
        __Marshaller_LmdbCache_ContainsKeysResponse);

    static readonly grpc::Method<global::LmdbCache.KeyListRequest, global::LmdbCache.KeyListResponse> __Method_ListKeys = new grpc::Method<global::LmdbCache.KeyListRequest, global::LmdbCache.KeyListResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "ListKeys",
        __Marshaller_LmdbCache_KeyListRequest,
        __Marshaller_LmdbCache_KeyListResponse);

    static readonly grpc::Method<global::LmdbCache.KeyListRequest, global::LmdbCache.KeyValueListResponse> __Method_ListKeyValues = new grpc::Method<global::LmdbCache.KeyListRequest, global::LmdbCache.KeyValueListResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "ListKeyValues",
        __Marshaller_LmdbCache_KeyListRequest,
        __Marshaller_LmdbCache_KeyValueListResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::LmdbCache.LmdbCacheRemotingReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of LmdbCacheService</summary>
    public abstract partial class LmdbCacheServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::LmdbCache.AddResponse> Add(global::LmdbCache.AddRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::LmdbCache.AddResponse> AddStream(grpc::IAsyncStreamReader<global::LmdbCache.AddStreamRequest> requestStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::LmdbCache.DeleteResponse> Delete(global::LmdbCache.DeleteRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::LmdbCache.CopyResponse> Copy(global::LmdbCache.CopyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::LmdbCache.GetResponse> Get(global::LmdbCache.GetRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task GetStream(global::LmdbCache.GetRequest request, grpc::IServerStreamWriter<global::LmdbCache.GetStreamResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::LmdbCache.ContainsKeysResponse> ContainsKeys(global::LmdbCache.GetRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task ListKeys(global::LmdbCache.KeyListRequest request, grpc::IServerStreamWriter<global::LmdbCache.KeyListResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task ListKeyValues(global::LmdbCache.KeyListRequest request, grpc::IServerStreamWriter<global::LmdbCache.KeyValueListResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for LmdbCacheService</summary>
    public partial class LmdbCacheServiceClient : grpc::ClientBase<LmdbCacheServiceClient>
    {
      /// <summary>Creates a new client for LmdbCacheService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public LmdbCacheServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for LmdbCacheService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public LmdbCacheServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected LmdbCacheServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected LmdbCacheServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::LmdbCache.AddResponse Add(global::LmdbCache.AddRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Add(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::LmdbCache.AddResponse Add(global::LmdbCache.AddRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Add, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::LmdbCache.AddResponse> AddAsync(global::LmdbCache.AddRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::LmdbCache.AddResponse> AddAsync(global::LmdbCache.AddRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Add, null, options, request);
      }
      public virtual grpc::AsyncClientStreamingCall<global::LmdbCache.AddStreamRequest, global::LmdbCache.AddResponse> AddStream(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddStream(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncClientStreamingCall<global::LmdbCache.AddStreamRequest, global::LmdbCache.AddResponse> AddStream(grpc::CallOptions options)
      {
        return CallInvoker.AsyncClientStreamingCall(__Method_AddStream, null, options);
      }
      public virtual global::LmdbCache.DeleteResponse Delete(global::LmdbCache.DeleteRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Delete(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::LmdbCache.DeleteResponse Delete(global::LmdbCache.DeleteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Delete, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::LmdbCache.DeleteResponse> DeleteAsync(global::LmdbCache.DeleteRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::LmdbCache.DeleteResponse> DeleteAsync(global::LmdbCache.DeleteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Delete, null, options, request);
      }
      public virtual global::LmdbCache.CopyResponse Copy(global::LmdbCache.CopyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Copy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::LmdbCache.CopyResponse Copy(global::LmdbCache.CopyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Copy, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::LmdbCache.CopyResponse> CopyAsync(global::LmdbCache.CopyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CopyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::LmdbCache.CopyResponse> CopyAsync(global::LmdbCache.CopyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Copy, null, options, request);
      }
      public virtual global::LmdbCache.GetResponse Get(global::LmdbCache.GetRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Get(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::LmdbCache.GetResponse Get(global::LmdbCache.GetRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Get, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::LmdbCache.GetResponse> GetAsync(global::LmdbCache.GetRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::LmdbCache.GetResponse> GetAsync(global::LmdbCache.GetRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Get, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::LmdbCache.GetStreamResponse> GetStream(global::LmdbCache.GetRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetStream(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::LmdbCache.GetStreamResponse> GetStream(global::LmdbCache.GetRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetStream, null, options, request);
      }
      public virtual global::LmdbCache.ContainsKeysResponse ContainsKeys(global::LmdbCache.GetRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ContainsKeys(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::LmdbCache.ContainsKeysResponse ContainsKeys(global::LmdbCache.GetRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ContainsKeys, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::LmdbCache.ContainsKeysResponse> ContainsKeysAsync(global::LmdbCache.GetRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ContainsKeysAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::LmdbCache.ContainsKeysResponse> ContainsKeysAsync(global::LmdbCache.GetRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ContainsKeys, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::LmdbCache.KeyListResponse> ListKeys(global::LmdbCache.KeyListRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListKeys(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::LmdbCache.KeyListResponse> ListKeys(global::LmdbCache.KeyListRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_ListKeys, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::LmdbCache.KeyValueListResponse> ListKeyValues(global::LmdbCache.KeyListRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListKeyValues(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::LmdbCache.KeyValueListResponse> ListKeyValues(global::LmdbCache.KeyListRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_ListKeyValues, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override LmdbCacheServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new LmdbCacheServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(LmdbCacheServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Add, serviceImpl.Add)
          .AddMethod(__Method_AddStream, serviceImpl.AddStream)
          .AddMethod(__Method_Delete, serviceImpl.Delete)
          .AddMethod(__Method_Copy, serviceImpl.Copy)
          .AddMethod(__Method_Get, serviceImpl.Get)
          .AddMethod(__Method_GetStream, serviceImpl.GetStream)
          .AddMethod(__Method_ContainsKeys, serviceImpl.ContainsKeys)
          .AddMethod(__Method_ListKeys, serviceImpl.ListKeys)
          .AddMethod(__Method_ListKeyValues, serviceImpl.ListKeyValues).Build();
    }

  }
  /// <summary>
  /// Interface exported by the server.
  /// </summary>
  public static partial class SyncService
  {
    static readonly string __ServiceName = "LmdbCache.SyncService";

    static readonly grpc::Marshaller<global::LmdbCache.Empty> __Marshaller_LmdbCache_Empty = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::LmdbCache.Empty.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::LmdbCache.GetReplicaIdResponse> __Marshaller_LmdbCache_GetReplicaIdResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::LmdbCache.GetReplicaIdResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::LmdbCache.SyncFromRequest> __Marshaller_LmdbCache_SyncFromRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::LmdbCache.SyncFromRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::LmdbCache.SyncFromResponse> __Marshaller_LmdbCache_SyncFromResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::LmdbCache.SyncFromResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::LmdbCache.SyncSubscribeRequest> __Marshaller_LmdbCache_SyncSubscribeRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::LmdbCache.SyncSubscribeRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::LmdbCache.SyncSubscribeResponse> __Marshaller_LmdbCache_SyncSubscribeResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::LmdbCache.SyncSubscribeResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::LmdbCache.SyncAckRequest> __Marshaller_LmdbCache_SyncAckRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::LmdbCache.SyncAckRequest.Parser.ParseFrom);

    static readonly grpc::Method<global::LmdbCache.Empty, global::LmdbCache.GetReplicaIdResponse> __Method_GetReplicaId = new grpc::Method<global::LmdbCache.Empty, global::LmdbCache.GetReplicaIdResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetReplicaId",
        __Marshaller_LmdbCache_Empty,
        __Marshaller_LmdbCache_GetReplicaIdResponse);

    static readonly grpc::Method<global::LmdbCache.SyncFromRequest, global::LmdbCache.SyncFromResponse> __Method_SyncFrom = new grpc::Method<global::LmdbCache.SyncFromRequest, global::LmdbCache.SyncFromResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "SyncFrom",
        __Marshaller_LmdbCache_SyncFromRequest,
        __Marshaller_LmdbCache_SyncFromResponse);

    static readonly grpc::Method<global::LmdbCache.SyncSubscribeRequest, global::LmdbCache.SyncSubscribeResponse> __Method_Subscribe = new grpc::Method<global::LmdbCache.SyncSubscribeRequest, global::LmdbCache.SyncSubscribeResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "Subscribe",
        __Marshaller_LmdbCache_SyncSubscribeRequest,
        __Marshaller_LmdbCache_SyncSubscribeResponse);

    static readonly grpc::Method<global::LmdbCache.SyncAckRequest, global::LmdbCache.Empty> __Method_Ack = new grpc::Method<global::LmdbCache.SyncAckRequest, global::LmdbCache.Empty>(
        grpc::MethodType.ClientStreaming,
        __ServiceName,
        "Ack",
        __Marshaller_LmdbCache_SyncAckRequest,
        __Marshaller_LmdbCache_Empty);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::LmdbCache.LmdbCacheRemotingReflection.Descriptor.Services[1]; }
    }

    /// <summary>Base class for server-side implementations of SyncService</summary>
    public abstract partial class SyncServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::LmdbCache.GetReplicaIdResponse> GetReplicaId(global::LmdbCache.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task SyncFrom(global::LmdbCache.SyncFromRequest request, grpc::IServerStreamWriter<global::LmdbCache.SyncFromResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task Subscribe(global::LmdbCache.SyncSubscribeRequest request, grpc::IServerStreamWriter<global::LmdbCache.SyncSubscribeResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::LmdbCache.Empty> Ack(grpc::IAsyncStreamReader<global::LmdbCache.SyncAckRequest> requestStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for SyncService</summary>
    public partial class SyncServiceClient : grpc::ClientBase<SyncServiceClient>
    {
      /// <summary>Creates a new client for SyncService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public SyncServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for SyncService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public SyncServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected SyncServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected SyncServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::LmdbCache.GetReplicaIdResponse GetReplicaId(global::LmdbCache.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetReplicaId(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::LmdbCache.GetReplicaIdResponse GetReplicaId(global::LmdbCache.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetReplicaId, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::LmdbCache.GetReplicaIdResponse> GetReplicaIdAsync(global::LmdbCache.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetReplicaIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::LmdbCache.GetReplicaIdResponse> GetReplicaIdAsync(global::LmdbCache.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetReplicaId, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::LmdbCache.SyncFromResponse> SyncFrom(global::LmdbCache.SyncFromRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SyncFrom(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::LmdbCache.SyncFromResponse> SyncFrom(global::LmdbCache.SyncFromRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_SyncFrom, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::LmdbCache.SyncSubscribeResponse> Subscribe(global::LmdbCache.SyncSubscribeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Subscribe(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::LmdbCache.SyncSubscribeResponse> Subscribe(global::LmdbCache.SyncSubscribeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_Subscribe, null, options, request);
      }
      public virtual grpc::AsyncClientStreamingCall<global::LmdbCache.SyncAckRequest, global::LmdbCache.Empty> Ack(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Ack(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncClientStreamingCall<global::LmdbCache.SyncAckRequest, global::LmdbCache.Empty> Ack(grpc::CallOptions options)
      {
        return CallInvoker.AsyncClientStreamingCall(__Method_Ack, null, options);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override SyncServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new SyncServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(SyncServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetReplicaId, serviceImpl.GetReplicaId)
          .AddMethod(__Method_SyncFrom, serviceImpl.SyncFrom)
          .AddMethod(__Method_Subscribe, serviceImpl.Subscribe)
          .AddMethod(__Method_Ack, serviceImpl.Ack).Build();
    }

  }
  /// <summary>
  /// Interface exported by the server.
  /// </summary>
  public static partial class MonitoringService
  {
    static readonly string __ServiceName = "LmdbCache.MonitoringService";

    static readonly grpc::Marshaller<global::LmdbCache.MonitoringUpdateRequest> __Marshaller_LmdbCache_MonitoringUpdateRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::LmdbCache.MonitoringUpdateRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::LmdbCache.MonitoringUpdateResponse> __Marshaller_LmdbCache_MonitoringUpdateResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::LmdbCache.MonitoringUpdateResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::LmdbCache.MonitoringUpdateRequest, global::LmdbCache.MonitoringUpdateResponse> __Method_GetStatus = new grpc::Method<global::LmdbCache.MonitoringUpdateRequest, global::LmdbCache.MonitoringUpdateResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetStatus",
        __Marshaller_LmdbCache_MonitoringUpdateRequest,
        __Marshaller_LmdbCache_MonitoringUpdateResponse);

    static readonly grpc::Method<global::LmdbCache.MonitoringUpdateRequest, global::LmdbCache.MonitoringUpdateResponse> __Method_Subscribe = new grpc::Method<global::LmdbCache.MonitoringUpdateRequest, global::LmdbCache.MonitoringUpdateResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "Subscribe",
        __Marshaller_LmdbCache_MonitoringUpdateRequest,
        __Marshaller_LmdbCache_MonitoringUpdateResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::LmdbCache.LmdbCacheRemotingReflection.Descriptor.Services[2]; }
    }

    /// <summary>Base class for server-side implementations of MonitoringService</summary>
    public abstract partial class MonitoringServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::LmdbCache.MonitoringUpdateResponse> GetStatus(global::LmdbCache.MonitoringUpdateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task Subscribe(global::LmdbCache.MonitoringUpdateRequest request, grpc::IServerStreamWriter<global::LmdbCache.MonitoringUpdateResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for MonitoringService</summary>
    public partial class MonitoringServiceClient : grpc::ClientBase<MonitoringServiceClient>
    {
      /// <summary>Creates a new client for MonitoringService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public MonitoringServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for MonitoringService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public MonitoringServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected MonitoringServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected MonitoringServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::LmdbCache.MonitoringUpdateResponse GetStatus(global::LmdbCache.MonitoringUpdateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetStatus(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::LmdbCache.MonitoringUpdateResponse GetStatus(global::LmdbCache.MonitoringUpdateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetStatus, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::LmdbCache.MonitoringUpdateResponse> GetStatusAsync(global::LmdbCache.MonitoringUpdateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetStatusAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::LmdbCache.MonitoringUpdateResponse> GetStatusAsync(global::LmdbCache.MonitoringUpdateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetStatus, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::LmdbCache.MonitoringUpdateResponse> Subscribe(global::LmdbCache.MonitoringUpdateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Subscribe(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::LmdbCache.MonitoringUpdateResponse> Subscribe(global::LmdbCache.MonitoringUpdateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_Subscribe, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override MonitoringServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new MonitoringServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(MonitoringServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetStatus, serviceImpl.GetStatus)
          .AddMethod(__Method_Subscribe, serviceImpl.Subscribe).Build();
    }

  }
}
#endregion
